import { ThemeProps, FormProps } from '@rjsf/core';
import * as _rjsf_utils from '@rjsf/utils';
import { TemplatesType } from '@rjsf/utils';

declare const Index: Partial<TemplatesType>;

declare const Widgets: {
    AltDateTimeWidget: {
        (props: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>): JSX.Element;
        defaultProps: {
            showTime: boolean;
            autofocus: boolean;
            disabled: boolean;
            options: {
                yearsRange: number[];
            };
            readonly: boolean;
        };
    };
    AltDateWidget: {
        ({ autofocus, disabled, formContext, id, onBlur, onChange, onFocus, options, readonly, registry, showTime, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>): JSX.Element;
        defaultProps: {
            autofocus: boolean;
            disabled: boolean;
            options: {
                yearsRange: number[];
            };
            readonly: boolean;
            showTime: boolean;
        };
    };
    CheckboxesWidget: ({ autofocus, disabled, formContext, id, onBlur, onChange, onFocus, options, readonly, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element | null;
    CheckboxWidget: ({ autofocus, disabled, formContext, id, label, onBlur, onChange, onFocus, readonly, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    DateTimeWidget: ({ disabled, formContext, id, onBlur, onChange, onFocus, placeholder, readonly, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    DateWidget: ({ disabled, formContext, id, onBlur, onChange, onFocus, placeholder, readonly, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    PasswordWidget: ({ disabled, formContext, id, onBlur, onChange, onFocus, options, placeholder, readonly, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    RadioWidget: ({ autofocus, disabled, formContext, id, onBlur, onChange, onFocus, options, readonly, schema, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    RangeWidget: ({ autofocus, disabled, formContext, id, onBlur, onChange, onFocus, options, placeholder, readonly, schema, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    SelectWidget: {
        ({ autofocus, disabled, formContext, id, multiple, onBlur, onChange, onFocus, options, placeholder, readonly, schema, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>): JSX.Element;
        defaultProps: {
            formContext: {};
        };
    };
    TextareaWidget: ({ disabled, formContext, id, onBlur, onChange, onFocus, options, placeholder, readonly, value, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
};

declare const Theme: ThemeProps;
declare const Form: React.ComponentType<FormProps>;

export { Form, Index as Templates, Theme, Widgets, Form as default };
