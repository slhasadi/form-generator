(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@rjsf/core'), require('react'), require('antd/lib/button'), require('antd/lib/col'), require('antd/lib/row'), require('@rjsf/utils'), require('classnames'), require('antd/lib/config-provider/context'), require('antd/lib/input'), require('antd/lib/input-number'), require('antd/lib/alert'), require('antd/lib/list'), require('antd/lib/space'), require('@ant-design/icons/ExclamationCircleOutlined'), require('@ant-design/icons/ArrowDownOutlined'), require('@ant-design/icons/ArrowUpOutlined'), require('@ant-design/icons/DeleteOutlined'), require('@ant-design/icons/PlusCircleOutlined'), require('antd/lib/form'), require('lodash-es/isObject'), require('lodash-es/isNumber'), require('lodash-es/isString'), require('antd/lib/checkbox'), require('dayjs'), require('rc-picker/lib/generate/dayjs'), require('antd/lib/date-picker/generatePicker'), require('antd/lib/radio'), require('antd/lib/slider'), require('antd/lib/select')) :
  typeof define === 'function' && define.amd ? define(['exports', '@rjsf/core', 'react', 'antd/lib/button', 'antd/lib/col', 'antd/lib/row', '@rjsf/utils', 'classnames', 'antd/lib/config-provider/context', 'antd/lib/input', 'antd/lib/input-number', 'antd/lib/alert', 'antd/lib/list', 'antd/lib/space', '@ant-design/icons/ExclamationCircleOutlined', '@ant-design/icons/ArrowDownOutlined', '@ant-design/icons/ArrowUpOutlined', '@ant-design/icons/DeleteOutlined', '@ant-design/icons/PlusCircleOutlined', 'antd/lib/form', 'lodash-es/isObject', 'lodash-es/isNumber', 'lodash-es/isString', 'antd/lib/checkbox', 'dayjs', 'rc-picker/lib/generate/dayjs', 'antd/lib/date-picker/generatePicker', 'antd/lib/radio', 'antd/lib/slider', 'antd/lib/select'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@rjsf/antd"] = {}, global.core, global.React, global.Button, global.Col, global.Row, global.utils, global.classNames, global.context, global.Input, global.InputNumber, global.Alert, global.List, global.Space, global.ExclamationCircleOutlined, global.ArrowDownOutlined, global.ArrowUpOutlined, global.DeleteOutlined, global.PlusCircleOutlined, global.Form$1, global.isObject, global.isNumber, global.isString, global.Checkbox, global.dayjs, global.dayjsGenerateConfig, global.generatePicker, global.Radio, global.Slider, global.Select));
})(this, (function (exports, core, React, Button, Col, Row, utils, classNames, context, Input, InputNumber, Alert, List, Space, ExclamationCircleOutlined, ArrowDownOutlined, ArrowUpOutlined, DeleteOutlined, PlusCircleOutlined, Form$1, isObject, isNumber, isString, Checkbox, dayjs, dayjsGenerateConfig, generatePicker, Radio, Slider, Select) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
  var Button__default = /*#__PURE__*/_interopDefaultLegacy(Button);
  var Col__default = /*#__PURE__*/_interopDefaultLegacy(Col);
  var Row__default = /*#__PURE__*/_interopDefaultLegacy(Row);
  var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
  var Input__default = /*#__PURE__*/_interopDefaultLegacy(Input);
  var InputNumber__default = /*#__PURE__*/_interopDefaultLegacy(InputNumber);
  var Alert__default = /*#__PURE__*/_interopDefaultLegacy(Alert);
  var List__default = /*#__PURE__*/_interopDefaultLegacy(List);
  var Space__default = /*#__PURE__*/_interopDefaultLegacy(Space);
  var ExclamationCircleOutlined__default = /*#__PURE__*/_interopDefaultLegacy(ExclamationCircleOutlined);
  var ArrowDownOutlined__default = /*#__PURE__*/_interopDefaultLegacy(ArrowDownOutlined);
  var ArrowUpOutlined__default = /*#__PURE__*/_interopDefaultLegacy(ArrowUpOutlined);
  var DeleteOutlined__default = /*#__PURE__*/_interopDefaultLegacy(DeleteOutlined);
  var PlusCircleOutlined__default = /*#__PURE__*/_interopDefaultLegacy(PlusCircleOutlined);
  var Form__default = /*#__PURE__*/_interopDefaultLegacy(Form$1);
  var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);
  var isNumber__default = /*#__PURE__*/_interopDefaultLegacy(isNumber);
  var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);
  var Checkbox__default = /*#__PURE__*/_interopDefaultLegacy(Checkbox);
  var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
  var dayjsGenerateConfig__default = /*#__PURE__*/_interopDefaultLegacy(dayjsGenerateConfig);
  var generatePicker__default = /*#__PURE__*/_interopDefaultLegacy(generatePicker);
  var Radio__default = /*#__PURE__*/_interopDefaultLegacy(Radio);
  var Slider__default = /*#__PURE__*/_interopDefaultLegacy(Slider);
  var Select__default = /*#__PURE__*/_interopDefaultLegacy(Select);

  const BTN_GRP_STYLE = {
    width: "100%"
  };
  const BTN_STYLE = {
    width: "calc(100% / 3)"
  };
  const ArrayFieldItemTemplate = _ref => {
    let {
      children,
      disabled,
      hasMoveDown,
      hasMoveUp,
      hasRemove,
      hasToolbar,
      index,
      onDropIndexClick,
      onReorderClick,
      readonly,
      registry,
      uiSchema
    } = _ref;
    const {
      MoveDownButton,
      MoveUpButton,
      RemoveButton
    } = registry.templates.ButtonTemplates;
    const {
      rowGutter = 24,
      toolbarAlign = "top"
    } = registry.formContext;
    return /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      align: toolbarAlign,
      key: `array-item-${index}`,
      gutter: rowGutter
    }, /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "1"
    }, children), hasToolbar && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "192px"
    }, /*#__PURE__*/React__default["default"].createElement(Button__default["default"].Group, {
      style: BTN_GRP_STYLE
    }, (hasMoveUp || hasMoveDown) && /*#__PURE__*/React__default["default"].createElement(MoveUpButton, {
      disabled: disabled || readonly || !hasMoveUp,
      onClick: onReorderClick(index, index - 1),
      style: BTN_STYLE,
      uiSchema: uiSchema
    }), (hasMoveUp || hasMoveDown) && /*#__PURE__*/React__default["default"].createElement(MoveDownButton, {
      disabled: disabled || readonly || !hasMoveDown,
      onClick: onReorderClick(index, index + 1),
      style: BTN_STYLE,
      uiSchema: uiSchema
    }), hasRemove && /*#__PURE__*/React__default["default"].createElement(RemoveButton, {
      disabled: disabled || readonly,
      onClick: onDropIndexClick(index),
      style: BTN_STYLE,
      uiSchema: uiSchema
    }))));
  };

  const DESCRIPTION_COL_STYLE$1 = {
    paddingBottom: "8px"
  };
  const ArrayFieldTemplate = _ref => {
    let {
      canAdd,
      className,
      disabled,
      formContext,
      idSchema,
      items,
      onAddClick,
      prefixCls,
      readonly,
      registry,
      required,
      schema,
      title,
      uiSchema
    } = _ref;
    const uiOptions = utils.getUiOptions(uiSchema);
    const ArrayFieldDescriptionTemplate = utils.getTemplate("ArrayFieldDescriptionTemplate", registry, uiOptions);
    const ArrayFieldItemTemplate = utils.getTemplate("ArrayFieldItemTemplate", registry, uiOptions);
    const ArrayFieldTitleTemplate = utils.getTemplate("ArrayFieldTitleTemplate", registry, uiOptions);
    // Button templates are not overridden in the uiSchema
    const {
      ButtonTemplates: {
        AddButton
      }
    } = registry.templates;
    const {
      labelAlign = "right",
      rowGutter = 24
    } = formContext;
    const labelClsBasic = `${prefixCls}-item-label`;
    const labelColClassName = classNames__default["default"](labelClsBasic, labelAlign === "left" && `${labelClsBasic}-left`
    // labelCol.className,
    );

    return /*#__PURE__*/React__default["default"].createElement("fieldset", {
      className: className,
      id: idSchema.$id
    }, /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      gutter: rowGutter
    }, (uiOptions.title || title) && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      className: labelColClassName,
      span: 24
    }, /*#__PURE__*/React__default["default"].createElement(ArrayFieldTitleTemplate, {
      idSchema: idSchema,
      required: required,
      title: uiOptions.title || title,
      schema: schema,
      uiSchema: uiSchema,
      registry: registry
    })), (uiOptions.description || schema.description) && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      span: 24,
      style: DESCRIPTION_COL_STYLE$1
    }, /*#__PURE__*/React__default["default"].createElement(ArrayFieldDescriptionTemplate, {
      description: uiOptions.description || schema.description || "",
      idSchema: idSchema,
      schema: schema,
      uiSchema: uiSchema,
      registry: registry
    })), /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      className: "row array-item-list",
      span: 24
    }, items && items.map(_ref2 => {
      let {
        key,
        ...itemProps
      } = _ref2;
      return /*#__PURE__*/React__default["default"].createElement(ArrayFieldItemTemplate, {
        key: key,
        ...itemProps
      });
    })), canAdd && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      span: 24
    }, /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      gutter: rowGutter,
      justify: "end"
    }, /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "192px"
    }, /*#__PURE__*/React__default["default"].createElement(AddButton, {
      className: "array-item-add",
      disabled: disabled || readonly,
      onClick: onAddClick,
      uiSchema: uiSchema
    }))))));
  };
  var ArrayFieldTemplate$1 = /*#__PURE__*/context.withConfigConsumer({
    prefixCls: "form"
  })(ArrayFieldTemplate);

  const INPUT_STYLE$2 = {
    width: "100%"
  };
  const BaseInputTemplate = _ref => {
    let {
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      placeholder,
      readonly,
      schema,
      value,
      type
    } = _ref;
    const inputProps = utils.getInputProps(schema, type, options, false);
    const {
      readonlyAsDisabled = true
    } = formContext;
    const handleNumberChange = nextValue => onChange(nextValue);
    const handleTextChange = _ref2 => {
      let {
        target
      } = _ref2;
      return onChange(target.value === "" ? options.emptyValue : target.value);
    };
    const handleBlur = _ref3 => {
      let {
        target
      } = _ref3;
      return onBlur(id, target.value);
    };
    const handleFocus = _ref4 => {
      let {
        target
      } = _ref4;
      return onFocus(id, target.value);
    };
    const input = inputProps.type === "number" || inputProps.type === "integer" ? /*#__PURE__*/React__default["default"].createElement(InputNumber__default["default"], {
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      name: id,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleNumberChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      style: INPUT_STYLE$2,
      list: schema.examples ? `examples_${id}` : undefined,
      ...inputProps,
      value: value
    }) : /*#__PURE__*/React__default["default"].createElement(Input__default["default"], {
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      name: id,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleTextChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      style: INPUT_STYLE$2,
      list: schema.examples ? `examples_${id}` : undefined,
      ...inputProps,
      value: value
    });
    return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, input, schema.examples && /*#__PURE__*/React__default["default"].createElement("datalist", {
      id: `examples_${id}`
    }, schema.examples.concat(schema.default ? [schema.default] : []).map(example => {
      return /*#__PURE__*/React__default["default"].createElement("option", {
        key: example,
        value: example
      });
    })));
  };

  const DescriptionField = _ref => {
    let {
      description,
      id
    } = _ref;
    if (!description) {
      return null;
    }
    return /*#__PURE__*/React__default["default"].createElement("span", {
      id: id
    }, description);
  };

  const ErrorList = _ref => {
    let {
      errors
    } = _ref;
    const renderErrors = () => /*#__PURE__*/React__default["default"].createElement(List__default["default"], {
      className: "list-group",
      size: "small"
    }, errors.map((error, index) => /*#__PURE__*/React__default["default"].createElement(List__default["default"].Item, {
      key: index
    }, /*#__PURE__*/React__default["default"].createElement(Space__default["default"], null, /*#__PURE__*/React__default["default"].createElement(ExclamationCircleOutlined__default["default"], null), error.stack))));
    return /*#__PURE__*/React__default["default"].createElement(Alert__default["default"], {
      className: "panel panel-danger errors",
      description: renderErrors(),
      message: "Errors",
      type: "error"
    });
  };

  function IconButton(props) {
    const {
      iconType = "default",
      icon,
      uiSchema,
      ...otherProps
    } = props;
    return /*#__PURE__*/React__default["default"].createElement(Button__default["default"], {
      type: iconType,
      icon: icon,
      ...otherProps
    });
  }
  function AddButton(props) {
    return /*#__PURE__*/React__default["default"].createElement(IconButton, {
      title: "Add Item",
      ...props,
      block: true,
      iconType: "primary",
      icon: /*#__PURE__*/React__default["default"].createElement(PlusCircleOutlined__default["default"], null)
    });
  }
  function MoveDownButton(props) {
    return /*#__PURE__*/React__default["default"].createElement(IconButton, {
      title: "Move down",
      ...props,
      icon: /*#__PURE__*/React__default["default"].createElement(ArrowDownOutlined__default["default"], null)
    });
  }
  function MoveUpButton(props) {
    return /*#__PURE__*/React__default["default"].createElement(IconButton, {
      title: "Move up",
      ...props,
      icon: /*#__PURE__*/React__default["default"].createElement(ArrowUpOutlined__default["default"], null)
    });
  }
  function RemoveButton(props) {
    // The `block` prop is not part of the `IconButtonProps` defined in the template, so get it from the uiSchema instead
    const options = utils.getUiOptions(props.uiSchema);
    return /*#__PURE__*/React__default["default"].createElement(IconButton, {
      title: "Remove",
      ...props,
      danger: true,
      block: !!options.block,
      iconType: "primary",
      icon: /*#__PURE__*/React__default["default"].createElement(DeleteOutlined__default["default"], null)
    });
  }

  /** The `FieldErrorTemplate` component renders the errors local to the particular field
   *
   * @param props - The `FieldErrorProps` for the errors being rendered
   */
  function FieldErrorTemplate(props) {
    const {
      errors = [],
      idSchema
    } = props;
    if (errors.length === 0) {
      return null;
    }
    const id = `${idSchema.$id}__error`;
    return /*#__PURE__*/React__default["default"].createElement("div", {
      id: id
    }, errors.map(error => /*#__PURE__*/React__default["default"].createElement("div", {
      key: `field-${id}-error-${error}`
    }, error)));
  }

  const VERTICAL_LABEL_COL$1 = {
    span: 24
  };
  const VERTICAL_WRAPPER_COL$1 = {
    span: 24
  };
  const FieldTemplate = _ref => {
    let {
      children,
      classNames,
      description,
      disabled,
      displayLabel,
      errors,
      formContext,
      help,
      hidden,
      id,
      label,
      onDropPropertyClick,
      onKeyChange,
      rawErrors,
      rawDescription,
      rawHelp,
      readonly,
      registry,
      required,
      schema,
      uiSchema
    } = _ref;
    const {
      colon,
      labelCol = VERTICAL_LABEL_COL$1,
      wrapperCol = VERTICAL_WRAPPER_COL$1,
      wrapperStyle
    } = formContext;
    const uiOptions = utils.getUiOptions(uiSchema);
    const WrapIfAdditionalTemplate = utils.getTemplate("WrapIfAdditionalTemplate", registry, uiOptions);
    if (hidden) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "field-hidden"
      }, children);
    }
    return /*#__PURE__*/React__default["default"].createElement(WrapIfAdditionalTemplate, {
      classNames: classNames,
      disabled: disabled,
      id: id,
      label: label,
      onDropPropertyClick: onDropPropertyClick,
      onKeyChange: onKeyChange,
      readonly: readonly,
      required: required,
      schema: schema,
      uiSchema: uiSchema,
      registry: registry
    }, id === "root" ? children : /*#__PURE__*/React__default["default"].createElement(Form__default["default"].Item, {
      colon: colon,
      extra: rawDescription && description,
      hasFeedback: schema.type !== "array" && schema.type !== "object",
      help: !!rawHelp && help || (rawErrors !== null && rawErrors !== void 0 && rawErrors.length ? errors : undefined),
      htmlFor: id,
      label: displayLabel && label,
      labelCol: labelCol,
      required: required,
      style: wrapperStyle,
      validateStatus: rawErrors !== null && rawErrors !== void 0 && rawErrors.length ? "error" : undefined,
      wrapperCol: wrapperCol
    }, children));
  };

  const DESCRIPTION_COL_STYLE = {
    paddingBottom: "8px"
  };
  const ObjectFieldTemplate = _ref => {
    let {
      description,
      disabled,
      formContext,
      formData,
      idSchema,
      onAddClick,
      prefixCls,
      properties,
      readonly,
      required,
      registry,
      schema,
      title,
      uiSchema
    } = _ref;
    const uiOptions = utils.getUiOptions(uiSchema);
    const TitleFieldTemplate = utils.getTemplate("TitleFieldTemplate", registry, uiOptions);
    const DescriptionFieldTemplate = utils.getTemplate("DescriptionFieldTemplate", registry, uiOptions);
    // Button templates are not overridden in the uiSchema
    const {
      ButtonTemplates: {
        AddButton
      }
    } = registry.templates;
    const {
      colSpan = 24,
      labelAlign = "right",
      rowGutter = 24
    } = formContext;
    const labelClsBasic = `${prefixCls}-item-label`;
    const labelColClassName = classNames__default["default"](labelClsBasic, labelAlign === "left" && `${labelClsBasic}-left`
    // labelCol.className,
    );

    const findSchema = element => element.content.props.schema;
    const findSchemaType = element => findSchema(element).type;
    const findUiSchema = element => element.content.props.uiSchema;
    const findUiSchemaField = element => utils.getUiOptions(findUiSchema(element)).field;
    const findUiSchemaWidget = element => utils.getUiOptions(findUiSchema(element)).widget;
    const calculateColSpan = element => {
      const type = findSchemaType(element);
      const field = findUiSchemaField(element);
      const widget = findUiSchemaWidget(element);
      const defaultColSpan = properties.length < 2 ||
      // Single or no field in object.
      type === "object" || type === "array" || widget === "textarea" ? 24 : 12;
      if (isObject__default["default"](colSpan)) {
        const colSpanObj = colSpan;
        if (isString__default["default"](widget)) {
          return colSpanObj[widget];
        }
        if (isString__default["default"](field)) {
          return colSpanObj[field];
        }
        if (isString__default["default"](type)) {
          return colSpanObj[type];
        }
      }
      if (isNumber__default["default"](colSpan)) {
        return colSpan;
      }
      return defaultColSpan;
    };
    return /*#__PURE__*/React__default["default"].createElement("fieldset", {
      id: idSchema.$id
    }, /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      gutter: rowGutter
    }, (uiOptions.title || title) && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      className: labelColClassName,
      span: 24
    }, /*#__PURE__*/React__default["default"].createElement(TitleFieldTemplate, {
      id: `${idSchema.$id}-title`,
      required: required,
      title: uiOptions.title || title,
      schema: schema,
      uiSchema: uiSchema,
      registry: registry
    })), (uiOptions.description || description) && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      span: 24,
      style: DESCRIPTION_COL_STYLE
    }, /*#__PURE__*/React__default["default"].createElement(DescriptionFieldTemplate, {
      description: uiOptions.description || description,
      id: `${idSchema.$id}-description`,
      schema: schema,
      uiSchema: uiSchema,
      registry: registry
    })), properties.filter(e => !e.hidden).map(element => /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      key: element.name,
      span: calculateColSpan(element)
    }, element.content))), utils.canExpand(schema, uiSchema, formData) && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      span: 24
    }, /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      gutter: rowGutter,
      justify: "end"
    }, /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "192px"
    }, /*#__PURE__*/React__default["default"].createElement(AddButton, {
      className: "object-property-expand",
      disabled: disabled || readonly,
      onClick: onAddClick(schema),
      uiSchema: uiSchema
    })))));
  };
  var ObjectFieldTemplate$1 = /*#__PURE__*/context.withConfigConsumer({
    prefixCls: "form"
  })(ObjectFieldTemplate);

  var SubmitButton = (_ref => {
    let {
      uiSchema
    } = _ref;
    const {
      submitText,
      norender,
      props: submitButtonProps
    } = utils.getSubmitButtonOptions(uiSchema);
    if (norender) {
      return null;
    }
    return /*#__PURE__*/React__default["default"].createElement(Button__default["default"], {
      type: "submit",
      ...submitButtonProps,
      htmlType: "submit"
    }, submitText);
  });

  const TitleField = _ref => {
    let {
      id,
      prefixCls,
      required,
      registry,
      formContext: formContext1,
      title
    } = _ref;
    const {
      formContext
    } = registry;
    const {
      colon = true
    } = {
      ...formContext1,
      ...formContext
    };
    let labelChildren = title;
    if (colon && typeof title === "string" && title.trim() !== "") {
      labelChildren = title.replace(/[：:]\s*$/, "");
    }
    const labelClassName = classNames__default["default"]({
      [`${prefixCls}-item-required`]: required,
      [`${prefixCls}-item-no-colon`]: !colon
    });
    const handleLabelClick = () => {
      if (!id) {
        return;
      }
      const control = document.querySelector(`[id="${id}"]`);
      if (control && control.focus) {
        control.focus();
      }
    };
    return title ? /*#__PURE__*/React__default["default"].createElement("label", {
      className: labelClassName,
      htmlFor: id,
      onClick: handleLabelClick,
      title: typeof title === "string" ? title : ""
    }, labelChildren) : null;
  };
  TitleField.defaultProps = {
    formContext: {}
  };
  var TitleField$1 = /*#__PURE__*/context.withConfigConsumer({
    prefixCls: "form"
  })(TitleField);

  const VERTICAL_LABEL_COL = {
    span: 24
  };
  const VERTICAL_WRAPPER_COL = {
    span: 24
  };
  const INPUT_STYLE$1 = {
    width: "100%"
  };
  const WrapIfAdditionalTemplate = _ref => {
    let {
      children,
      classNames,
      disabled,
      id,
      label,
      onDropPropertyClick,
      onKeyChange,
      readonly,
      required,
      registry,
      schema,
      uiSchema
    } = _ref;
    const {
      colon,
      labelCol = VERTICAL_LABEL_COL,
      readonlyAsDisabled = true,
      rowGutter = 24,
      toolbarAlign = "top",
      wrapperCol = VERTICAL_WRAPPER_COL,
      wrapperStyle
    } = registry.formContext;
    // Button templates are not overridden in the uiSchema
    const {
      RemoveButton
    } = registry.templates.ButtonTemplates;
    const keyLabel = `${label} Key`; // i18n ?
    const additional = (utils.ADDITIONAL_PROPERTY_FLAG in schema);
    if (!additional) {
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: classNames
      }, children);
    }
    const handleBlur = _ref2 => {
      let {
        target
      } = _ref2;
      return onKeyChange(target.value);
    };
    // The `block` prop is not part of the `IconButtonProps` defined in the template, so put it into the uiSchema instead
    const uiOptions = uiSchema ? uiSchema[utils.UI_OPTIONS_KEY] : {};
    const buttonUiOptions = {
      ...uiSchema,
      [utils.UI_OPTIONS_KEY]: {
        ...uiOptions,
        block: true
      }
    };
    return /*#__PURE__*/React__default["default"].createElement("div", {
      className: classNames
    }, /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      align: toolbarAlign,
      gutter: rowGutter
    }, /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      className: "form-additional",
      flex: "1"
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: "form-group"
    }, /*#__PURE__*/React__default["default"].createElement(Form__default["default"].Item, {
      colon: colon,
      className: "form-group",
      hasFeedback: true,
      htmlFor: `${id}-key`,
      label: keyLabel,
      labelCol: labelCol,
      required: required,
      style: wrapperStyle,
      wrapperCol: wrapperCol
    }, /*#__PURE__*/React__default["default"].createElement(Input__default["default"], {
      className: "form-control",
      defaultValue: label,
      disabled: disabled || readonlyAsDisabled && readonly,
      id: `${id}-key`,
      name: `${id}-key`,
      onBlur: !readonly ? handleBlur : undefined,
      style: INPUT_STYLE$1,
      type: "text"
    })))), /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      className: "form-additional",
      flex: "1"
    }, children), /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "192px"
    }, /*#__PURE__*/React__default["default"].createElement(RemoveButton, {
      className: "array-item-remove",
      disabled: disabled || readonly,
      onClick: onDropPropertyClick(label),
      uiSchema: buttonUiOptions
    }))));
  };

  const Index = {
    ArrayFieldItemTemplate,
    ArrayFieldTemplate: ArrayFieldTemplate$1,
    BaseInputTemplate,
    ButtonTemplates: {
      AddButton,
      MoveDownButton,
      MoveUpButton,
      RemoveButton,
      SubmitButton
    },
    DescriptionFieldTemplate: DescriptionField,
    ErrorListTemplate: ErrorList,
    FieldErrorTemplate,
    FieldTemplate,
    ObjectFieldTemplate: ObjectFieldTemplate$1,
    TitleFieldTemplate: TitleField$1,
    WrapIfAdditionalTemplate
  };

  const rangeOptions = (start, stop) => {
    const options = [];
    for (let i = start; i <= stop; i++) {
      options.push({
        value: i,
        label: utils.pad(i, 2)
      });
    }
    return options;
  };
  const readyForChange = state => {
    return Object.values(state).every(value => value !== -1);
  };
  function dateElementProps(state, time, yearsRange) {
    if (yearsRange === void 0) {
      yearsRange = [1900, new Date().getFullYear() + 2];
    }
    const {
      year,
      month,
      day,
      hour,
      minute,
      second
    } = state;
    const data = [{
      type: "year",
      range: yearsRange,
      value: year
    }, {
      type: "month",
      range: [1, 12],
      value: month
    }, {
      type: "day",
      range: [1, 31],
      value: day
    }];
    if (time) {
      data.push({
        type: "hour",
        range: [0, 23],
        value: hour || -1
      }, {
        type: "minute",
        range: [0, 59],
        value: minute || -1
      }, {
        type: "second",
        range: [0, 59],
        value: second || -1
      });
    }
    return data;
  }
  const AltDateWidget = _ref => {
    let {
      autofocus,
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      readonly,
      registry,
      showTime,
      value
    } = _ref;
    const {
      SelectWidget
    } = registry.widgets;
    const {
      rowGutter = 24
    } = formContext;
    const [state, setState] = React.useState(utils.parseDateString(value, showTime));
    React.useEffect(() => {
      setState(utils.parseDateString(value, showTime));
    }, [showTime, value]);
    const handleChange = (property, nextValue) => {
      const nextState = {
        ...state,
        [property]: typeof nextValue === "undefined" ? -1 : nextValue
      };
      if (readyForChange(nextState)) {
        onChange(utils.toDateString(nextState, showTime));
      } else {
        setState(nextState);
      }
    };
    const handleNow = event => {
      event.preventDefault();
      if (disabled || readonly) {
        return;
      }
      const nextState = utils.parseDateString(new Date().toJSON(), showTime);
      onChange(utils.toDateString(nextState, showTime));
    };
    const handleClear = event => {
      event.preventDefault();
      if (disabled || readonly) {
        return;
      }
      onChange(undefined);
    };
    const renderDateElement = elemProps => /*#__PURE__*/React__default["default"].createElement(SelectWidget, {
      autofocus: elemProps.autofocus,
      className: "form-control",
      disabled: elemProps.disabled,
      id: elemProps.id,
      name: elemProps.name,
      onBlur: elemProps.onBlur,
      onChange: elemValue => elemProps.select(elemProps.type, elemValue),
      onFocus: elemProps.onFocus,
      options: {
        enumOptions: rangeOptions(elemProps.range[0], elemProps.range[1])
      },
      placeholder: elemProps.type,
      readonly: elemProps.readonly,
      schema: {
        type: "integer"
      },
      value: elemProps.value,
      registry: registry,
      label: ""
    });
    return /*#__PURE__*/React__default["default"].createElement(Row__default["default"], {
      gutter: [Math.floor(rowGutter / 2), Math.floor(rowGutter / 2)]
    }, dateElementProps(state, showTime, options.yearsRange).map((elemProps, i) => {
      const elemId = id + "_" + elemProps.type;
      return /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
        flex: "88px",
        key: elemId
      }, renderDateElement({
        ...elemProps,
        autofocus: autofocus && i === 0,
        disabled,
        id: elemId,
        name: id,
        onBlur,
        onFocus,
        readonly,
        registry,
        select: handleChange,
        // NOTE: antd components accept -1 rather than issue a warning
        // like material-ui, so we need to convert -1 to undefined here.
        value: elemProps.value < 0 ? undefined : elemProps.value
      }));
    }), !options.hideNowButton && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "88px"
    }, /*#__PURE__*/React__default["default"].createElement(Button__default["default"], {
      block: true,
      className: "btn-now",
      onClick: handleNow,
      type: "primary"
    }, "Now")), !options.hideClearButton && /*#__PURE__*/React__default["default"].createElement(Col__default["default"], {
      flex: "88px"
    }, /*#__PURE__*/React__default["default"].createElement(Button__default["default"], {
      block: true,
      className: "btn-clear",
      danger: true,
      onClick: handleClear,
      type: "primary"
    }, "Clear")));
  };
  AltDateWidget.defaultProps = {
    autofocus: false,
    disabled: false,
    options: {
      yearsRange: [1900, /*#__PURE__*/new Date().getFullYear() + 2]
    },
    readonly: false,
    showTime: false
  };

  const AltDateTimeWidget = props => {
    const {
      AltDateWidget
    } = props.registry.widgets;
    return /*#__PURE__*/React__default["default"].createElement(AltDateWidget, {
      showTime: true,
      ...props
    });
  };
  AltDateTimeWidget.defaultProps = {
    ...AltDateWidget.defaultProps,
    showTime: true
  };

  const CheckboxesWidget = _ref => {
    let {
      autofocus,
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      readonly,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const {
      enumOptions,
      enumDisabled,
      inline
    } = options;
    const handleChange = nextValue => onChange(nextValue);
    const handleBlur = _ref2 => {
      let {
        target
      } = _ref2;
      return onBlur(id, target.value);
    };
    const handleFocus = _ref3 => {
      let {
        target
      } = _ref3;
      return onFocus(id, target.value);
    };
    // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,
    // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors
    const extraProps = {
      id,
      onBlur: !readonly ? handleBlur : undefined,
      onFocus: !readonly ? handleFocus : undefined
    };
    return Array.isArray(enumOptions) && enumOptions.length > 0 ? /*#__PURE__*/React__default["default"].createElement(Checkbox__default["default"].Group, {
      disabled: disabled || readonlyAsDisabled && readonly,
      name: id,
      onChange: !readonly ? handleChange : undefined,
      value: value,
      ...extraProps
    }, Array.isArray(enumOptions) && enumOptions.map((_ref4, i) => {
      let {
        value: optionValue,
        label: optionLabel
      } = _ref4;
      return /*#__PURE__*/React__default["default"].createElement("span", {
        key: optionValue
      }, /*#__PURE__*/React__default["default"].createElement(Checkbox__default["default"], {
        id: `${id}-${optionValue}`,
        name: id,
        autoFocus: i === 0 ? autofocus : false,
        disabled: Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1,
        value: optionValue
      }, optionLabel), !inline && /*#__PURE__*/React__default["default"].createElement("br", null));
    })) : null;
  };

  const CheckboxWidget = _ref => {
    let {
      autofocus,
      disabled,
      formContext,
      id,
      label,
      onBlur,
      onChange,
      onFocus,
      readonly,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const handleChange = _ref2 => {
      let {
        target
      } = _ref2;
      return onChange(target.checked);
    };
    const handleBlur = _ref3 => {
      let {
        target
      } = _ref3;
      return onBlur(id, target.checked);
    };
    const handleFocus = _ref4 => {
      let {
        target
      } = _ref4;
      return onFocus(id, target.checked);
    };
    // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,
    // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors
    const extraProps = {
      onBlur: !readonly ? handleBlur : undefined,
      onFocus: !readonly ? handleFocus : undefined
    };
    return /*#__PURE__*/React__default["default"].createElement(Checkbox__default["default"], {
      autoFocus: autofocus,
      checked: typeof value === "undefined" ? false : value,
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      name: id,
      onChange: !readonly ? handleChange : undefined,
      ...extraProps
    }, label);
  };

  const DatePicker = /*#__PURE__*/generatePicker__default["default"](dayjsGenerateConfig__default["default"]);

  const DATE_PICKER_STYLE$1 = {
    width: "100%"
  };
  const DateTimeWidget = _ref => {
    let {
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      readonly,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const handleChange = nextValue => onChange(nextValue && nextValue.toISOString());
    const handleBlur = () => onBlur(id, value);
    const handleFocus = () => onFocus(id, value);
    const getPopupContainer = node => node.parentNode;
    return /*#__PURE__*/React__default["default"].createElement(DatePicker, {
      disabled: disabled || readonlyAsDisabled && readonly,
      getPopupContainer: getPopupContainer,
      id: id,
      name: id,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      showTime: true,
      style: DATE_PICKER_STYLE$1,
      value: value && dayjs__default["default"](value)
    });
  };

  const DATE_PICKER_STYLE = {
    width: "100%"
  };
  const DateWidget = _ref => {
    let {
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      readonly,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const handleChange = nextValue => onChange(nextValue && nextValue.format("YYYY-MM-DD"));
    const handleBlur = () => onBlur(id, value);
    const handleFocus = () => onFocus(id, value);
    const getPopupContainer = node => node.parentNode;
    return /*#__PURE__*/React__default["default"].createElement(DatePicker, {
      disabled: disabled || readonlyAsDisabled && readonly,
      getPopupContainer: getPopupContainer,
      id: id,
      name: id,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      showTime: false,
      style: DATE_PICKER_STYLE,
      value: value && dayjs__default["default"](value)
    });
  };

  const PasswordWidget = _ref => {
    let {
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      placeholder,
      readonly,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const emptyValue = options.emptyValue || "";
    const handleChange = _ref2 => {
      let {
        target
      } = _ref2;
      return onChange(target.value === "" ? emptyValue : target.value);
    };
    const handleBlur = _ref3 => {
      let {
        target
      } = _ref3;
      return onBlur(id, target.value);
    };
    const handleFocus = _ref4 => {
      let {
        target
      } = _ref4;
      return onFocus(id, target.value);
    };
    return /*#__PURE__*/React__default["default"].createElement(Input__default["default"].Password, {
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      name: id,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      value: value || ""
    });
  };

  const RadioWidget = _ref => {
    let {
      autofocus,
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      readonly,
      schema,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const {
      enumOptions,
      enumDisabled
    } = options;
    const handleChange = _ref2 => {
      let {
        target: {
          value: nextValue
        }
      } = _ref2;
      return onChange(schema.type === "boolean" ? nextValue !== "false" : nextValue);
    };
    const handleBlur = _ref3 => {
      let {
        target
      } = _ref3;
      return onBlur(id, target.value);
    };
    const handleFocus = _ref4 => {
      let {
        target
      } = _ref4;
      return onFocus(id, target.value);
    };
    return /*#__PURE__*/React__default["default"].createElement(Radio__default["default"].Group, {
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      name: id,
      onChange: !readonly ? handleChange : undefined,
      onBlur: !readonly ? handleBlur : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      value: `${value}`
    }, Array.isArray(enumOptions) && enumOptions.map((_ref5, i) => {
      let {
        value: optionValue,
        label: optionLabel
      } = _ref5;
      return /*#__PURE__*/React__default["default"].createElement(Radio__default["default"], {
        id: `${id}-${optionValue}`,
        name: id,
        autoFocus: i === 0 ? autofocus : false,
        disabled: Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1,
        key: optionValue,
        value: `${optionValue}`
      }, optionLabel);
    }));
  };

  const RangeWidget = _ref => {
    let {
      autofocus,
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      placeholder,
      readonly,
      schema,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const {
      min,
      max,
      step
    } = utils.rangeSpec(schema);
    const emptyValue = options.emptyValue || "";
    const handleChange = nextValue => onChange(nextValue === "" ? emptyValue : nextValue);
    const handleBlur = () => onBlur(id, value);
    const handleFocus = () => onFocus(id, value);
    // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,
    // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors
    const extraProps = {
      placeholder,
      onBlur: !readonly ? handleBlur : undefined,
      onFocus: !readonly ? handleFocus : undefined
    };
    return /*#__PURE__*/React__default["default"].createElement(Slider__default["default"], {
      autoFocus: autofocus,
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      max: max,
      min: min,
      onChange: !readonly ? handleChange : undefined,
      range: false,
      step: step,
      value: value,
      ...extraProps
    });
  };

  const SELECT_STYLE = {
    width: "100%"
  };
  const SelectWidget = _ref => {
    let {
      autofocus,
      disabled,
      formContext,
      id,
      multiple,
      onBlur,
      onChange,
      onFocus,
      options,
      placeholder,
      readonly,
      schema,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const {
      enumOptions,
      enumDisabled
    } = options;
    const handleChange = nextValue => onChange(utils.processSelectValue(schema, nextValue, options));
    const handleBlur = () => onBlur(id, utils.processSelectValue(schema, value, options));
    const handleFocus = () => onFocus(id, utils.processSelectValue(schema, value, options));
    const getPopupContainer = node => node.parentNode;
    const stringify = currentValue => Array.isArray(currentValue) ? value.map(String) : String(value);
    // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,
    // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors
    const extraProps = {
      name: id
    };
    return /*#__PURE__*/React__default["default"].createElement(Select__default["default"], {
      autoFocus: autofocus,
      disabled: disabled || readonlyAsDisabled && readonly,
      getPopupContainer: getPopupContainer,
      id: id,
      mode: typeof multiple !== "undefined" ? "multiple" : undefined,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      style: SELECT_STYLE,
      value: typeof value !== "undefined" ? stringify(value) : undefined,
      ...extraProps
    }, Array.isArray(enumOptions) && enumOptions.map(_ref2 => {
      let {
        value: optionValue,
        label: optionLabel
      } = _ref2;
      return /*#__PURE__*/React__default["default"].createElement(Select__default["default"].Option, {
        disabled: Array.isArray(enumDisabled) && enumDisabled.indexOf(optionValue) !== -1,
        key: String(optionValue),
        value: String(optionValue)
      }, optionLabel);
    }));
  };
  SelectWidget.defaultProps = {
    formContext: {}
  };

  const INPUT_STYLE = {
    width: "100%"
  };
  const TextareaWidget = _ref => {
    let {
      disabled,
      formContext,
      id,
      onBlur,
      onChange,
      onFocus,
      options,
      placeholder,
      readonly,
      value
    } = _ref;
    const {
      readonlyAsDisabled = true
    } = formContext;
    const handleChange = _ref2 => {
      let {
        target
      } = _ref2;
      return onChange(target.value === "" ? options.emptyValue : target.value);
    };
    const handleBlur = _ref3 => {
      let {
        target
      } = _ref3;
      return onBlur(id, target.value);
    };
    const handleFocus = _ref4 => {
      let {
        target
      } = _ref4;
      return onFocus(id, target.value);
    };
    // Antd's typescript definitions do not contain the following props that are actually necessary and, if provided,
    // they are used, so hacking them in via by spreading `extraProps` on the component to avoid typescript errors
    const extraProps = {
      type: "textarea"
    };
    return /*#__PURE__*/React__default["default"].createElement(Input__default["default"].TextArea, {
      disabled: disabled || readonlyAsDisabled && readonly,
      id: id,
      name: id,
      onBlur: !readonly ? handleBlur : undefined,
      onChange: !readonly ? handleChange : undefined,
      onFocus: !readonly ? handleFocus : undefined,
      placeholder: placeholder,
      rows: options.rows || 4,
      style: INPUT_STYLE,
      value: value,
      ...extraProps
    });
  };

  const Widgets = {
    AltDateTimeWidget,
    AltDateWidget,
    CheckboxesWidget,
    CheckboxWidget,
    DateTimeWidget,
    DateWidget,
    PasswordWidget,
    RadioWidget,
    RangeWidget,
    SelectWidget,
    TextareaWidget
  };

  const Theme = {
    templates: Index,
    widgets: Widgets
  };
  const Form = /*#__PURE__*/core.withTheme(Theme);

  exports.Form = Form;
  exports.Templates = Index;
  exports.Theme = Theme;
  exports.Widgets = Widgets;
  exports["default"] = Form;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=antd.umd.development.js.map
