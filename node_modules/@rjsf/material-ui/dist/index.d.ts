/// <reference types="react" />
import * as react from 'react';
import { ComponentType } from 'react';
import { FormProps, ThemeProps } from '@rjsf/core';
import * as _rjsf_utils from '@rjsf/utils';
import { IconButtonProps, FieldErrorProps, FieldHelpProps } from '@rjsf/utils';

declare const MuiForm: ComponentType<FormProps>;

declare function MoveDownButton(props: IconButtonProps): JSX.Element;
declare function MoveUpButton(props: IconButtonProps): JSX.Element;
declare function RemoveButton(props: IconButtonProps): JSX.Element;

/** The `FieldErrorTemplate` component renders the errors local to the particular field
 *
 * @param props - The `FieldErrorProps` for the errors being rendered
 */
declare function FieldErrorTemplate(props: FieldErrorProps): JSX.Element | null;

/** The `FieldHelpTemplate` component renders any help desired for a field
 *
 * @param props - The `FieldHelpProps` to be rendered
 */
declare function FieldHelpTemplate(props: FieldHelpProps): JSX.Element | null;

declare const _default$1: {
    ArrayFieldItemTemplate: (props: _rjsf_utils.ArrayFieldTemplateItemType<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    ArrayFieldTemplate: (props: _rjsf_utils.ArrayFieldTemplateProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    BaseInputTemplate: ({ id, placeholder, required, readonly, disabled, type, label, value, onChange, onBlur, onFocus, autofocus, options, schema, uiSchema, rawErrors, formContext, registry, ...textFieldProps }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    ButtonTemplates: {
        AddButton: react.ComponentType<_rjsf_utils.IconButtonProps<any, _rjsf_utils.RJSFSchema, any>>;
        MoveDownButton: typeof MoveDownButton;
        MoveUpButton: typeof MoveUpButton;
        RemoveButton: typeof RemoveButton;
        SubmitButton: react.ComponentType<_rjsf_utils.SubmitButtonProps<any, _rjsf_utils.RJSFSchema, any>>;
    };
    DescriptionFieldTemplate: ({ id, description }: _rjsf_utils.DescriptionFieldProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element | null;
    ErrorListTemplate: ({ errors }: _rjsf_utils.ErrorListProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    FieldErrorTemplate: typeof FieldErrorTemplate;
    FieldHelpTemplate: typeof FieldHelpTemplate;
    FieldTemplate: ({ id, children, classNames, disabled, displayLabel, hidden, label, onDropPropertyClick, onKeyChange, readonly, required, rawErrors, errors, help, rawDescription, schema, uiSchema, registry, }: _rjsf_utils.FieldTemplateProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    ObjectFieldTemplate: ({ description, title, properties, required, disabled, readonly, uiSchema, idSchema, schema, formData, onAddClick, registry, }: _rjsf_utils.ObjectFieldTemplateProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    TitleFieldTemplate: ({ id, title }: _rjsf_utils.TitleFieldProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    WrapIfAdditionalTemplate: ({ children, classNames, disabled, id, label, onDropPropertyClick, onKeyChange, readonly, required, schema, uiSchema, registry, }: _rjsf_utils.WrapIfAdditionalTemplateProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
};

declare const Theme: ThemeProps;

declare const _default: {
    CheckboxWidget: (props: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    CheckboxesWidget: ({ schema, label, id, disabled, options, value, autofocus, readonly, required, onChange, onBlur, onFocus, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    DateWidget: (props: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    DateTimeWidget: (props: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    RadioWidget: ({ id, schema, options, value, required, disabled, readonly, label, onChange, onBlur, onFocus, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    RangeWidget: ({ value, readonly, disabled, onBlur, onFocus, options, schema, onChange, required, label, id, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    SelectWidget: ({ schema, id, options, label, required, disabled, readonly, value, multiple, autofocus, onChange, onBlur, onFocus, rawErrors, }: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
    TextareaWidget: (props: _rjsf_utils.WidgetProps<any, _rjsf_utils.RJSFSchema, any>) => JSX.Element;
};

export { MuiForm as Form, _default$1 as Templates, Theme, _default as Widgets, MuiForm as default };
