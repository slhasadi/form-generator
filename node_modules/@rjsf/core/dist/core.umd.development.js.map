{"version":3,"file":"core.umd.development.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T[], S, F>, ArrayFieldState<T>> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<\n    T = any,\n    S extends StrictRJSFSchema = RJSFSchema,\n    F extends FormContextType = any\n  >(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        S,\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items)\n      ? (schema.items as S)\n      : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items)\n      ? (schema.items as S[])\n      : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>[\"onBlur\"];\n    onFocus: FieldProps<T[], S, F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], S, F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v: any) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, AnyOfFieldState> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, S, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n    // so that only the root objects themselves are created without adding undefined children properties\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData,\n        \"excludeObjectChildren\"\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport {\n  asNumber,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, ObjectFieldState> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, S, F>(\n      uiSchema\n    );\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] } as S,\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, S, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          S,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, S, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, S, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, S, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends React.Component<FieldProps<T, S, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport {\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import {\n  Field,\n  FormContextType,\n  RegistryFieldsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(\n            ({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n              <ArrayFieldItemTemplate key={key} {...itemProps} />\n            )\n          )}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, S, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nexport default function IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ className, onClick, disabled }: IconButtonProps<T, S, F>) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>[\"ButtonTemplates\"] {\n  return {\n    SubmitButton,\n    AddButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: TitleFieldProps<T, S, F>) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  UnsupportedFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: UnsupportedFieldProps<T, S, F>) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nfunction templates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  WidgetProps<T, S, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" } as S}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ time = true, ...props }: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport {\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, S, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport {\n  dataURItoBlob,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, S, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, value }: WidgetProps<T, S, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport {\n  processSelectValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    PasswordWidget,\n    RadioWidget,\n    UpDownWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    DateWidget,\n    DateTimeWidget,\n    AltDateWidget,\n    AltDateTimeWidget,\n    EmailWidget,\n    URLWidget,\n    TextareaWidget,\n    HiddenWidget,\n    ColorWidget,\n    FileWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n  };\n}\n\nexport default widgets;\n","import {\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, \"schemaUtils\"> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _pick from \"lodash/pick\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | \"top\" | \"bottom\";\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Omit<\n    FormState<T, S, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, S, F>,\n    inputFormData?: T\n  ): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, S, F>,\n    nextState: FormState<T, S, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, S, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[][]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(\n      formData,\n      fields as unknown as string[]\n    );\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T): string[][] => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[][] = [],\n      paths: string[][] = [[]]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(\n            newErrorSchema,\n            extraErrors,\n            \"preventDuplicates\"\n          ) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, S, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry<\n      T,\n      S,\n      F\n    >();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = \"top\",\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === \"top\" && this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n        {showErrorList === \"bottom\" && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  FormProps<T, S, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n> & {\n  ref?: React.Ref<Form<T, S, F>>;\n};\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(themeProps: ThemeProps<T, S, F>) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, S, F>,\n      ref: ForwardedRef<Form<T, S, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","showErrorList","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","forwardRef","directProps"],"mappings":";;;;;;;;;;;;;;;;;;EAmCA;EACA,SAASA,aAAa,GAAA;EACpB,EAAA,OAAOC,aAAM,EAAE,CAAA;EACjB,CAAA;EAEA;;;;EAIG;EACH,SAASC,qBAAqB,CAAIC,QAAa,EAAA;EAC7C,EAAA,OAAO,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAC3B,EAAE,GACFA,QAAQ,CAACG,GAAG,CAAEC,IAAI,IAAI;MACpB,OAAO;QACLC,GAAG,EAAER,aAAa,EAAE;EACpBO,MAAAA,IAAAA;OACD,CAAA;EACH,GAAC,CAAC,CAAA;EACR,CAAA;EAEA;;;;EAIG;EACH,SAASE,oBAAoB,CAC3BC,aAA4D,EAAA;EAE5D,EAAA,IAAIN,KAAK,CAACC,OAAO,CAACK,aAAa,CAAC,EAAE;MAChC,OAAOA,aAAa,CAACJ,GAAG,CAAEK,SAAS,IAAKA,SAAS,CAACJ,IAAI,CAAC,CAAA;EACxD,GAAA;EACD,EAAA,OAAO,EAAE,CAAA;EACX,CAAA;EAEA;;EAEG;EACH,MAAMK,UAIJ,SAAQC,eAAoD,CAAA;EAC5D;;;EAGG;IACHC,WAAA,CAAYC,KAA4B,EAAA;MACtC,KAAK,CAACA,KAAK,CAAC,CAAA;MAAC,IAoGfC,CAAAA,kBAAkB,GAAG,MAAQ;QAC3B,MAAM;UAAEC,MAAM;EAAEC,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;QACvC,MAAM;EAAEI,QAAAA,WAAAA;EAAa,OAAA,GAAGD,QAAQ,CAAA;EAChC,MAAA,IAAIE,UAAU,GAAGH,MAAM,CAACI,KAAU,CAAA;QAClC,IAAIC,kBAAY,CAACL,MAAM,CAAC,IAAIM,0BAAoB,CAACN,MAAM,CAAC,EAAE;UACxDG,UAAU,GAAGH,MAAM,CAACO,eAAoB,CAAA;EACzC,OAAA;EACD;EACA,MAAA,OAAOL,WAAW,CAACM,mBAAmB,CAACL,UAAU,CAAiB,CAAA;OACnE,CAAA;MAAA,IAQDM,CAAAA,UAAU,GAAIC,KAAiB,IAAI;EACjC,MAAA,IAAIA,KAAK,EAAE;UACTA,KAAK,CAACC,cAAc,EAAE,CAAA;EACvB,OAAA;QAED,MAAM;EAAEC,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACd,KAAK,CAAA;QAC/B,MAAM;EAAEL,QAAAA,aAAAA;SAAe,GAAG,IAAI,CAACoB,KAAK,CAAA;EACpC,MAAA,MAAMC,mBAAmB,GAAyB;UAChDvB,GAAG,EAAER,aAAa,EAAE;UACpBO,IAAI,EAAE,IAAI,CAACS,kBAAkB,EAAA;SAC9B,CAAA;EACD,MAAA,MAAMgB,gBAAgB,GAAG,CAAC,GAAGtB,aAAa,EAAEqB,mBAAmB,CAAC,CAAA;QAChE,IAAI,CAACE,QAAQ,CACX;EACEvB,QAAAA,aAAa,EAAEsB,gBAAgB;EAC/BE,QAAAA,oBAAoB,EAAE,IAAA;SACvB,EACD,MAAML,QAAQ,CAACpB,oBAAoB,CAACuB,gBAAgB,CAAC,CAAC,CACvD,CAAA;OACF,CAAA;MAAA,IAQDG,CAAAA,eAAe,GAAIC,KAAa,IAAI;EAClC,MAAA,OAAQT,KAAiB,IAAI;EAC3B,QAAA,IAAIA,KAAK,EAAE;YACTA,KAAK,CAACC,cAAc,EAAE,CAAA;EACvB,SAAA;UACD,MAAM;EAAEC,UAAAA,QAAAA;WAAU,GAAG,IAAI,CAACd,KAAK,CAAA;UAC/B,MAAM;EAAEL,UAAAA,aAAAA;WAAe,GAAG,IAAI,CAACoB,KAAK,CAAA;EACpC,QAAA,MAAMC,mBAAmB,GAAyB;YAChDvB,GAAG,EAAER,aAAa,EAAE;YACpBO,IAAI,EAAE,IAAI,CAACS,kBAAkB,EAAA;WAC9B,CAAA;EACD,QAAA,MAAMgB,gBAAgB,GAAG,CAAC,GAAGtB,aAAa,CAAC,CAAA;UAC3CsB,gBAAgB,CAACK,MAAM,CAACD,KAAK,EAAE,CAAC,EAAEL,mBAAmB,CAAC,CAAA;UAEtD,IAAI,CAACE,QAAQ,CACX;EACEvB,UAAAA,aAAa,EAAEsB,gBAAgB;EAC/BE,UAAAA,oBAAoB,EAAE,IAAA;WACvB,EACD,MAAML,QAAQ,CAACpB,oBAAoB,CAACuB,gBAAgB,CAAC,CAAC,CACvD,CAAA;SACF,CAAA;OACF,CAAA;MAAA,IAQDM,CAAAA,gBAAgB,GAAIF,KAAa,IAAI;EACnC,MAAA,OAAQT,KAAiB,IAAI;EAC3B,QAAA,IAAIA,KAAK,EAAE;YACTA,KAAK,CAACC,cAAc,EAAE,CAAA;EACvB,SAAA;UACD,MAAM;YAAEC,QAAQ;EAAEU,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAACxB,KAAK,CAAA;UAC5C,MAAM;EAAEL,UAAAA,aAAAA;WAAe,GAAG,IAAI,CAACoB,KAAK,CAAA;EACpC;EACA,QAAA,IAAIU,cAA8B,CAAA;EAClC,QAAA,IAAID,WAAW,EAAE;YACfC,cAAc,GAAG,EAAE,CAAA;EACnB,UAAA,KAAK,MAAMC,GAAG,IAAIF,WAAW,EAAE;EAC7B,YAAA,MAAMG,CAAC,GAAGC,QAAQ,CAACF,GAAG,CAAC,CAAA;cACvB,IAAIC,CAAC,GAAGN,KAAK,EAAE;gBACbQ,uBAAG,CAACJ,cAAc,EAAE,CAACE,CAAC,CAAC,EAAEH,WAAW,CAACE,GAAG,CAAC,CAAC,CAAA;EAC3C,aAAA,MAAM,IAAIC,CAAC,GAAGN,KAAK,EAAE;EACpBQ,cAAAA,uBAAG,CAACJ,cAAc,EAAE,CAACE,CAAC,GAAG,CAAC,CAAC,EAAEH,WAAW,CAACE,GAAG,CAAC,CAAC,CAAA;EAC/C,aAAA;EACF,WAAA;EACF,SAAA;EACD,QAAA,MAAMT,gBAAgB,GAAGtB,aAAa,CAACmC,MAAM,CAAC,CAACC,CAAC,EAAEJ,CAAC,KAAKA,CAAC,KAAKN,KAAK,CAAC,CAAA;UACpE,IAAI,CAACH,QAAQ,CACX;EACEvB,UAAAA,aAAa,EAAEsB,gBAAgB;EAC/BE,UAAAA,oBAAoB,EAAE,IAAA;WACvB,EACD,MACEL,QAAQ,CACNpB,oBAAoB,CAACuB,gBAAgB,CAAC,EACtCQ,cAAkC,CACnC,CACJ,CAAA;SACF,CAAA;OACF,CAAA;EAAA,IAAA,IAAA,CASDO,cAAc,GAAG,CAACX,KAAa,EAAEY,QAAgB,KAAI;EACnD,MAAA,OAAQrB,KAA0C,IAAI;EACpD,QAAA,IAAIA,KAAK,EAAE;YACTA,KAAK,CAACC,cAAc,EAAE,CAAA;EACtBD,UAAAA,KAAK,CAACsB,aAAa,CAACC,IAAI,EAAE,CAAA;EAC3B,SAAA;UACD,MAAM;YAAErB,QAAQ;EAAEU,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAACxB,KAAK,CAAA;EAC5C,QAAA,IAAIyB,cAA8B,CAAA;EAClC,QAAA,IAAI,IAAI,CAACzB,KAAK,CAACwB,WAAW,EAAE;YAC1BC,cAAc,GAAG,EAAE,CAAA;EACnB,UAAA,KAAK,MAAMC,GAAG,IAAIF,WAAW,EAAE;EAC7B,YAAA,MAAMG,CAAC,GAAGC,QAAQ,CAACF,GAAG,CAAC,CAAA;cACvB,IAAIC,CAAC,IAAIN,KAAK,EAAE;gBACdQ,uBAAG,CAACJ,cAAc,EAAE,CAACQ,QAAQ,CAAC,EAAET,WAAW,CAACH,KAAK,CAAC,CAAC,CAAA;EACpD,aAAA,MAAM,IAAIM,CAAC,IAAIM,QAAQ,EAAE;gBACxBJ,uBAAG,CAACJ,cAAc,EAAE,CAACJ,KAAK,CAAC,EAAEG,WAAW,CAACS,QAAQ,CAAC,CAAC,CAAA;EACpD,aAAA,MAAM;gBACLJ,uBAAG,CAACJ,cAAc,EAAE,CAACC,GAAG,CAAC,EAAEF,WAAW,CAACG,CAAC,CAAC,CAAC,CAAA;EAC3C,aAAA;EACF,WAAA;EACF,SAAA;UAED,MAAM;EAAEhC,UAAAA,aAAAA;WAAe,GAAG,IAAI,CAACoB,KAAK,CAAA;EACpC,QAAA,SAASqB,YAAY,GAAA;EACnB;EACA,UAAA,MAAMC,iBAAiB,GAAG1C,aAAa,CAAC2C,KAAK,EAAE,CAAA;EAE/C;EACAD,UAAAA,iBAAiB,CAACf,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC,CAAA;YAClCgB,iBAAiB,CAACf,MAAM,CAACW,QAAQ,EAAE,CAAC,EAAEtC,aAAa,CAAC0B,KAAK,CAAC,CAAC,CAAA;EAE3D,UAAA,OAAOgB,iBAAiB,CAAA;EAC1B,SAAA;UACA,MAAMpB,gBAAgB,GAAGmB,YAAY,EAAE,CAAA;UACvC,IAAI,CAAClB,QAAQ,CACX;EACEvB,UAAAA,aAAa,EAAEsB,gBAAAA;WAChB,EACD,MACEH,QAAQ,CACNpB,oBAAoB,CAACuB,gBAAgB,CAAC,EACtCQ,cAAkC,CACnC,CACJ,CAAA;SACF,CAAA;OACF,CAAA;MAAA,IAODc,CAAAA,gBAAgB,GAAIlB,KAAa,IAAI;EACnC,MAAA,OAAO,CAACmB,KAAU,EAAEf,cAA+B,EAAEgB,EAAW,KAAI;UAClE,MAAM;YAAErD,QAAQ;YAAE0B,QAAQ;EAAEU,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAACxB,KAAK,CAAA;UACtD,MAAM0C,SAAS,GAAGrD,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE,CAAA;UACzD,MAAMuD,WAAW,GAAGD,SAAS,CAACnD,GAAG,CAAC,CAACC,IAAO,EAAEmC,CAAS,KAAI;EACvD;EACA;YACA,MAAMiB,SAAS,GAAG,OAAOJ,KAAK,KAAK,WAAW,GAAG,IAAI,GAAGA,KAAK,CAAA;EAC7D,UAAA,OAAOnB,KAAK,KAAKM,CAAC,GAAGiB,SAAS,GAAGpD,IAAI,CAAA;EACvC,SAAC,CAAC,CAAA;EACFsB,QAAAA,QAAQ,CACN6B,WAAW,EACXnB,WAAW,IACTA,WAAW,IAAI;EACb,UAAA,GAAGA,WAAW;EACd,UAAA,CAACH,KAAK,GAAGI,cAAAA;WACV,EACHgB,EAAE,CACH,CAAA;SACF,CAAA;OACF,CAAA;MAAA,IAGDI,CAAAA,cAAc,GAAIL,KAAU,IAAI;QAC9B,MAAM;UAAE1B,QAAQ;EAAEgC,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAAC9C,KAAK,CAAA;QACzCc,QAAQ,CAAC0B,KAAK,EAAEO,SAAS,EAAED,QAAQ,IAAIA,QAAQ,CAACE,GAAG,CAAC,CAAA;OACrD,CAAA;MArSC,MAAM;QAAE5D,QAAQ,EAARA,SAAQ,GAAG,EAAA;EAAI,KAAA,GAAGY,KAAK,CAAA;EAC/B,IAAA,MAAML,cAAa,GAAGR,qBAAqB,CAAIC,SAAQ,CAAC,CAAA;MACxD,IAAI,CAAC2B,KAAK,GAAG;EACXpB,MAAAA,aAAa,EAAbA,cAAa;EACbwB,MAAAA,oBAAoB,EAAE,KAAA;OACvB,CAAA;EACH,GAAA;EAEA;;;;;EAKG;EACH,EAAA,OAAO8B,wBAAwB,CAK7BC,SAA0C,EAC1CC,SAAuC,EAAA;EAEvC;MACA,IAAIA,SAAS,CAAChC,oBAAoB,EAAE;QAClC,OAAO;EACLA,QAAAA,oBAAoB,EAAE,KAAA;SACvB,CAAA;EACF,KAAA;EACD,IAAA,MAAMiC,YAAY,GAAG/D,KAAK,CAACC,OAAO,CAAC4D,SAAS,CAAC9D,QAAQ,CAAC,GAClD8D,SAAS,CAAC9D,QAAQ,GAClB,EAAE,CAAA;EACN,IAAA,MAAMiE,qBAAqB,GAAGF,SAAS,CAACxD,aAAa,IAAI,EAAE,CAAA;EAC3D,IAAA,MAAMsB,gBAAgB,GACpBmC,YAAY,CAACE,MAAM,KAAKD,qBAAqB,CAACC,MAAM,GAChDD,qBAAqB,CAAC9D,GAAG,CAAC,CAACgE,sBAAsB,EAAElC,KAAK,KAAI;QAC1D,OAAO;UACL5B,GAAG,EAAE8D,sBAAsB,CAAC9D,GAAG;UAC/BD,IAAI,EAAE4D,YAAY,CAAC/B,KAAK,CAAA;SACzB,CAAA;EACH,KAAC,CAAC,GACFlC,qBAAqB,CAAIiE,YAAY,CAAC,CAAA;MAC5C,OAAO;EACLzD,MAAAA,aAAa,EAAEsB,gBAAAA;OAChB,CAAA;EACH,GAAA;EAEA;;EAEG;EACH,EAAA,IAAIuC,SAAS,GAAA;MACX,MAAM;EAAEtD,MAAAA,MAAAA;OAAQ,GAAG,IAAI,CAACF,KAAK,CAAA;MAC7B,OAAOyD,uBAAG,CACRvD,MAAM,EACN,CAACwD,eAAS,EAAE,OAAO,CAAC,EACpBD,uBAAG,CAACvD,MAAM,EAAE,CAACwD,eAAS,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAChD,CAAA;EACH,GAAA;EAEA;;;;;EAKG;IACHC,cAAc,CAACtD,UAAa,EAAA;MAC1B,IAAIhB,KAAK,CAACC,OAAO,CAACe,UAAU,CAACuD,IAAI,CAAC,EAAE;EAClC;EACA;QACA,OAAO,CAACvD,UAAU,CAACuD,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAA;EACzC,KAAA;EACD;EACA,IAAA,OAAOxD,UAAU,CAACuD,IAAI,KAAK,MAAM,CAAA;EACnC,GAAA;EAEA;;;;;;EAMG;IACHE,UAAU,CAACC,SAAgB,EAAA;MACzB,MAAM;QAAE7D,MAAM;EAAE8D,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAChE,KAAK,CAAA;MACvC,IAAI;EAAEiE,MAAAA,OAAAA;EAAS,KAAA,GAAGC,kBAAY,CAAYF,QAAQ,CAAC,CAAA;MACnD,IAAIC,OAAO,KAAK,KAAK,EAAE;EACrB;EACA;EACA,MAAA,IAAI/D,MAAM,CAACiE,QAAQ,KAAKpB,SAAS,EAAE;EACjCkB,QAAAA,OAAO,GAAGF,SAAS,CAACT,MAAM,GAAGpD,MAAM,CAACiE,QAAQ,CAAA;EAC7C,OAAA,MAAM;EACLF,QAAAA,OAAO,GAAG,IAAI,CAAA;EACf,OAAA;EACF,KAAA;EACD,IAAA,OAAOA,OAAO,CAAA;EAChB,GAAA;EAEA;;EAEG;;EAqMH;EACG;EACHG,EAAAA,MAAM,GAAA;MACJ,MAAM;QAAElE,MAAM;QAAE8D,QAAQ;QAAElB,QAAQ;EAAE3C,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACH,KAAK,CAAA;MAC3D,MAAM;EAAEI,MAAAA,WAAAA;EAAa,KAAA,GAAGD,QAAQ,CAAA;EAChC,IAAA,IAAI,EAAEuD,eAAS,IAAIxD,MAAM,CAAC,EAAE;EAC1B,MAAA,MAAMmE,SAAS,GAAGH,kBAAY,CAAYF,QAAQ,CAAC,CAAA;QACnD,MAAMM,wBAAwB,GAAGC,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkE,SAAS,CAAC,CAAA;EAElD,MAAA,oBACEG,wCAACF,wBAAwB,EAAA;EACvBpE,QAAAA,MAAM,EAAEA,MAAM;EACd4C,QAAAA,QAAQ,EAAEA,QAAQ;EAClB2B,QAAAA,MAAM,EAAC,0BAA0B;EACjCtE,QAAAA,QAAQ,EAAEA,QAAAA;EACV,OAAA,CAAA,CAAA;EAEL,KAAA;EACD,IAAA,IAAIC,WAAW,CAACsE,aAAa,CAACxE,MAAM,CAAC,EAAE;EACrC;QACA,OAAO,IAAI,CAACyE,iBAAiB,EAAE,CAAA;EAChC,KAAA;EACD,IAAA,IAAIC,oBAAc,CAAYZ,QAAQ,CAAC,EAAE;QACvC,OAAO,IAAI,CAACa,kBAAkB,EAAE,CAAA;EACjC,KAAA;EACD,IAAA,IAAItE,kBAAY,CAACL,MAAM,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC4E,gBAAgB,EAAE,CAAA;EAC/B,KAAA;MACD,IAAI1E,WAAW,CAAC2E,YAAY,CAAC7E,MAAM,EAAE8D,QAAQ,CAAC,EAAE;QAC9C,OAAO,IAAI,CAACgB,WAAW,EAAE,CAAA;EAC1B,KAAA;MACD,OAAO,IAAI,CAACC,iBAAiB,EAAE,CAAA;EACjC,GAAA;EAEA;EACG;EACHA,EAAAA,iBAAiB,GAAA;MACf,MAAM;QACJ/E,MAAM;QACN8D,QAAQ,GAAG,EAAE;QACbxC,WAAW;QACXsB,QAAQ;QACRoC,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChBnF,QAAQ;QACRoF,MAAM;QACNC,OAAO;QACPC,QAAQ;EACRC,MAAAA,WAAW,GAAG,GAAG;EACjBC,MAAAA,SAAAA;OACD,GAAG,IAAI,CAAC3F,KAAK,CAAA;MACd,MAAM;EAAEL,MAAAA,aAAAA;OAAe,GAAG,IAAI,CAACoB,KAAK,CAAA;EACpC,IAAA,MAAM6E,KAAK,GAAG1F,MAAM,CAAC0F,KAAK,KAAK7C,SAAS,GAAGmC,IAAI,GAAGhF,MAAM,CAAC0F,KAAK,CAAA;MAC9D,MAAM;QAAExF,WAAW;EAAEyF,MAAAA,WAAAA;EAAa,KAAA,GAAG1F,QAAQ,CAAA;EAC7C,IAAA,MAAMkE,SAAS,GAAGH,kBAAY,CAAYF,QAAQ,CAAC,CAAA;EACnD,IAAA,MAAM8B,YAAY,GAAMC,4BAAQ,CAAC7F,MAAM,CAACI,KAAK,CAAC,GACzCJ,MAAM,CAACI,KAAW,GAClB,EAAQ,CAAA;EACb,IAAA,MAAM0F,WAAW,GAAM5F,WAAW,CAAC6F,cAAc,CAACH,YAAY,CAAC,CAAA;MAC/D,MAAM1G,QAAQ,GAAGM,oBAAoB,CAAC,IAAI,CAACqB,KAAK,CAACpB,aAAa,CAAC,CAAA;EAC/D,IAAA,MAAMuG,UAAU,GAAuC;EACrDC,MAAAA,MAAM,EAAE,IAAI,CAACrC,UAAU,CAAC1E,QAAQ,CAAC;QACjCkB,KAAK,EAAEX,aAAa,CAACJ,GAAG,CAAC,CAACK,SAAS,EAAEyB,KAAK,KAAI;UAC5C,MAAM;YAAE5B,GAAG;EAAED,UAAAA,IAAAA;EAAM,SAAA,GAAGI,SAAS,CAAA;EAC/B;UACA,MAAMwG,QAAQ,GAAG5G,IAAsB,CAAA;UACvC,MAAMa,UAAU,GAAGD,WAAW,CAAC6F,cAAc,CAACH,YAAY,EAAEM,QAAQ,CAAC,CAAA;UACrE,MAAMC,eAAe,GAAG7E,WAAW,GAC9BA,WAAW,CAACH,KAAK,CAAsB,GACxC0B,SAAS,CAAA;UACb,MAAMuD,YAAY,GAAGxD,QAAQ,CAACE,GAAG,GAAG0C,WAAW,GAAGrE,KAAK,CAAA;EACvD,QAAA,MAAMkF,YAAY,GAAGnG,WAAW,CAACoG,UAAU,CACzCnG,UAAU,EACViG,YAAY,EACZF,QAAQ,EACRX,QAAQ,EACRC,WAAW,CACZ,CAAA;UACD,OAAO,IAAI,CAACe,oBAAoB,CAAC;YAC/BhH,GAAG;YACH4B,KAAK;EACL6D,UAAAA,IAAI,EAAEA,IAAI,OAAOA,IAAI,CAAA,CAAA,EAAI7D,KAAO,CAAA,CAAA;YAChCqF,SAAS,EAAErF,KAAK,GAAG,CAAC;EACpBsF,UAAAA,WAAW,EAAEtF,KAAK,GAAGjC,QAAQ,CAACkE,MAAM,GAAG,CAAC;YACxCjD,UAAU;YACVkG,YAAY;YACZF,eAAe;EACfO,UAAAA,QAAQ,EAAER,QAAQ;YAClBS,YAAY,EAAE7C,QAAQ,CAAC1D,KAAK;EAC5B+E,UAAAA,SAAS,EAAEA,SAAS,IAAIhE,KAAK,KAAK,CAAC;YACnCkE,MAAM;YACNC,OAAO;EACPG,UAAAA,SAAAA;EACD,SAAA,CAAC,CAAA;EACJ,OAAC,CAAC;EACFmB,MAAAA,SAAS,EAAE,CAAA,iCAAA,EAAoCd,WAAW,CAACpC,IAAM,CAAA,CAAA;QACjEuB,QAAQ;QACRrC,QAAQ;QACRkB,QAAQ;QACRrD,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3ByE,QAAQ;QACRE,QAAQ;QACRpF,MAAM;QACN0F,KAAK;QACLC,WAAW;QACXzG,QAAQ;QACRuG,SAAS;EACTxF,MAAAA,QAAAA;OACD,CAAA;MAED,MAAM4G,QAAQ,GAAGxC,iBAAW,CAC1B,oBAAoB,EACpBpE,QAAQ,EACRkE,SAAS,CACV,CAAA;EACD,IAAA,oBAAOG,yBAAC,CAAAwC,aAAA,CAAAD,QAAQ,EAAK;QAAA,GAAAb,UAAAA;QAAc,CAAA;EACrC,GAAA;EAEA;EACG;EACHrB,EAAAA,kBAAkB,GAAA;MAChB,MAAM;QACJ3E,MAAM;QACN4C,QAAQ;QACRkB,QAAQ;EACRmB,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChB2B,SAAS;QACTC,WAAW;QACX3B,MAAM;QACNC,OAAO;QACPpG,QAAQ,EAAEkB,KAAK,GAAG,EAAE;QACpBH,QAAQ;QACRwF,SAAS;EACTT,MAAAA,IAAAA;OACD,GAAG,IAAI,CAAClF,KAAK,CAAA;MACd,MAAM;QAAEmH,OAAO;EAAEtB,MAAAA,WAAAA;EAAa,KAAA,GAAG1F,QAAQ,CAAA;EACzC,IAAA,MAAMyF,KAAK,GAAG1F,MAAM,CAAC0F,KAAK,IAAIV,IAAI,CAAA;MAElC,MAAM;QAAEkC,MAAM;QAAE,GAAGC,OAAAA;EAAS,KAAA,GAAGnD,kBAAY,CAAYF,QAAQ,CAAC,CAAA;MAChE,MAAMsD,MAAM,GAAGC,eAAS,CAAYrH,MAAM,EAAEkH,MAAM,EAAED,OAAO,CAAC,CAAA;EAC5D,IAAA,oBACE3C,yBAAC,CAAAwC,aAAA,CAAAM,MAAM;EACL7E,MAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GAAG;EAC5BwE,MAAAA,QAAQ,EAAA,IAAA;QACR1G,QAAQ,EAAE,IAAI,CAAC+B,cAAc;EAC7B0C,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChB6B,MAAAA,OAAO,EAAEA,OAAO;EAChBnH,MAAAA,MAAM,EAAEA,MAAM;EACd8D,MAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,MAAAA,QAAQ,EAAEA,QAAQ;EAClBqC,MAAAA,KAAK,EAAElC,KAAK;EACZ6E,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,MAAAA,SAAS,EAAEA,SAAS;EACpB3B,MAAAA,QAAQ,EAAEA,QAAQ;EAClBmC,MAAAA,KAAK,EAAE7B,KAAK;EACZsB,MAAAA,WAAW,EAAEA,WAAW;EACxBrB,MAAAA,WAAW,EAAEA,WAAW;EACxBR,MAAAA,SAAS,EAAEA,SAAS;EACpBM,MAAAA,SAAS,EAAEA,SAAAA;EAAS,KAAA,CACpB,CAAA;EAEN,GAAA;EAEA;EACG;EACHhB,EAAAA,iBAAiB,GAAA;MACf,MAAM;QACJzE,MAAM;QACN4C,QAAQ;QACRkB,QAAQ;QACR5E,QAAQ,EAAEkB,KAAK,GAAG,EAAE;EACpB6E,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChB4B,WAAW;QACX3B,MAAM;QACNC,OAAO;QACPrF,QAAQ;QACRwF,SAAS;EACTT,MAAAA,IAAAA;OACD,GAAG,IAAI,CAAClF,KAAK,CAAA;MACd,MAAM;QAAEmH,OAAO;QAAE/G,WAAW;EAAEyF,MAAAA,WAAAA;EAAW,KAAE,GAAG1F,QAAQ,CAAA;MACtD,MAAM6F,WAAW,GAAG5F,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,CAACI,KAAU,EAAEA,KAAK,CAAC,CAAA;EACxE,IAAA,MAAMsF,KAAK,GAAG1F,MAAM,CAAC0F,KAAK,IAAIV,IAAI,CAAA;EAClC,IAAA,MAAMwC,WAAW,GAAGC,iBAAW,CAAC3B,WAAW,CAAC,CAAA;MAC5C,MAAM;EAAEoB,MAAAA,MAAM,GAAG,QAAQ;QAAE,GAAGC,OAAAA;EAAO,KAAE,GAAGnD,kBAAY,CAAYF,QAAQ,CAAC,CAAA;MAC3E,MAAMsD,MAAM,GAAGC,eAAS,CAAYrH,MAAM,EAAEkH,MAAM,EAAED,OAAO,CAAC,CAAA;EAC5D,IAAA,oBACE3C,yBAAC,CAAAwC,aAAA,CAAAM,MAAM;EACL7E,MAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GAAG;EAC5BwE,MAAAA,QAAQ,EAAA,IAAA;QACR1G,QAAQ,EAAE,IAAI,CAAC+B,cAAc;EAC7B0C,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChB6B,MAAAA,OAAO,EAAE;EAAE,QAAA,GAAGA,OAAO;EAAEK,QAAAA,WAAAA;SAAa;EACpCxH,MAAAA,MAAM,EAAEA,MAAM;EACd8D,MAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,MAAAA,QAAQ,EAAEA,QAAQ;EAClBqC,MAAAA,KAAK,EAAElC,KAAK;EACZ6E,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClBE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBmC,MAAAA,KAAK,EAAE7B,KAAK;EACZsB,MAAAA,WAAW,EAAEA,WAAW;EACxBrB,MAAAA,WAAW,EAAEA,WAAW;EACxBR,MAAAA,SAAS,EAAEA,SAAS;EACpBM,MAAAA,SAAS,EAAEA,SAAAA;EAAS,KAAA,CACpB,CAAA;EAEN,GAAA;EAEA;EACG;EACHX,EAAAA,WAAW,GAAA;MACT,MAAM;QACJ9E,MAAM;QACN8D,QAAQ;QACRlB,QAAQ;QACRoC,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChBC,MAAM;QACNC,OAAO;QACPrF,QAAQ;QACRf,QAAQ,EAAEkB,KAAK,GAAG,EAAE;EACpBqF,MAAAA,SAAAA;OACD,GAAG,IAAI,CAAC3F,KAAK,CAAA;EACd,IAAA,MAAM4F,KAAK,GAAG1F,MAAM,CAAC0F,KAAK,IAAIV,IAAI,CAAA;MAClC,MAAM;QAAEiC,OAAO;EAAEtB,MAAAA,WAAAA;EAAa,KAAA,GAAG1F,QAAQ,CAAA;MACzC,MAAM;EAAEiH,MAAAA,MAAM,GAAG,OAAO;QAAE,GAAGC,OAAAA;EAAO,KAAE,GAAGnD,kBAAY,CAAYF,QAAQ,CAAC,CAAA;MAC1E,MAAMsD,MAAM,GAAGC,eAAS,CAAYrH,MAAM,EAAEkH,MAAM,EAAED,OAAO,CAAC,CAAA;EAC5D,IAAA,oBACE3C,yBAAC,CAAAwC,aAAA,CAAAM,MAAM,EACL;EAAAD,MAAAA,OAAO,EAAEA,OAAO;EAChB5E,MAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GAAG;EAC5BwE,MAAAA,QAAQ,EACR,IAAA;QAAA1G,QAAQ,EAAE,IAAI,CAAC+B,cAAc;EAC7B0C,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChBtF,MAAAA,MAAM,EAAEA,MAAM;EACd8D,MAAAA,QAAQ,EAAEA,QAAQ;EAClB4B,MAAAA,KAAK,EAAEA,KAAK;EACZpD,MAAAA,KAAK,EAAElC,KAAK;EACZ6E,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClBE,MAAAA,QAAQ,EAAEA,QAAQ;EAClBnF,MAAAA,QAAQ,EAAEA,QAAQ;EAClB0F,MAAAA,WAAW,EAAEA,WAAW;EACxBR,MAAAA,SAAS,EAAEA,SAAS;EACpBM,MAAAA,SAAS,EAAEA,SAAS;EACpB8B,MAAAA,KAAK,EAAC,EAAA;EAAE,KAAA,CACR,CAAA;EAEN,GAAA;EAEA;EACG;EACH3C,EAAAA,gBAAgB,GAAA;MACd,MAAM;QACJ5E,MAAM;QACN8D,QAAQ,GAAG,EAAE;EACb5E,MAAAA,QAAQ,GAAG,EAAE;QACboC,WAAW;QACXiE,QAAQ;EACRC,MAAAA,WAAW,GAAG,GAAG;QACjB5C,QAAQ;QACRoC,IAAI;EACJC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,SAAS,GAAG,KAAK;EACjBC,MAAAA,QAAQ,GAAG,KAAK;QAChBnF,QAAQ;QACRoF,MAAM;QACNC,OAAO;EACPG,MAAAA,SAAAA;OACD,GAAG,IAAI,CAAC3F,KAAK,CAAA;MACd,MAAM;EAAEL,MAAAA,aAAAA;OAAe,GAAG,IAAI,CAACoB,KAAK,CAAA;MACpC,IAAI;QAAE3B,QAAQ,EAAEkB,KAAK,GAAG,EAAA;OAAI,GAAG,IAAI,CAACN,KAAK,CAAA;EACzC,IAAA,MAAM4F,KAAK,GAAG1F,MAAM,CAAC0F,KAAK,IAAIV,IAAI,CAAA;EAClC,IAAA,MAAMb,SAAS,GAAGH,kBAAY,CAAYF,QAAQ,CAAC,CAAA;MACnD,MAAM;QAAE5D,WAAW;EAAEyF,MAAAA,WAAAA;EAAa,KAAA,GAAG1F,QAAQ,CAAA;EAC7C,IAAA,MAAM2F,YAAY,GAAQC,4BAAQ,CAAC7F,MAAM,CAACI,KAAK,CAAC,GAC3CJ,MAAM,CAACI,KAAa,GACpB,EAAU,CAAA;MACf,MAAMsH,WAAW,GAAG9B,YAAY,CAACvG,GAAG,CAAC,CAACC,IAAO,EAAE6B,KAAa,KAC1DjB,WAAW,CAAC6F,cAAc,CAACzG,IAAI,EAAEJ,QAAQ,CAACiC,KAAK,CAAmB,CAAC,CACpE,CAAA;MACD,MAAMwG,gBAAgB,GAAG9B,4BAAQ,CAAC7F,MAAM,CAACO,eAAe,CAAC,GACrDL,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,CAACO,eAAoB,EAAErB,QAAQ,CAAC,GACjE,IAAI,CAAA;MAER,IAAI,CAACkB,KAAK,IAAIA,KAAK,CAACgD,MAAM,GAAGsE,WAAW,CAACtE,MAAM,EAAE;EAC/C;QACAhD,KAAK,GAAGA,KAAK,IAAI,EAAE,CAAA;EACnBA,MAAAA,KAAK,GAAGA,KAAK,CAACwH,MAAM,CAAC,IAAIzI,KAAK,CAACuI,WAAW,CAACtE,MAAM,GAAGhD,KAAK,CAACgD,MAAM,CAAC,CAAC,CAAA;EACnE,KAAA;EAED;EACA,IAAA,MAAM4C,UAAU,GAAuC;QACrDC,MAAM,EAAE,IAAI,CAACrC,UAAU,CAACxD,KAAK,CAAC,IAAI,CAAC,CAACuH,gBAAgB;EACpDf,MAAAA,SAAS,EAAE,2CAA2C;QACtD3B,QAAQ;QACRrC,QAAQ;QACR1D,QAAQ;QACRkB,KAAK,EAAEX,aAAa,CAACJ,GAAG,CAAC,CAACK,SAAS,EAAEyB,KAAK,KAAI;UAC5C,MAAM;YAAE5B,GAAG;EAAED,UAAAA,IAAAA;EAAM,SAAA,GAAGI,SAAS,CAAA;EAC/B;UACA,MAAMwG,QAAQ,GAAG5G,IAAsB,CAAA;EACvC,QAAA,MAAMuI,UAAU,GAAG1G,KAAK,IAAIuG,WAAW,CAACtE,MAAM,CAAA;UAC9C,MAAMjD,UAAU,GACd0H,UAAU,IAAIhC,4BAAQ,CAAC7F,MAAM,CAACO,eAAe,CAAC,GAC1CL,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,CAACO,eAAoB,EAAE2F,QAAQ,CAAC,GACjEwB,WAAW,CAACvG,KAAK,CAAC,CAAA;UACxB,MAAMiF,YAAY,GAAGxD,QAAQ,CAACE,GAAG,GAAG0C,WAAW,GAAGrE,KAAK,CAAA;EACvD,QAAA,MAAMkF,YAAY,GAAGnG,WAAW,CAACoG,UAAU,CACzCnG,UAAU,EACViG,YAAY,EACZF,QAAQ,EACRX,QAAQ,EACRC,WAAW,CACZ,CAAA;EACD,QAAA,MAAMmB,YAAY,GAAGkB,UAAU,GAC3B/D,QAAQ,CAACvD,eAAe,IAAI,EAAE,GAC9BpB,KAAK,CAACC,OAAO,CAAC0E,QAAQ,CAAC1D,KAAK,CAAC,GAC7B0D,QAAQ,CAAC1D,KAAK,CAACe,KAAK,CAAC,GACrB2C,QAAQ,CAAC1D,KAAK,IAAI,EAAE,CAAA;UACxB,MAAM+F,eAAe,GAAG7E,WAAW,GAC9BA,WAAW,CAACH,KAAK,CAAsB,GACxC0B,SAAS,CAAA;UAEb,OAAO,IAAI,CAAC0D,oBAAoB,CAAC;YAC/BhH,GAAG;YACH4B,KAAK;EACL6D,UAAAA,IAAI,EAAEA,IAAI,OAAOA,IAAI,CAAA,CAAA,EAAI7D,KAAO,CAAA,CAAA;EAChC2G,UAAAA,SAAS,EAAED,UAAU;EACrBrB,UAAAA,SAAS,EAAErF,KAAK,IAAIuG,WAAW,CAACtE,MAAM,GAAG,CAAC;YAC1CqD,WAAW,EAAEoB,UAAU,IAAI1G,KAAK,GAAGf,KAAK,CAACgD,MAAM,GAAG,CAAC;YACnDjD,UAAU;EACVuG,UAAAA,QAAQ,EAAER,QAAQ;YAClBS,YAAY;YACZN,YAAY;YACZF,eAAe;EACfhB,UAAAA,SAAS,EAAEA,SAAS,IAAIhE,KAAK,KAAK,CAAC;YACnCkE,MAAM;YACNC,OAAO;EACPG,UAAAA,SAAAA;EACD,SAAA,CAAC,CAAA;EACJ,OAAC,CAAC;QACFhF,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3ByE,QAAQ;QACRE,QAAQ;QACRnF,QAAQ;QACRD,MAAM;QACN8D,QAAQ;QACR4B,KAAK;QACLC,WAAW;EACXF,MAAAA,SAAAA;OACD,CAAA;MAED,MAAMoB,QAAQ,GAAGxC,iBAAW,CAC1B,oBAAoB,EACpBpE,QAAQ,EACRkE,SAAS,CACV,CAAA;EACD,IAAA,oBAAOG,yBAAC,CAAAwC,aAAA,CAAAD,QAAQ,EAAK;QAAA,GAAAb,UAAAA;QAAc,CAAA;EACrC,GAAA;EAEA;;;;EAIG;IACHO,oBAAoB,CAACzG,KAgBpB,EAAA;MACC,MAAM;QACJP,GAAG;QACH4B,KAAK;QACL6D,IAAI;EACJ8C,MAAAA,SAAS,GAAG,IAAI;EAChBtB,MAAAA,SAAS,GAAG,IAAI;EAChBC,MAAAA,WAAW,GAAG,IAAI;QAClBtG,UAAU;QACVuG,QAAQ;QACRC,YAAY;QACZN,YAAY;QACZF,eAAe;QACfhB,SAAS;QACTE,MAAM;QACNC,OAAO;EACPG,MAAAA,SAAAA;EACD,KAAA,GAAG3F,KAAK,CAAA;MACT,MAAM;QACJmF,QAAQ;QACR8B,SAAS;QACTxB,QAAQ;QACRC,WAAW;QACXN,QAAQ;QACRpB,QAAQ;QACR7D,QAAQ;EACR0F,MAAAA,WAAAA;OACD,GAAG,IAAI,CAAC7F,KAAK,CAAA;MACd,MAAM;EACJiI,MAAAA,MAAM,EAAE;UAAEC,gBAAgB;EAAEC,QAAAA,WAAAA;EAAa,OAAA;EAAA,KAC1C,GAAGhI,QAAQ,CAAA;EACZ,IAAA,MAAMiI,eAAe,GAAGF,gBAAgB,IAAIC,WAAW,CAAA;MACvD,MAAM;EAAEE,MAAAA,SAAS,GAAG,IAAI;EAAEC,MAAAA,SAAS,GAAG,IAAA;EAAI,KAAE,GAAGpE,kBAAY,CACzDF,QAAQ,CACT,CAAA;EACD,IAAA,MAAMuE,GAAG,GAA+B;QACtCC,MAAM,EAAEH,SAAS,IAAI3B,SAAS;QAC9B+B,QAAQ,EAAEJ,SAAS,IAAI1B,WAAW;QAClC+B,MAAM,EAAEJ,SAAS,IAAIN,SAAS;EAC9BW,MAAAA,OAAO,EAAE,KAAA;OACV,CAAA;EACDJ,IAAAA,GAAG,CAACI,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACN,GAAG,CAAC,CAACO,IAAI,CAAErJ,GAAqB,IAAK8I,GAAG,CAAC9I,GAAG,CAAC,CAAC,CAAA;MAExE,OAAO;EACLsJ,MAAAA,QAAQ,eACNvE,yBAAC,CAAAwC,aAAA,CAAAoB,eAAe;EACdlD,QAAAA,IAAI,EAAEA,IAAI;EACV7D,QAAAA,KAAK,EAAEA,KAAK;EACZnB,QAAAA,MAAM,EAAEG,UAAU;EAClB2D,QAAAA,QAAQ,EAAE6C,YAAY;EACtBzH,QAAAA,QAAQ,EAAEwH,QAAQ;EAClBf,QAAAA,WAAW,EAAEA,WAAW;EACxBrE,QAAAA,WAAW,EAAE6E,eAAe;EAC5BZ,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,WAAW,EAAEA,WAAW;EACxB5C,QAAAA,QAAQ,EAAEyD,YAAY;EACtBjB,QAAAA,QAAQ,EAAE,IAAI,CAAC3B,cAAc,CAACtD,UAAU,CAAC;EACzCS,QAAAA,QAAQ,EAAE,IAAI,CAACyB,gBAAgB,CAAClB,KAAK,CAAC;EACtCkE,QAAAA,MAAM,EAAEA,MAAM;EACdC,QAAAA,OAAO,EAAEA,OAAO;EAChBrF,QAAAA,QAAQ,EAAEA,QAAQ;EAClBgF,QAAAA,QAAQ,EAAEA,QAAQ;EAClBC,QAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,QAAAA,SAAS,EAAEA,SAAS;EACpB5B,QAAAA,SAAS,EAAEA,SAAS;EACpBM,QAAAA,SAAS,EAAEA,SAAAA;EAAS,OAAA,CAEvB;EACDmB,MAAAA,SAAS,EAAE,YAAY;QACvB3B,QAAQ;QACR6D,UAAU,EAAET,GAAG,CAACI,OAAO;QACvBM,SAAS,EAAEV,GAAG,CAACC,MAAM;QACrBU,WAAW,EAAEX,GAAG,CAACE,QAAQ;QACzBU,SAAS,EAAEZ,GAAG,CAACG,MAAM;QACrBrH,KAAK;QACL5B,GAAG;QACH2B,eAAe,EAAE,IAAI,CAACA,eAAe;QACrCG,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;QACvCS,cAAc,EAAE,IAAI,CAACA,cAAc;QACnCoD,QAAQ;QACRjF,QAAQ;EACR6D,MAAAA,QAAQ,EAAE6C,YAAAA;OACX,CAAA;EACH,GAAA;EACD;;ECt1BD;;;;EAIG;EACH,SAASuC,YAAY,CAInBpJ,KAA0B,EAAA;IAC1B,MAAM;MACJE,MAAM;MACNgF,IAAI;MACJlB,QAAQ;MACRlB,QAAQ;MACR1D,QAAQ;MACRe,QAAQ;MACRmF,QAAQ;MACRH,QAAQ;MACRC,QAAQ;MACRC,SAAS;MACTvE,QAAQ;MACR0E,OAAO;MACPD,MAAM;EACNI,IAAAA,SAAAA;EACD,GAAA,GAAG3F,KAAK,CAAA;IACT,MAAM;EAAE4F,IAAAA,KAAAA;EAAO,GAAA,GAAG1F,MAAM,CAAA;IACxB,MAAM;MAAEiH,OAAO;EAAEtB,IAAAA,WAAAA;EAAa,GAAA,GAAG1F,QAAQ,CAAA;IACzC,MAAM;EAAEiH,IAAAA,MAAM,GAAG,UAAU;MAAE,GAAGC,OAAAA;EAAO,GAAE,GAAGnD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IAC3E,MAAMsD,MAAM,GAAGC,eAAS,CAACrH,MAAM,EAAEkH,MAAM,EAAED,OAAO,CAAC,CAAA;EAEjD,EAAA,IAAIO,WAA6C,CAAA;IAEjD,IAAIrI,KAAK,CAACC,OAAO,CAACY,MAAM,CAACmJ,KAAK,CAAC,EAAE;MAC/B3B,WAAW,GAAGC,iBAAW,CAAI;QAC3B0B,KAAK,EAAEnJ,MAAM,CAACmJ,KAAK,CAChB9J,GAAG,CAAE+J,MAAM,IAAI;EACd,QAAA,IAAIvD,4BAAQ,CAACuD,MAAM,CAAC,EAAE;YACpB,OAAO;EACL,YAAA,GAAGA,MAAM;EACT1D,YAAAA,KAAK,EAAE0D,MAAM,CAAC1D,KAAK,KAAK0D,MAAM,CAACC,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI,CAAA;aAC7D,CAAA;EACF,SAAA;EACD,QAAA,OAAOxG,SAAS,CAAA;SACjB,CAAC,CACDjB,MAAM,CAAE0H,CAAM,IAAKA,CAAC,CAAQ;EAChB,KAAA,CAAC,CAAA;EACnB,GAAA,MAAM;EACL;MACA,MAAMC,mBAAmB,GAAGvJ,MAAsC,CAAA;MAClE,MAAMwJ,KAAK,GAAGxJ,MAAM,CAACyJ,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;MAC1C,IACE,CAACF,mBAAmB,CAACG,SAAS,IAC9BF,KAAK,CAACpG,MAAM,KAAK,CAAC,IAClBoG,KAAK,CAACG,KAAK,CAAEC,CAAM,IAAK,OAAOA,CAAC,KAAK,SAAS,CAAC,EAC/C;EACApC,MAAAA,WAAW,GAAG,CACZ;EACElF,QAAAA,KAAK,EAAEkH,KAAK,CAAC,CAAC,CAAC;EACfjC,QAAAA,KAAK,EAAEiC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAA;EAC3B,OAAA,EACD;EACElH,QAAAA,KAAK,EAAEkH,KAAK,CAAC,CAAC,CAAC;EACfjC,QAAAA,KAAK,EAAEiC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAA;EAC3B,OAAA,CACF,CAAA;EACF,KAAA,MAAM;QACLhC,WAAW,GAAGC,iBAAW,CAAI;EAC3BgC,QAAAA,IAAI,EAAED,KAAK;EACX;UACAE,SAAS,EAAEH,mBAAmB,CAACG,SAAAA;EAChB,OAAA,CAAC,CAAA;EACnB,KAAA;EACF,GAAA;EAED,EAAA,oBACEpF,yBAAC,CAAAwC,aAAA,CAAAM,MAAM;EACLD,IAAAA,OAAO,EAAE;EAAE,MAAA,GAAGA,OAAO;EAAEK,MAAAA,WAAAA;OAAa;EACpCxH,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClBvB,IAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GAAG;EAC5BlC,IAAAA,QAAQ,EAAEA,QAAQ;EAClB0E,IAAAA,OAAO,EAAEA,OAAO;EAChBD,IAAAA,MAAM,EAAEA,MAAM;EACdkC,IAAAA,KAAK,EAAE7B,KAAK,KAAK7C,SAAS,GAAGmC,IAAI,GAAGU,KAAK;EACzCpD,IAAAA,KAAK,EAAEpD,QAAQ;EACfkG,IAAAA,QAAQ,EAAEA,QAAQ;EAClBH,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBjF,IAAAA,QAAQ,EAAEA,QAAQ;EAClB0F,IAAAA,WAAW,EAAEA,WAAW;EACxBR,IAAAA,SAAS,EAAEA,SAAS;EACpBM,IAAAA,SAAS,EAAEA,SAAAA;EAAS,GAAA,CACpB,CAAA;EAEN;;ECzFA;;;;EAIG;EACH,MAAMoE,UAIJ,SAAQjK,eAA+C,CAAA;EACvD;;;EAGG;IACHC,WAAA,CAAYC,KAA0B,EAAA;MACpC,KAAK,CAACA,KAAK,CAAC,CAAA;MAAC,IAiEfgK,CAAAA,cAAc,GAAIV,MAAW,IAAI;EAC/B,MAAA,MAAMW,cAAc,GAAGrI,QAAQ,CAAC0H,MAAM,EAAE,EAAE,CAAC,CAAA;QAC3C,MAAM;UAAElK,QAAQ;UAAE0B,QAAQ;UAAEuG,OAAO;EAAElH,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;QAC5D,MAAM;EAAEI,QAAAA,WAAAA;EAAa,OAAA,GAAGD,QAAQ,CAAA;EAChC,MAAA,MAAM+J,SAAS,GAAG9J,WAAW,CAAC6F,cAAc,CAC1CoB,OAAO,CAAC4C,cAAc,CAAC,EACvB7K,QAAQ,CACT,CAAA;EAED;EACA;QACA,IAAIuD,WAAW,GAAkBI,SAAS,CAAA;EAC1C,MAAA,IACEoH,eAAS,CAAC/K,QAAQ,CAAC,KAAK,QAAQ,KAC/B8K,SAAS,CAACtG,IAAI,KAAK,QAAQ,IAAIsG,SAAS,CAACE,UAAU,CAAC,EACrD;UACAzH,WAAW,GAAGiG,MAAM,CAACyB,MAAM,CAAC,EAAE,EAAEjL,QAAQ,CAAC,CAAA;EAEzC,QAAA,MAAMkL,gBAAgB,GAAGjD,OAAO,CAAC/E,KAAK,EAAE,CAAA;EACxCgI,QAAAA,gBAAgB,CAAChJ,MAAM,CAAC2I,cAAc,EAAE,CAAC,CAAC,CAAA;EAE1C;EACA,QAAA,KAAK,MAAMX,MAAM,IAAIgB,gBAAgB,EAAE;YACrC,IAAIhB,MAAM,CAACc,UAAU,EAAE;EACrB,YAAA,KAAK,MAAM3K,GAAG,IAAI6J,MAAM,CAACc,UAAU,EAAE;gBACnC,IAAI3K,GAAG,IAAIkD,WAAW,EAAE;EACtB4H,gBAAAA,yBAAK,CAAC5H,WAAW,EAAElD,GAAG,CAAC,CAAA;EACxB,eAAA;EACF,aAAA;EACF,WAAA;EACF,SAAA;EACF,OAAA;EACD;EACA;QACAqB,QAAQ,CACNV,WAAW,CAACM,mBAAmB,CAC7B2G,OAAO,CAAC4C,cAAc,CAAC,EACvBtH,WAAW,EACX,uBAAuB,CACnB,EACNI,SAAS,EACT,IAAI,CAACyH,UAAU,EAAE,CAClB,CAAA;QAED,IAAI,CAACtJ,QAAQ,CAAC;EACZ+I,QAAAA,cAAc,EAAErI,QAAQ,CAAC0H,MAAM,EAAE,EAAE,CAAA;EACpC,OAAA,CAAC,CAAA;OACH,CAAA;MA9GC,MAAM;EAAElK,MAAAA,QAAQ,EAARA,SAAQ;EAAEiI,MAAAA,OAAO,EAAPA,QAAAA;OAAS,GAAG,IAAI,CAACrH,KAAK,CAAA;MAExC,IAAI,CAACe,KAAK,GAAG;QACXkJ,cAAc,EAAE,IAAI,CAACQ,iBAAiB,CAAC,CAAC,EAAErL,SAAQ,EAAEiI,QAAO,CAAA;OAC5D,CAAA;EACH,GAAA;EAEA;;;;;EAKG;EACHqD,EAAAA,kBAAkB,CAChBC,SAAwC,EACxCxH,SAAoC,EAAA;MAEpC,MAAM;QAAE/D,QAAQ;QAAEiI,OAAO;EAAEvE,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAC9C,KAAK,CAAA;MAClD,MAAM;EAAEiK,MAAAA,cAAAA;OAAgB,GAAG,IAAI,CAAClJ,KAAK,CAAA;EACrC,IAAA,IACE,CAAC6J,gBAAU,CAACxL,QAAQ,EAAEuL,SAAS,CAACvL,QAAQ,CAAC,IACzC0D,QAAQ,CAACE,GAAG,KAAK2H,SAAS,CAAC7H,QAAQ,CAACE,GAAG,EACvC;QACA,MAAM6H,cAAc,GAAG,IAAI,CAACJ,iBAAiB,CAC3CR,cAAc,EACd7K,QAAQ,EACRiI,OAAO,CACR,CAAA;EAED,MAAA,IAAI,CAAClE,SAAS,IAAI0H,cAAc,KAAKZ,cAAc,EAAE;EACnD,QAAA,OAAA;EACD,OAAA;QAED,IAAI,CAAC/I,QAAQ,CAAC;EACZ+I,QAAAA,cAAc,EAAEY,cAAAA;EACjB,OAAA,CAAC,CAAA;EACH,KAAA;EACH,GAAA;EAEA;;;;;EAKG;EACHJ,EAAAA,iBAAiB,CAACR,cAAsB,EAAE7K,QAAW,EAAEiI,OAAY,EAAA;MACjE,MAAM;EAAEjH,MAAAA,WAAAA;EAAa,KAAA,GAAG,IAAI,CAACJ,KAAK,CAACG,QAAQ,CAAA;MAE3C,MAAMmJ,MAAM,GAAGlJ,WAAW,CAACqK,iBAAiB,CAACrL,QAAQ,EAAEiI,OAAO,CAAC,CAAA;MAC/D,IAAIiC,MAAM,KAAK,CAAC,EAAE;EAChB,MAAA,OAAOA,MAAM,CAAA;EACd,KAAA;EACD;EACA;MACA,OAAOW,cAAc,IAAI,CAAC,CAAA;EAC5B,GAAA;EAEA;;;;;EAKG;;EAkDHO,EAAAA,UAAU,GAAA;MACR,MAAM;QAAE1H,QAAQ;EAAE5C,MAAAA,MAAAA;OAAQ,GAAG,IAAI,CAACF,KAAK,CAAA;EACvC,IAAA,QAAU8C,EAAAA,QAAQ,CAACE,GAAG,CACpB9C,EAAAA,MAAM,CAACmJ,KAAK,GAAG,gBAAgB,GAAG,iBAClC,CAAA,CAAA;EACJ,GAAA;EAEA;EACG;EACHjF,EAAAA,MAAM,GAAA;MACJ,MAAM;QACJc,IAAI;QACJ4F,QAAQ;EACR3F,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;EAChB6B,MAAAA,SAAS,GAAG,KAAK;QACjBzF,WAAW,GAAG,EAAE;QAChBpC,QAAQ;QACRyG,WAAW;QACXJ,QAAQ;QACRC,WAAW;QACX5C,QAAQ;QACRyC,MAAM;QACNzE,QAAQ;QACR0E,OAAO;QACP6B,OAAO;QACPlH,QAAQ;EACR6D,MAAAA,QAAAA;OACD,GAAG,IAAI,CAAChE,KAAK,CAAA;MAEd,MAAM;QAAEmH,OAAO;EAAEc,MAAAA,MAAAA;EAAQ,KAAA,GAAG9H,QAAQ,CAAA;MACpC,MAAM;EAAEgI,MAAAA,WAAW,EAAE4C,YAAAA;EAAc,KAAA,GAAG9C,MAAM,CAAA;MAC5C,MAAM;EAAEgC,MAAAA,cAAAA;OAAgB,GAAG,IAAI,CAAClJ,KAAK,CAAA;MACrC,MAAM;EAAEqG,MAAAA,MAAM,GAAG,QAAQ;QAAE,GAAG/C,SAAAA;EAAS,KAAE,GAAGH,kBAAY,CAAUF,QAAQ,CAAC,CAAA;MAC3E,MAAMsD,MAAM,GAAGC,eAAS,CAAU;EAAE3D,MAAAA,IAAI,EAAE,QAAA;EAAQ,KAAE,EAAEwD,MAAM,EAAED,OAAO,CAAC,CAAA;EAEtE,IAAA,MAAMmC,MAAM,GAAGjC,OAAO,CAAC4C,cAAc,CAAC,IAAI,IAAI,CAAA;EAC9C,IAAA,IAAIe,YAAY,CAAA;EAEhB,IAAA,IAAI1B,MAAM,EAAE;EACV;EACA;EACA0B,MAAAA,YAAY,GAAG1B,MAAM,CAAC1F,IAAI,GACtB0F,MAAM,GACNV,MAAM,CAACyB,MAAM,CAAC,EAAE,EAAEf,MAAM,EAAE;EAAE1F,QAAAA,IAAI,EAAEkH,QAAAA;EAAQ,OAAE,CAAC,CAAA;EAClD,KAAA;MAED,MAAMpD,WAAW,GAAGL,OAAO,CAAC9H,GAAG,CAAC,CAAC+J,MAAkB,EAAEjI,KAAa,MAAM;QACtEoG,KAAK,EAAE6B,MAAM,CAAC1D,KAAK,IAAc,CAAAvE,OAAAA,EAAAA,KAAK,GAAG,CAAG,CAAA,CAAA;EAC5CmB,MAAAA,KAAK,EAAEnB,KAAAA;EACR,KAAA,CAAC,CAAC,CAAA;EAEH,IAAA,oBACEmD,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,MAAAA,SAAS,EAAC,gCAAA;EAAgC,KAAA,eAC7CtC,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,MAAAA,SAAS,EAAC,YAAA;EAAY,KAAA,eACzBtC,yBAAC,CAAAwC,aAAA,CAAAM,MAAM,EACL;EAAA7E,MAAAA,EAAE,EAAE,IAAI,CAAC+H,UAAU,EAAE;EACrBtK,MAAAA,MAAM,EAAE;EAAE0D,QAAAA,IAAI,EAAE,QAAQ;EAAEqH,QAAAA,OAAO,EAAE,CAAA;SAAQ;QAC3CnK,QAAQ,EAAE,IAAI,CAACkJ,cAAc;EAC7BzE,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChBhD,MAAAA,KAAK,EAAEyH,cAAc;EACrB5C,MAAAA,OAAO,EAAE;EAAEK,QAAAA,WAAAA;SAAa;EACxBvH,MAAAA,QAAQ,EAAEA,QAAQ;EAClB0F,MAAAA,WAAW,EAAEA,WAAW;EAAA,MAAA,GACpBxB,SAAS;EACboD,MAAAA,KAAK,EAAC,EAAA;EAAE,KAAA,CACR,CACE,EACL6B,MAAM,KAAK,IAAI,iBACd9E,wCAACuG,YAAY,EAAA;EACX7F,MAAAA,IAAI,EAAEA,IAAI;EACVhF,MAAAA,MAAM,EAAE8K,YAAY;EACpBhH,MAAAA,QAAQ,EAAEA,QAAQ;EAClBxC,MAAAA,WAAW,EAAEA,WAAW;EACxBsB,MAAAA,QAAQ,EAAEA,QAAQ;EAClB2C,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,WAAW,EAAEA,WAAW;EACxBtG,MAAAA,QAAQ,EAAEA,QAAQ;EAClByG,MAAAA,WAAW,EAAEA,WAAW;EACxB/E,MAAAA,QAAQ,EAAEA,QAAQ;EAClByE,MAAAA,MAAM,EAAEA,MAAM;EACdC,MAAAA,OAAO,EAAEA,OAAO;EAChBrF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBgF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,MAAAA,SAAS,EAAEA,SAAAA;EAAS,KAAA,CAEvB,CACG,CAAA;EAEV,GAAA;EACD;;ECvOD;EACA;EACA;EACA;EACA,MAAMiE,6BAA6B,GAAG,eAAe,CAAA;EAErD;EACA;EACA;EACA;EACA,MAAMC,mBAAmB,GAAG,SAAS,CAAA;EAErC;;;;;;;;;;;;;;;;EAgBG;EACH,SAASC,WAAW,CAIlBpL,KAA0B,EAAA;IAC1B,MAAM;MAAEG,QAAQ;MAAEW,QAAQ;MAAE1B,QAAQ;EAAEoD,IAAAA,KAAK,EAAE6I,YAAAA;EAAc,GAAA,GAAGrL,KAAK,CAAA;IACnE,MAAM,CAACsL,SAAS,EAAEC,YAAY,CAAC,GAAGC,cAAQ,CAACH,YAAY,CAAC,CAAA;IACxD,MAAM;EAAEI,IAAAA,WAAAA;KAAa,GAAGtL,QAAQ,CAAC8H,MAAM,CAAA;IAEvC,IAAIzF,KAAK,GAAGpD,QAAQ,CAAA;EAEpB;;;EAGG;EACH,EAAA,MAAMsM,YAAY,GAAGC,iBAAW,CAC7BnJ,KAAmC,IAAI;EACtC;MACA+I,YAAY,CAAC/I,KAAK,CAAC,CAAA;EAEnB;EACA;MACA,IAAI,CAAA,EAAGA,KAAK,CAAA,CAAE,CAACoJ,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAChCpJ,KAAK,GAAG,CAAIA,CAAAA,EAAAA,KAAK,CAAE,CAAA,CAAA;EACpB,KAAA;EAED;EACA;EACA;EACA,IAAA,MAAMqJ,SAAS,GACb,OAAOrJ,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACsJ,KAAK,CAACZ,6BAA6B,CAAC,GACnEa,cAAQ,CAACvJ,KAAK,CAACwJ,OAAO,CAACb,mBAAmB,EAAE,EAAE,CAAC,CAAC,GAChDY,cAAQ,CAACvJ,KAAK,CAAC,CAAA;MAErB1B,QAAQ,CAAC+K,SAAyB,CAAC,CAAA;EACrC,GAAC,EACD,CAAC/K,QAAQ,CAAC,CACX,CAAA;IAED,IAAI,OAAOwK,SAAS,KAAK,QAAQ,IAAI,OAAO9I,KAAK,KAAK,QAAQ,EAAE;EAC9D;EACA;EACA;EACA,IAAA,MAAMyJ,EAAE,GAAG,IAAIC,MAAM,CAAC,GAAG1J,KAAO,CAAA,CAAA,CAACwJ,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,CAAA;EAEjE;EACA;EACA,IAAA,IAAIV,SAAS,CAACQ,KAAK,CAACG,EAAE,CAAC,EAAE;EACvBzJ,MAAAA,KAAK,GAAG8I,SAAyB,CAAA;EAClC,KAAA;EACF,GAAA;EAED,EAAA,oBAAO9G,yBAAC,CAAAwC,aAAA,CAAAyE,WAAW,EAAK;EAAA,IAAA,GAAAzL,KAAK;EAAEZ,IAAAA,QAAQ,EAAEoD,KAAK;EAAE1B,IAAAA,QAAQ,EAAE4K,YAAAA;MAAgB,CAAA;EAC5E;;EC7DA;;;;EAIG;EACH,MAAMS,WAIJ,SAAQrM,eAAgD,CAAA;EAAA,EAAA,WAAA,GAAA;EAAA,IAAA,IAAA,KAAA,CAAA;EAAA,IAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;EAAA,IAAA,KAAA,GAAA,IAAA,CAAA;EAAA,IAAA,IAAA,CAExDiB,KAAK,GAAG;EACNqL,MAAAA,sBAAsB,EAAE,KAAK;EAC7BC,MAAAA,oBAAoB,EAAE,EAAE;OACzB,CAAA;EAAA,IAAA,IAAA,CAsBDC,gBAAgB,GAAG,UAACpH,IAAY,EAAEqH,2BAA2B,EAAY;EAAA,MAAA,IAAvCA,2BAA2B,KAAA,KAAA,CAAA,EAAA;EAA3BA,QAAAA,2BAA2B,GAAG,KAAK,CAAA;EAAA,OAAA;EACnE,MAAA,OAAO,CAAC/J,KAAQ,EAAEf,cAA+B,EAAEgB,EAAW,KAAI;UAChE,MAAM;YAAErD,QAAQ;YAAE0B,QAAQ;EAAEU,UAAAA,WAAAA;WAAa,GAAG,KAAI,CAACxB,KAAK,CAAA;EACtD,QAAA,IAAIwC,KAAK,KAAKO,SAAS,IAAIwJ,2BAA2B,EAAE;EACtD;EACA;EACA;EACA;EACA;EACA;EACA;EACA/J,UAAAA,KAAK,GAAG,EAAkB,CAAA;EAC3B,SAAA;EACD,QAAA,MAAMG,WAAW,GAAG;EAAE,UAAA,GAAGvD,QAAQ;EAAE,UAAA,CAAC8F,IAAI,GAAG1C,KAAAA;WAAO,CAAA;EAClD1B,QAAAA,QAAQ,CACN6B,WAAW,EACXnB,WAAW,IACTA,WAAW,IAAI;EACb,UAAA,GAAGA,WAAW;EACd,UAAA,CAAC0D,IAAI,GAAGzD,cAAAA;WACT,EACHgB,EAAE,CACH,CAAA;SACF,CAAA;OACF,CAAA;MAAA,IAQD+J,CAAAA,mBAAmB,GAAI/M,GAAW,IAAI;EACpC,MAAA,OAAQmB,KAAgB,IAAI;UAC1BA,KAAK,CAACC,cAAc,EAAE,CAAA;UACtB,MAAM;YAAEC,QAAQ;EAAE1B,UAAAA,QAAAA;WAAU,GAAG,IAAI,CAACY,KAAK,CAAA;EACzC,QAAA,MAAMyM,cAAc,GAAG;YAAE,GAAGrN,QAAAA;WAAU,CAAA;EACtCmL,QAAAA,yBAAK,CAACkC,cAAc,EAAEhN,GAAG,CAAC,CAAA;UAC1BqB,QAAQ,CAAC2L,cAAc,CAAC,CAAA;SACzB,CAAA;OACF,CAAA;EAAA,IAAA,IAAA,CASDC,eAAe,GAAG,CAACC,YAAoB,EAAEvN,QAAW,KAAI;QACtD,MAAM;EAAE4E,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAAChE,KAAK,CAAA;QAC/B,MAAM;EAAE4M,QAAAA,2BAA2B,GAAG,GAAA;EAAG,OAAE,GAAG1I,kBAAY,CACxDF,QAAQ,CACT,CAAA;QAED,IAAI3C,KAAK,GAAG,CAAC,CAAA;QACb,IAAIwL,MAAM,GAAGF,YAAY,CAAA;QACzB,OAAOE,MAAM,IAAIzN,QAAQ,EAAE;UACzByN,MAAM,MAAMF,YAAY,CAAA,EAAGC,2BAA8B,CAAA,EAAA,EAAEvL,KAAK,CAAE,CAAA,CAAA;EACnE,OAAA;EACD,MAAA,OAAOwL,MAAM,CAAA;OACd,CAAA;MAAA,IAQDC,CAAAA,WAAW,GAAIC,QAAa,IAAI;EAC9B,MAAA,OAAO,CAACvK,KAAU,EAAEf,cAA8B,KAAI;UACpD,IAAIsL,QAAQ,KAAKvK,KAAK,EAAE;EACtB,UAAA,OAAA;EACD,SAAA;UACD,MAAM;YAAEpD,QAAQ;YAAE0B,QAAQ;EAAEU,UAAAA,WAAAA;WAAa,GAAG,IAAI,CAACxB,KAAK,CAAA;UAEtDwC,KAAK,GAAG,IAAI,CAACkK,eAAe,CAAClK,KAAK,EAAEpD,QAAQ,CAAC,CAAA;EAC7C,QAAA,MAAMuD,WAAW,GAAsB;YACrC,GAAIvD,QAAAA;WACL,CAAA;EACD,QAAA,MAAM4N,OAAO,GAAsB;EAAE,UAAA,CAACD,QAAQ,GAAGvK,KAAAA;WAAO,CAAA;EACxD,QAAA,MAAMyK,SAAS,GAAGrE,MAAM,CAACC,IAAI,CAAClG,WAAW,CAAC,CAACpD,GAAG,CAAEE,GAAG,IAAI;EACrD,UAAA,MAAMoN,MAAM,GAAGG,OAAO,CAACvN,GAAG,CAAC,IAAIA,GAAG,CAAA;YAClC,OAAO;EAAE,YAAA,CAACoN,MAAM,GAAGlK,WAAW,CAAClD,GAAG,CAAA;aAAG,CAAA;EACvC,SAAC,CAAC,CAAA;UACF,MAAMyN,UAAU,GAAGtE,MAAM,CAACyB,MAAM,CAAC,EAAE,EAAE,GAAG4C,SAAS,CAAC,CAAA;UAElD,IAAI,CAAC/L,QAAQ,CAAC;EAAEkL,UAAAA,sBAAsB,EAAE,IAAA;EAAM,SAAA,CAAC,CAAA;EAE/CtL,QAAAA,QAAQ,CACNoM,UAAU,EACV1L,WAAW,IACTA,WAAW,IAAI;EACb,UAAA,GAAGA,WAAW;EACd,UAAA,CAACgB,KAAK,GAAGf,cAAAA;EACV,SAAA,CACJ,CAAA;SACF,CAAA;OACF,CAAA;EAAA,IAAA,IAAA,CA+BD0L,cAAc,GAAIjN,MAAS,IAAK,MAAK;EACnC,MAAA,IAAI,CAACA,MAAM,CAACmM,oBAAoB,EAAE;EAChC,QAAA,OAAA;EACD,OAAA;QACD,MAAM;UAAEjN,QAAQ;UAAE0B,QAAQ;EAAEX,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACH,KAAK,CAAA;EACnD,MAAA,MAAM2C,WAAW,GAAG;UAAE,GAAGvD,QAAAA;SAAU,CAAA;QAEnC,IAAIwE,IAAI,GAAuBb,SAAS,CAAA;EACxC,MAAA,IAAIgD,4BAAQ,CAAC7F,MAAM,CAACmM,oBAAoB,CAAC,EAAE;EACzCzI,QAAAA,IAAI,GAAG1D,MAAM,CAACmM,oBAAoB,CAACzI,IAAI,CAAA;EACvC,QAAA,IAAIwJ,aAAO,IAAIlN,MAAM,CAACmM,oBAAoB,EAAE;YAC1C,MAAM;EAAEjM,YAAAA,WAAAA;EAAa,WAAA,GAAGD,QAAQ,CAAA;EAChC,UAAA,MAAMkN,SAAS,GAAGjN,WAAW,CAAC6F,cAAc,CAC1C;EAAEqH,YAAAA,IAAI,EAAEpN,MAAM,CAACmM,oBAAoB,CAACe,aAAO,CAAA;aAAQ,EACnDhO,QAAQ,CACT,CAAA;YACDwE,IAAI,GAAGyJ,SAAS,CAACzJ,IAAI,CAAA;EACtB,SAAA;EACF,OAAA;QAED,MAAMiJ,MAAM,GAAG,IAAI,CAACH,eAAe,CAAC,QAAQ,EAAE/J,WAAW,CAAC,CAAA;EAC1D;QACAd,uBAAG,CAACc,WAAgC,EAAEkK,MAAM,EAAE,IAAI,CAACU,eAAe,CAAC3J,IAAI,CAAC,CAAC,CAAA;QAEzE9C,QAAQ,CAAC6B,WAAW,CAAC,CAAA;OACtB,CAAA;EAAA,GAAA;EA9KD;;;;EAIG;IACH6K,UAAU,CAACtI,IAAY,EAAA;MACrB,MAAM;EAAEhF,MAAAA,MAAAA;OAAQ,GAAG,IAAI,CAACF,KAAK,CAAA;EAC7B,IAAA,OACEX,KAAK,CAACC,OAAO,CAACY,MAAM,CAACoF,QAAQ,CAAC,IAAIpF,MAAM,CAACoF,QAAQ,CAACmI,OAAO,CAACvI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;EAE1E,GAAA;EAEA;;;;;;;EAOG;;EAqGH;;;EAGG;IACHqI,eAAe,CAAC3J,IAAyB,EAAA;EACvC,IAAA,QAAQA,IAAI;EACV,MAAA,KAAK,QAAQ;EACX,QAAA,OAAO,WAAW,CAAA;EACpB,MAAA,KAAK,OAAO;EACV,QAAA,OAAO,EAAE,CAAA;EACX,MAAA,KAAK,SAAS;EACZ,QAAA,OAAO,KAAK,CAAA;EACd,MAAA,KAAK,MAAM;EACT,QAAA,OAAO,IAAI,CAAA;EACb,MAAA,KAAK,QAAQ;EACX,QAAA,OAAO,CAAC,CAAA;EACV,MAAA,KAAK,QAAQ;EACX,QAAA,OAAO,EAAE,CAAA;EACX,MAAA;EACE;EACA,QAAA,OAAO,WAAW,CAAA;EAAC,KAAA;EAEzB,GAAA;EAEA;;;;EAIG;;EA4BH;EACG;EACHQ,EAAAA,MAAM,GAAA;MACJ,MAAM;EACJlE,MAAAA,MAAM,EAAEwN,SAAS;QACjB1J,QAAQ,GAAG,EAAE;QACb5E,QAAQ;QACRoC,WAAW;QACXsB,QAAQ;QACRoC,IAAI;EACJI,MAAAA,QAAQ,GAAG,KAAK;EAChBH,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;QAChB6B,SAAS;QACTxB,QAAQ;QACRC,WAAW;QACXH,MAAM;QACNC,OAAO;EACPrF,MAAAA,QAAAA;OACD,GAAG,IAAI,CAACH,KAAK,CAAA;MAEd,MAAM;QAAEiI,MAAM;QAAEpC,WAAW;EAAEzF,MAAAA,WAAAA;EAAW,KAAE,GAAGD,QAAQ,CAAA;MACrD,MAAM;EAAEgI,MAAAA,WAAAA;EAAa,KAAA,GAAGF,MAAM,CAAA;MAC9B,MAAM/H,MAAM,GAAME,WAAW,CAAC6F,cAAc,CAACyH,SAAS,EAAEtO,QAAQ,CAAC,CAAA;EACjE,IAAA,MAAMiF,SAAS,GAAGH,kBAAY,CAAUF,QAAQ,CAAC,CAAA;MACjD,MAAM;QAAEoG,UAAU,EAAEuD,gBAAgB,GAAG,EAAE;EAAA,KAAE,GAAGzN,MAAM,CAAA;EAEpD,IAAA,MAAM0F,KAAK,GAAG1F,MAAM,CAAC0F,KAAK,KAAK7C,SAAS,GAAGmC,IAAI,GAAGhF,MAAM,CAAC0F,KAAK,CAAA;MAC9D,MAAMgI,WAAW,GAAGvJ,SAAS,CAACuJ,WAAW,IAAI1N,MAAM,CAAC0N,WAAW,CAAA;EAC/D,IAAA,IAAIC,iBAA2B,CAAA;MAC/B,IAAI;EACF,MAAA,MAAMzD,UAAU,GAAGxB,MAAM,CAACC,IAAI,CAAC8E,gBAAgB,CAAC,CAAA;QAChDE,iBAAiB,GAAGC,qBAAe,CAAC1D,UAAU,EAAE/F,SAAS,CAAC0J,KAAK,CAAC,CAAA;OACjE,CAAC,OAAOC,GAAG,EAAE;EACZ,MAAA,oBACExJ,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,yBAAG,CAAAwC,aAAA,CAAA,GAAA,EAAA;EAAAF,QAAAA,SAAS,EAAC,cAAc;EAACmH,QAAAA,KAAK,EAAE;EAAEC,UAAAA,KAAK,EAAE,KAAA;EAAO,SAAA;EAAA,OAAA,cACxChJ,IAAI,IAAI,MAAM,+CACvBV,yBAAM,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,EAAAgH,GAAa,CAACG,OAAO,CAAM,EAC/B,GAAA,CAAA,eACJ3J,yBAAM,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,EAAAoH,IAAI,CAACC,SAAS,CAACnO,MAAM,CAAC,CAAO,CAC/B,CAAA;EAET,KAAA;MAED,MAAM6G,QAAQ,GAAGxC,iBAAW,CAC1B,qBAAqB,EACrBpE,QAAQ,EACRkE,SAAS,CACV,CAAA;EAED,IAAA,MAAMiK,aAAa,GAAG;EACpB1I,MAAAA,KAAK,EAAEvB,SAAS,CAACuB,KAAK,IAAIA,KAAK;QAC/BgI,WAAW;EACXxD,MAAAA,UAAU,EAAEyD,iBAAiB,CAACtO,GAAG,CAAE2F,IAAI,IAAI;EACzC,QAAA,MAAMqH,2BAA2B,GAAGhE,uBAAG,CAACrI,MAAM,EAAE,CAC9CqO,oBAAc,EACdrJ,IAAI,EACJsJ,8BAAwB,CACzB,CAAC,CAAA;UACF,MAAMC,aAAa,GAAGlC,2BAA2B,GAC7CvI,QAAQ,CAACqI,oBAAoB,GAC7BrI,QAAQ,CAACkB,IAAI,CAAC,CAAA;UAClB,MAAMwJ,MAAM,GAAGxK,kBAAY,CAAUuK,aAAa,CAAC,CAACrH,MAAM,KAAK,QAAQ,CAAA;EACvE,QAAA,MAAMuH,aAAa,GAAgBlL,uBAAG,CAACX,QAAQ,EAAE,CAACoC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;UAE5D,OAAO;EACL0J,UAAAA,OAAO,eACLpK,yBAAC,CAAAwC,aAAA,CAAAmB,WAAW,EACV;EAAA1I,YAAAA,GAAG,EAAEyF,IAAI;EACTA,YAAAA,IAAI,EAAEA,IAAI;EACVI,YAAAA,QAAQ,EAAE,IAAI,CAACkI,UAAU,CAACtI,IAAI,CAAC;EAC/BhF,YAAAA,MAAM,EAAEuD,uBAAG,CAACvD,MAAM,EAAE,CAACqO,oBAAc,EAAErJ,IAAI,CAAC,EAAE,EAAE,CAAC;EAC/ClB,YAAAA,QAAQ,EAAEyK,aAAa;EACvBjN,YAAAA,WAAW,EAAEiC,uBAAG,CAACjC,WAAW,EAAE0D,IAAI,CAAC;EACnCpC,YAAAA,QAAQ,EAAE6L,aAAa;EACvBlJ,YAAAA,QAAQ,EAAEA,QAAQ;EAClBC,YAAAA,WAAW,EAAEA,WAAW;EACxBtG,YAAAA,QAAQ,EAAEqE,uBAAG,CAACrE,QAAQ,EAAE8F,IAAI,CAAC;EAC7BW,YAAAA,WAAW,EAAEA,WAAW;EACxBuG,YAAAA,sBAAsB,EAAE,IAAI,CAACrL,KAAK,CAACqL,sBAAsB;EACzDU,YAAAA,WAAW,EAAE,IAAI,CAACA,WAAW,CAAC5H,IAAI,CAAC;cACnCpE,QAAQ,EAAE,IAAI,CAACwL,gBAAgB,CAC7BpH,IAAI,EACJqH,2BAA2B,CAC5B;EACDhH,YAAAA,MAAM,EAAEA,MAAM;EACdC,YAAAA,OAAO,EAAEA,OAAO;EAChBrF,YAAAA,QAAQ,EAAEA,QAAQ;EAClBgF,YAAAA,QAAQ,EAAEA,QAAQ;EAClBC,YAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,YAAAA,SAAS,EAAEA,SAAS;cACpBuF,mBAAmB,EAAE,IAAI,CAACA,mBAAAA;cAE7B;YACDtH,IAAI;YACJE,QAAQ;YACRD,QAAQ;YACRG,QAAQ;EACRoJ,UAAAA,MAAAA;WACD,CAAA;EACH,OAAC,CAAC;QACFtJ,QAAQ;QACRD,QAAQ;QACRG,QAAQ;QACRxC,QAAQ;QACRkB,QAAQ;QACR9D,MAAM;QACNd,QAAQ;QACRyG,WAAW;EACX1F,MAAAA,QAAAA;OACD,CAAA;EACD,IAAA,oBAAOqE,yBAAA,CAAAwC,aAAA,CAACD,QAAQ,EAAA;EAAA,MAAA,GAAKuH,aAAa;QAAE3N,UAAU,EAAE,IAAI,CAACwM,cAAAA;EAAc,KAAA,CAAI,CAAA;EACzE,GAAA;EACD;;EC1TD;EACA,MAAM0B,eAAe,GAA8B;EACjDC,EAAAA,KAAK,EAAE,YAAY;EACnBC,EAAAA,OAAO,EAAE,cAAc;EACvBC,EAAAA,OAAO,EAAE,aAAa;EACtBC,EAAAA,MAAM,EAAE,aAAa;EACrBC,EAAAA,MAAM,EAAE,aAAa;EACrBC,EAAAA,MAAM,EAAE,aAAa;EACrBC,EAAAA,IAAI,EAAE,WAAA;GACP,CAAA;EAED;;;;;;;;;EASG;EACH,SAASC,iBAAiB,CAKxBnP,MAAS,EACTmE,SAAiC,EACjCvB,QAAqB,EACrB3C,QAA2B,EAAA;EAE3B,EAAA,MAAMmP,KAAK,GAAGjL,SAAS,CAACiL,KAAK,CAAA;IAC7B,MAAM;EAAErH,IAAAA,MAAAA;EAAQ,GAAA,GAAG9H,QAAQ,CAAA;EAC3B,EAAA,IAAI,OAAOmP,KAAK,KAAK,UAAU,EAAE;EAC/B,IAAA,OAAOA,KAAK,CAAA;EACb,GAAA;IACD,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,IAAIrH,MAAM,EAAE;MAChD,OAAOA,MAAM,CAACqH,KAAK,CAAC,CAAA;EACrB,GAAA;EAED,EAAA,MAAMC,UAAU,GAAGC,mBAAa,CAACtP,MAAM,CAAC,CAAA;EACxC,EAAA,MAAM0D,IAAI,GAAWvE,KAAK,CAACC,OAAO,CAACiQ,UAAU,CAAC,GAC1CA,UAAU,CAAC,CAAC,CAAC,GACbA,UAAU,IAAI,EAAE,CAAA;EACpB,EAAA,MAAME,aAAa,GAAGZ,eAAe,CAACjL,IAAI,CAAC,CAAA;EAE3C;EACA;IACA,IAAI,CAAC6L,aAAa,KAAKvP,MAAM,CAACwP,KAAK,IAAIxP,MAAM,CAACmJ,KAAK,CAAC,EAAE;EACpD,IAAA,OAAO,MAAM,IAAI,CAAA;EAClB,GAAA;IAED,OAAOoG,aAAa,IAAIxH,MAAM,GAC1BA,MAAM,CAACwH,aAAa,CAAC,GACrB,MAAK;MACH,MAAMnL,wBAAwB,GAAGC,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkE,SAAS,CAAC,CAAA;EAElD,IAAA,oBACEG,yBAAC,CAAAwC,aAAA,CAAA1C,wBAAwB,EACvB;EAAApE,MAAAA,MAAM,EAAEA,MAAM;EACd4C,MAAAA,QAAQ,EAAEA,QAAQ;EAClB2B,MAAAA,MAAM,EAAE,CAAA,mBAAA,EAAsBvE,MAAM,CAAC0D,IAAI,CAAE,CAAA;EAC3CzD,MAAAA,QAAQ,EAAEA,QAAAA;EACV,KAAA,CAAA,CAAA;KAEL,CAAA;EACP,CAAA;EAEA;;;;;EAKG;EACH,SAASwP,iBAAiB,CAIxB3P,KAA0B,EAAA;IAC1B,MAAM;EACJE,IAAAA,MAAM,EAAE0P,OAAO;EACf9M,IAAAA,QAAQ,EAAE+M,SAAS;MACnB7L,QAAQ;MACR5E,QAAQ;MACRoC,WAAW;MACXiE,QAAQ;MACRC,WAAW;MACXR,IAAI;MACJpE,QAAQ;MACRgM,WAAW;MACXN,mBAAmB;MACnBlH,QAAQ;MACRnF,QAAQ;EACRiM,IAAAA,sBAAsB,GAAG,KAAA;EAC1B,GAAA,GAAGpM,KAAK,CAAA;IACT,MAAM;MAAE6F,WAAW;EAAEzF,IAAAA,WAAAA;EAAa,GAAA,GAAGD,QAAQ,CAAA;EAC7C,EAAA,MAAMkE,SAAS,GAAGH,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IACjD,MAAM8L,aAAa,GAAGvL,iBAAW,CAC/B,eAAe,EACfpE,QAAQ,EACRkE,SAAS,CACV,CAAA;IACD,MAAM0L,wBAAwB,GAAGxL,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkE,SAAS,CAAC,CAAA;IAClD,MAAM2L,iBAAiB,GAAGzL,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkE,SAAS,CACV,CAAA;IACD,MAAM4L,kBAAkB,GAAG1L,iBAAW,CACpC,oBAAoB,EACpBpE,QAAQ,EACRkE,SAAS,CACV,CAAA;IACD,MAAMnE,MAAM,GAAGE,WAAW,CAAC6F,cAAc,CAAC2J,OAAO,EAAExQ,QAAQ,CAAC,CAAA;EAC5D,EAAA,MAAM8Q,OAAO,GAAGL,SAAS,CAACM,YAAM,CAAC,CAAA;IACjC,MAAMrN,QAAQ,GAAGsN,kBAAY,CAC3BhQ,WAAW,CAACoG,UAAU,CAACtG,MAAM,EAAEgQ,OAAO,EAAE9Q,QAAQ,EAAEqG,QAAQ,EAAEC,WAAW,CAAC,EACxEmK,SAAS,CACK,CAAA;EAEhB;;EAEG;EACH,EAAA,MAAMQ,0BAA0B,GAAG7L,yBAAK,CAACmH,WAAW,CAClD,CAACvM,QAAW,EAAEqC,cAA+B,EAAEgB,EAAW,KAAI;EAC5D,IAAA,MAAM6N,KAAK,GAAG7N,EAAE,IAAIyN,OAAO,CAAA;EAC3B,IAAA,OAAOpP,QAAQ,CAAC1B,QAAQ,EAAEqC,cAAc,EAAE6O,KAAK,CAAC,CAAA;EAClD,GAAC,EACD,CAACJ,OAAO,EAAEpP,QAAQ,CAAC,CACpB,CAAA;IAED,MAAMyP,cAAc,GAAGlB,iBAAiB,CACtCnP,MAAM,EACNmE,SAAS,EACTvB,QAAQ,EACR3C,QAAQ,CACT,CAAA;IACD,MAAMgF,QAAQ,GAAGqL,OAAO,CAACxQ,KAAK,CAACmF,QAAQ,IAAId,SAAS,CAACc,QAAQ,CAAC,CAAA;IAC9D,MAAMC,QAAQ,GAAGoL,OAAO,CACtBxQ,KAAK,CAACoF,QAAQ,IACZf,SAAS,CAACe,QAAQ,IAClBpF,KAAK,CAACE,MAAM,CAACuQ,QAAQ,IACrBvQ,MAAM,CAACuQ,QAAQ,CAClB,CAAA;EACD,EAAA,MAAMC,iBAAiB,GAAGrM,SAAS,CAAC4C,SAAS,CAAA;EAC7C;EACA,EAAA,MAAMA,SAAS,GACbyJ,iBAAiB,KAAK3N,SAAS,GAC3B/C,KAAK,CAACiH,SAAS,GACfuJ,OAAO,CAACE,iBAAiB,CAAC,CAAA;IAChC,MAAMrL,SAAS,GAAGmL,OAAO,CAACxQ,KAAK,CAACqF,SAAS,IAAIhB,SAAS,CAACgB,SAAS,CAAC,CAAA;IACjE,IAAIuD,MAAM,CAACC,IAAI,CAAC3I,MAAM,CAAC,CAACoD,MAAM,KAAK,CAAC,EAAE;EACpC,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IAED,MAAMqN,YAAY,GAAGvQ,WAAW,CAACwQ,eAAe,CAAC1Q,MAAM,EAAE8D,QAAQ,CAAC,CAAA;IAElE,MAAM;MAAE6M,QAAQ;MAAE,GAAGC,gBAAAA;KAAkB,GAAGtP,WAAW,IAAI,EAAE,CAAA;EAC3D;IACA,MAAMiN,aAAa,GAAGsC,wBAAI,CAAC/M,QAAQ,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC,CAAA;IACrE,IAAI,YAAY,IAAIyK,aAAa,EAAE;EACjCA,IAAAA,aAAa,CAAC,YAAY,CAAC,GAAGsC,wBAAI,CAACtC,aAAa,CAAC,YAAY,CAAC,EAAE,CAC9D,YAAY,CACb,CAAC,CAAA;EACH,GAAA;EAED,EAAA,MAAMa,KAAK,gBACT9K,yBAAC,CAAAwC,aAAA,CAAAuJ,cAAc;SACTvQ,KAAK;EACTc,IAAAA,QAAQ,EAAEuP,0BAA0B;EACpCvN,IAAAA,QAAQ,EAAEA,QAAQ;EAClB5C,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEyK,aAAa;EACvBtJ,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,IAAAA,SAAS,EAAEA,SAAS;EACpB5B,IAAAA,SAAS,EAAEA,SAAS;EACpB7D,IAAAA,WAAW,EAAEsP,gBAAgB;EAC7BjL,IAAAA,WAAW,EAAEA,WAAW;EACxBF,IAAAA,SAAS,EAAEkL,QAAAA;EACX,GAAA,CACH,CAAA;EAED,EAAA,MAAMpO,EAAE,GAAGK,QAAQ,CAACqN,YAAM,CAAC,CAAA;EAE3B;EACA,EAAA,IAAI1I,KAAK,CAAA;EACT,EAAA,IAAI2E,sBAAsB,EAAE;EAC1B3E,IAAAA,KAAK,GAAGvC,IAAI,CAAA;EACb,GAAA,MAAM;MACLuC,KAAK,GACH+G,8BAAwB,IAAItO,MAAM,GAC9BgF,IAAI,GACJb,SAAS,CAACuB,KAAK,IAAI5F,KAAK,CAACE,MAAM,CAAC0F,KAAK,IAAI1F,MAAM,CAAC0F,KAAK,IAAIV,IAAI,CAAA;EACpE,GAAA;EAED,EAAA,MAAM0I,WAAW,GACfvJ,SAAS,CAACuJ,WAAW,IACrB5N,KAAK,CAACE,MAAM,CAAC0N,WAAW,IACxB1N,MAAM,CAAC0N,WAAW,IAClB,EAAE,CAAA;EACJ,EAAA,MAAMoD,IAAI,GAAG3M,SAAS,CAAC2M,IAAI,CAAA;EAC3B,EAAA,MAAMtC,MAAM,GAAGrK,SAAS,CAAC+C,MAAM,KAAK,QAAQ,CAAA;EAE5C,EAAA,MAAM6J,UAAU,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE,CAAA,MAAA,EAAS/Q,MAAM,CAAC0D,IAAI,CAAA,CAAE,CAAC,CAAA;IAClE,IAAI,CAACqD,SAAS,IAAI4J,QAAQ,IAAIA,QAAQ,CAACvN,MAAM,GAAG,CAAC,EAAE;EACjD2N,IAAAA,UAAU,CAACC,IAAI,CAAC,kCAAkC,CAAC,CAAA;EACpD,GAAA;EACD,EAAA,IAAIlN,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,eAARA,QAAQ,CAAEiN,UAAU,EAAE;EACxB,IAA2C;EACzCE,MAAAA,OAAO,CAACC,IAAI,CACV,yGAAyG,CAC1G,CAAA;EACF,KAAA;EACDH,IAAAA,UAAU,CAACC,IAAI,CAAClN,QAAQ,CAACiN,UAAU,CAAC,CAAA;EACrC,GAAA;IACD,IAAI5M,SAAS,CAAC4M,UAAU,EAAE;EACxBA,IAAAA,UAAU,CAACC,IAAI,CAAC7M,SAAS,CAAC4M,UAAU,CAAC,CAAA;EACtC,GAAA;EAED,EAAA,MAAMI,aAAa,gBACjB7M,wCAACwL,iBAAiB,EAAA;EAChBgB,IAAAA,IAAI,EAAEA,IAAI;EACVlO,IAAAA,QAAQ,EAAEA,QAAQ;EAClB5C,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;MAClBsN,SAAS,EAAE,CAACrK,SAAS,IAAI4J,QAAQ,IAAIA,QAAQ,CAACvN,MAAM,GAAG,CAAC;EACxDnD,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAErB,CAAA;IACD,MAAMoR,eAAe,GAAGtK,SAAS,GAAGlE,SAAS,gBAC3CyB,yBAAC,CAAAwC,aAAA,CAAAiJ,kBAAkB;EACjBuB,IAAAA,MAAM,EAAEX,QAAQ;EAChBrP,IAAAA,WAAW,EAAEA,WAAW;EACxBsB,IAAAA,QAAQ,EAAEA,QAAQ;EAClB5C,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAErB,CAAA;EACD,EAAA,MAAMsR,UAAU,GAAkD;EAChE7D,IAAAA,WAAW,eACTpJ,yBAAA,CAAAwC,aAAA,CAAC+I,wBAAwB,EAAA;QACvBtN,EAAE,EAAK,CAAAA,EAAAA,EAAiB,CAAA,aAAA,CAAA;EACxBmL,MAAAA,WAAW,EAAEA,WAAW;EACxB1N,MAAAA,MAAM,EAAEA,MAAM;EACd8D,MAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,MAAAA,QAAQ,EAAEA,QAAAA;EAAQ,KAAA,CAErB;EACDuR,IAAAA,cAAc,EAAE9D,WAAW;EAC3BoD,IAAAA,IAAI,EAAEK,aAAa;MACnBM,OAAO,EAAE,OAAOX,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGjO,SAAS;EACpDyO,IAAAA,MAAM,EAAED,eAAe;EACvB5L,IAAAA,SAAS,EAAEsB,SAAS,GAAGlE,SAAS,GAAG8N,QAAQ;MAC3CpO,EAAE;MACFgF,KAAK;MACLiH,MAAM;MACN5N,QAAQ;MACRgM,WAAW;MACXN,mBAAmB;MACnBlH,QAAQ;MACRH,QAAQ;MACRC,QAAQ;MACR6B,SAAS;MACT0J,YAAY;MACZM,UAAU,EAAEA,UAAU,CAACW,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,EAAE;MACvChM,WAAW;MACXzG,QAAQ;MACRc,MAAM;MACN8D,QAAQ;EACR7D,IAAAA,QAAAA;KACD,CAAA;EAED,EAAA,MAAM2R,WAAW,GAAG3R,QAAQ,CAAC8H,MAAM,CAAC8B,UAAU,CAAA;EAC9C,EAAA,MAAMgI,WAAW,GAAG5R,QAAQ,CAAC8H,MAAM,CAAC+J,UAAU,CAAA;EAE9C,EAAA,oBACExN,yBAAA,CAAAwC,aAAA,CAAC8I,aAAa,EAAA;MAAA,GAAK2B,UAAAA;EAAU,GAAA,eAC3BjN,yBAAA,CAAAwC,aAAA,CAAAxC,yBAAA,CAAAyN,QAAA,EAAA,IAAA,EACG3C,KAAK,EAMLpP,MAAM,CAACwP,KAAK,IACX,EAAC1L,QAAQ,KAAA,IAAA,IAARA,QAAQ,KAAA,KAAA,CAAA,IAARA,QAAQ,CAAG,UAAU,CAAC,CACvB,IAAA,CAAC5D,WAAW,CAAC8R,QAAQ,CAAChS,MAAM,CAAC,iBAC3BsE,yBAAA,CAAAwC,aAAA,CAAC8K,WAAW,EAAA;EACV5M,IAAAA,IAAI,EAAEA,IAAI;EACVC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,IAAAA,SAAS,EAAEA,SAAS;EACpBzF,IAAAA,WAAW,EAAEA,WAAW;EACxBpC,IAAAA,QAAQ,EAAEA,QAAQ;EAClByG,IAAAA,WAAW,EAAEA,WAAW;EACxBJ,IAAAA,QAAQ,EAAEA,QAAQ;EAClB3C,IAAAA,QAAQ,EAAEA,QAAQ;EAClB4C,IAAAA,WAAW,EAAEA,WAAW;MACxBH,MAAM,EAAEvF,KAAK,CAACuF,MAAM;MACpBzE,QAAQ,EAAEd,KAAK,CAACc,QAAQ;MACxB0E,OAAO,EAAExF,KAAK,CAACwF,OAAO;MACtB6B,OAAO,EAAEnH,MAAM,CAACwP,KAAK,CAACnQ,GAAG,CAAEqQ,OAAO,IAChCxP,WAAW,CAAC6F,cAAc,CACxBF,4BAAQ,CAAC6J,OAAO,CAAC,GAAIA,OAAa,GAAI,EAAQ,EAC9CxQ,QAAQ,CACT,CACF;MACD0L,QAAQ,EAAE5K,MAAM,CAAC0D,IAAI;EACrBzD,IAAAA,QAAQ,EAAEA,QAAQ;EAClBD,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAErB,EACF9D,MAAM,CAACmJ,KAAK,IACX,EAACrF,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,KAARA,KAAAA,CAAAA,IAAAA,QAAQ,CAAG,UAAU,CAAC,CAAA,IACvB,CAAC5D,WAAW,CAAC8R,QAAQ,CAAChS,MAAM,CAAC,iBAC3BsE,yBAAC,CAAAwC,aAAA,CAAA+K,WAAW,EACV;EAAA7M,IAAAA,IAAI,EAAEA,IAAI;EACVC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,IAAAA,SAAS,EAAEA,SAAS;EACpBzF,IAAAA,WAAW,EAAEA,WAAW;EACxBpC,IAAAA,QAAQ,EAAEA,QAAQ;EAClByG,IAAAA,WAAW,EAAEA,WAAW;EACxBJ,IAAAA,QAAQ,EAAEA,QAAQ;EAClB3C,IAAAA,QAAQ,EAAEA,QAAQ;EAClB4C,IAAAA,WAAW,EAAEA,WAAW;MACxBH,MAAM,EAAEvF,KAAK,CAACuF,MAAM;MACpBzE,QAAQ,EAAEd,KAAK,CAACc,QAAQ;MACxB0E,OAAO,EAAExF,KAAK,CAACwF,OAAO;MACtB6B,OAAO,EAAEnH,MAAM,CAACmJ,KAAK,CAAC9J,GAAG,CAAEqQ,OAAO,IAChCxP,WAAW,CAAC6F,cAAc,CACxBF,4BAAQ,CAAC6J,OAAO,CAAC,GAAIA,OAAa,GAAI,EAAQ,EAC9CxQ,QAAQ,CACT,CACF;MACD0L,QAAQ,EAAE5K,MAAM,CAAC0D,IAAI;EACrBzD,IAAAA,QAAQ,EAAEA,QAAQ;EAClBD,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAAA;KACV,CACH,CACF,CACW,CAAA;EAEpB,CAAA;EAEA;;EAEG;EACH,MAAMmE,WAIJ,SAAQ3D,yBAAK,CAAC1E,SAA8B,CAAA;IAC5CqS,qBAAqB,CAACjP,SAAwC,EAAA;MAC5D,OAAO,CAAC0H,gBAAU,CAAC,IAAI,CAAC5K,KAAK,EAAEkD,SAAS,CAAC,CAAA;EAC3C,GAAA;EAEAkB,EAAAA,MAAM,GAAA;EACJ,IAAA,oBAAOI,wCAACmL,iBAAiB,EAAA;EAAA,MAAA,GAAc,IAAI,CAAC3P,KAAAA;QAAS,CAAA;EACvD,GAAA;EACD;;EChYD;;;EAGG;EACH,SAASyL,WAAW,CAIlBzL,KAA0B,EAAA;IAC1B,MAAM;MACJE,MAAM;MACNgF,IAAI;MACJlB,QAAQ;MACRlB,QAAQ;MACR1D,QAAQ;MACRkG,QAAQ;EACRH,IAAAA,QAAQ,GAAG,KAAK;EAChBC,IAAAA,QAAQ,GAAG,KAAK;EAChBC,IAAAA,SAAS,GAAG,KAAK;MACjBvE,QAAQ;MACRyE,MAAM;MACNC,OAAO;MACPrF,QAAQ;EACRwF,IAAAA,SAAAA;EACD,GAAA,GAAG3F,KAAK,CAAA;IACT,MAAM;MAAE4F,KAAK;EAAEwM,IAAAA,MAAAA;EAAQ,GAAA,GAAGlS,MAAM,CAAA;IAChC,MAAM;MAAEiH,OAAO;MAAEtB,WAAW;EAAEzF,IAAAA,WAAAA;EAAW,GAAE,GAAGD,QAAQ,CAAA;EACtD,EAAA,MAAMuH,WAAW,GAAGtH,WAAW,CAAC8R,QAAQ,CAAChS,MAAM,CAAC,GAC5CyH,iBAAW,CAACzH,MAAM,CAAC,GACnB6C,SAAS,CAAA;EACb,EAAA,IAAIsP,aAAa,GAAG3K,WAAW,GAAG,QAAQ,GAAG,MAAM,CAAA;IACnD,IAAI0K,MAAM,IAAIE,eAAS,CAAUpS,MAAM,EAAEkS,MAAM,EAAEjL,OAAO,CAAC,EAAE;EACzDkL,IAAAA,aAAa,GAAGD,MAAM,CAAA;EACvB,GAAA;IACD,MAAM;EACJhL,IAAAA,MAAM,GAAGiL,aAAa;EACtBnL,IAAAA,WAAW,GAAG,EAAE;MAChB,GAAGG,OAAAA;EACJ,GAAA,GAAGnD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IACnC,MAAMsD,MAAM,GAAGC,eAAS,CAAUrH,MAAM,EAAEkH,MAAM,EAAED,OAAO,CAAC,CAAA;EAC1D,EAAA,oBACE3C,wCAAC8C,MAAM,EAAA;EACLD,IAAAA,OAAO,EAAE;EAAE,MAAA,GAAGA,OAAO;EAAEK,MAAAA,WAAAA;OAAa;EACpCxH,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClBvB,IAAAA,EAAE,EAAEK,QAAQ,IAAIA,QAAQ,CAACE,GAAG;EAC5ByE,IAAAA,KAAK,EAAE7B,KAAK,KAAK7C,SAAS,GAAGmC,IAAI,GAAGU,KAAK;EACzCpD,IAAAA,KAAK,EAAEpD,QAAQ;EACf0B,IAAAA,QAAQ,EAAEA,QAAQ;EAClByE,IAAAA,MAAM,EAAEA,MAAM;EACdC,IAAAA,OAAO,EAAEA,OAAO;EAChBF,IAAAA,QAAQ,EAAEA,QAAQ;EAClBH,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBS,IAAAA,WAAW,EAAEA,WAAW;EACxBR,IAAAA,SAAS,EAAEA,SAAS;EACpBlF,IAAAA,QAAQ,EAAEA,QAAQ;EAClB+G,IAAAA,WAAW,EAAEA,WAAW;EACxBvB,IAAAA,SAAS,EAAEA,SAAAA;EAAS,GAAA,CACpB,CAAA;EAEN;;ECjEA;;;;EAIG;EACH,SAAS4M,SAAS,CAIhBvS,KAA0B,EAAA;IAC1B,MAAM;MAAEZ,QAAQ;EAAE0B,IAAAA,QAAAA;EAAU,GAAA,GAAGd,KAAK,CAAA;EACpCwS,EAAAA,eAAS,CAAC,MAAK;MACb,IAAIpT,QAAQ,KAAK2D,SAAS,EAAE;QAC1BjC,QAAQ,CAAC,IAAoB,CAAC,CAAA;EAC/B,KAAA;EACH,GAAC,EAAE,CAAC1B,QAAQ,EAAE0B,QAAQ,CAAC,CAAC,CAAA;EAExB,EAAA,OAAO,IAAI,CAAA;EACb;;ECTA,SAASmH,MAAM,GAAA;IAKb,OAAO;EACL8B,IAAAA,UAAU,EAAE0I,UAAgB;EAC5B5S,IAAAA,UAAU,EAAEA,UAAuC;EACnD;MACAuJ,YAAY;MACZgC,WAAW;MACXe,WAAW;EACX6F,IAAAA,UAAU,EAAES,UAAgB;MAC5BtK,WAAW;MACXsD,WAAW;EACX8G,IAAAA,SAAAA;KACD,CAAA;EACH;;ECxBA;;;;EAIG;EACqB,SAAAG,6BAA6B,CAInD1S,KAA0C,EAAA;IAC1C,MAAM;MAAE8C,QAAQ;MAAE8K,WAAW;MAAEzN,QAAQ;MAAED,MAAM;EAAE8D,IAAAA,QAAAA;EAAU,GAAA,GAAGhE,KAAK,CAAA;EACnE,EAAA,MAAMqH,OAAO,GAAGnD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IAC/C,MAAM;MAAEyD,KAAK,EAAEkJ,YAAY,GAAG,IAAA;EAAI,GAAE,GAAGtJ,OAAO,CAAA;EAC9C,EAAA,IAAI,CAACuG,WAAW,IAAI,CAAC+C,YAAY,EAAE;EACjC,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,MAAMZ,wBAAwB,GAAGxL,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkH,OAAO,CAAC,CAAA;EAChD,EAAA,MAAM5E,EAAE,GAAG,CAAA,EAAGK,QAAQ,CAACE,IAAkB,aAAA,CAAA,CAAA;EACzC,EAAA,oBACEwB,yBAAC,CAAAwC,aAAA,CAAA+I,wBAAwB,EACvB;EAAAtN,IAAAA,EAAE,EAAEA,EAAE;EACNmL,IAAAA,WAAW,EAAEA,WAAW;EACxB1N,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;EACV,GAAA,CAAA,CAAA;EAEN;;EClCA;;;EAGG;EACqB,SAAAwS,sBAAsB,CAI5C3S,KAA0C,EAAA;IAC1C,MAAM;MACJ+I,QAAQ;MACRjC,SAAS;MACT3B,QAAQ;MACR6D,UAAU;MACVE,WAAW;MACXD,SAAS;MACTE,SAAS;MACT9H,KAAK;MACLE,gBAAgB;MAChBS,cAAc;MACdoD,QAAQ;MACRjF,QAAQ;EACR6D,IAAAA,QAAAA;EACD,GAAA,GAAGhE,KAAK,CAAA;IACT,MAAM;MAAE4S,cAAc;MAAEC,YAAY;EAAEC,IAAAA,YAAAA;EAAc,GAAA,GAClD3S,QAAQ,CAAC4S,SAAS,CAACC,eAAe,CAAA;EACpC,EAAA,MAAMC,QAAQ,GAAkB;EAC9BC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,WAAW,EAAE,CAAC;EACdC,IAAAA,YAAY,EAAE,CAAC;EACfC,IAAAA,UAAU,EAAE,MAAA;KACb,CAAA;EACD,EAAA,oBACE7O,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAEA,SAAAA;EAAS,GAAA,eACvBtC,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAEkC,UAAU,GAAG,UAAU,GAAG,WAAA;KAAW,EAAGD,QAAQ,CAAO,EACtEC,UAAU,iBACTxE,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,6BAAA;EAA6B,GAAA,eAC1CtC,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EACEF,IAAAA,SAAS,EAAC,WAAW;EACrBmH,IAAAA,KAAK,EAAE;EACLqF,MAAAA,OAAO,EAAE,MAAM;EACfC,MAAAA,cAAc,EAAE,cAAA;EACjB,KAAA;KAAA,EAEA,CAACtK,SAAS,IAAIC,WAAW,kBACxB1E,yBAAC,CAAAwC,aAAA,CAAA6L,YAAY,EACX;EAAA5E,IAAAA,KAAK,EAAEgF,QAAQ;EACf9N,IAAAA,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ,IAAI,CAAC6D,SAAS;MAC5CuK,OAAO,EAAExR,cAAc,CAACX,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;EACzC2C,IAAAA,QAAQ,EAAEA,QAAAA;MAEb,EACA,CAACiF,SAAS,IAAIC,WAAW,kBACxB1E,yBAAC,CAAAwC,aAAA,CAAA4L,cAAc,EACb;EAAA3E,IAAAA,KAAK,EAAEgF,QAAQ;EACf9N,IAAAA,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ,IAAI,CAAC8D,WAAW;MAC9CsK,OAAO,EAAExR,cAAc,CAACX,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;EACzC2C,IAAAA,QAAQ,EAAEA,QAAAA;MAEb,EACAmF,SAAS,iBACR3E,yBAAC,CAAAwC,aAAA,CAAA8L,YAAY;EACX7E,IAAAA,KAAK,EAAEgF,QAAQ;MACf9N,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BoO,IAAAA,OAAO,EAAEjS,gBAAgB,CAACF,KAAK,CAAC;EAChC2C,IAAAA,QAAQ,EAAEA,QAAAA;KACV,CACH,CACG,CAET,CACG,CAAA;EAEV;;ECtEA;;;EAGG;EACqB,SAAAyP,kBAAkB,CAIxCzT,KAAuC,EAAA;IACvC,MAAM;MACJmG,MAAM;MACNW,SAAS;MACT3B,QAAQ;MACRrC,QAAQ;MACRkB,QAAQ;MACR1D,KAAK;MACLK,UAAU;MACVyE,QAAQ;MACRjF,QAAQ;MACRmF,QAAQ;MACRpF,MAAM;EACN0F,IAAAA,KAAAA;EAAK,GACN,GAAG5F,KAAK,CAAA;EACT,EAAA,MAAMqE,SAAS,GAAGH,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IACjD,MAAM0O,6BAA6B,GAAGnO,iBAAW,CAK/C,+BAA+B,EAAEpE,QAAQ,EAAEkE,SAAS,CAAC,CAAA;IACvD,MAAMsO,sBAAsB,GAAGpO,iBAAW,CACxC,wBAAwB,EACxBpE,QAAQ,EACRkE,SAAS,CACV,CAAA;IACD,MAAMqP,uBAAuB,GAAGnP,iBAAW,CAKzC,yBAAyB,EAAEpE,QAAQ,EAAEkE,SAAS,CAAC,CAAA;EACjD;IACA,MAAM;EACJ2O,IAAAA,eAAe,EAAE;EAAEW,MAAAA,SAAAA;EAAW,KAAA;KAC/B,GAAGxT,QAAQ,CAAC4S,SAAS,CAAA;EACtB,EAAA,oBACEvO,yBAAU,CAAAwC,aAAA,CAAA,UAAA,EAAA;EAAAF,IAAAA,SAAS,EAAEA,SAAS;MAAErE,EAAE,EAAEK,QAAQ,CAACE,GAAAA;EAAG,GAAA,eAC9CwB,yBAAA,CAAAwC,aAAA,CAAC0M,uBAAuB,EAAA;EACtB5Q,IAAAA,QAAQ,EAAEA,QAAQ;EAClB8C,IAAAA,KAAK,EAAEvB,SAAS,CAACuB,KAAK,IAAIA,KAAK;EAC/BN,IAAAA,QAAQ,EAAEA,QAAQ;EAClBpF,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;EACV,GAAA,CAAA,eACFqE,yBAAC,CAAAwC,aAAA,CAAA0L,6BAA6B,EAC5B;EAAA5P,IAAAA,QAAQ,EAAEA,QAAQ;EAClB8K,IAAAA,WAAW,EAAEvJ,SAAS,CAACuJ,WAAW,IAAI1N,MAAM,CAAC0N,WAAW;EACxD1N,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;EACV,GAAA,CAAA,eACFqE,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,qBAAA;EAAqB,GAAA,EACjCxG,KAAK,IACJA,KAAK,CAACf,GAAG,CACP,IAAA,IAAA;MAAA,IAAC;QAAEE,GAAG;QAAE,GAAGmU,SAAAA;OAAgD,GAAA,IAAA,CAAA;EAAA,IAAA,oBACzDpP,yBAAA,CAAAwC,aAAA,CAAC2L,sBAAsB,EAAA;EAAClT,MAAAA,GAAG,EAAEA,GAAG;QAAA,GAAMmU,SAAAA;EAAS,KAAA,CAAI,CAAA;KACpD,CACF,CACC,EACLzN,MAAM,iBACL3B,yBAAA,CAAAwC,aAAA,CAAC2M,SAAS,EAAA;EACR7M,IAAAA,SAAS,EAAC,gBAAgB;EAC1B0M,IAAAA,OAAO,EAAE7S,UAAU;MACnBwE,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BpB,IAAAA,QAAQ,EAAEA,QAAAA;EACV,GAAA,CACH,CACQ,CAAA;EAEf;;EChFA;;;;EAIG;EACqB,SAAA0P,uBAAuB,CAI7C1T,KAAoC,EAAA;IACpC,MAAM;MAAE8C,QAAQ;MAAE8C,KAAK;MAAE1F,MAAM;MAAE8D,QAAQ;MAAEsB,QAAQ;EAAEnF,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;EACvE,EAAA,MAAMqH,OAAO,GAAGnD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IAC/C,MAAM;MAAEyD,KAAK,EAAEkJ,YAAY,GAAG,IAAA;EAAI,GAAE,GAAGtJ,OAAO,CAAA;EAC9C,EAAA,IAAI,CAACzB,KAAK,IAAI,CAAC+K,YAAY,EAAE;EAC3B,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;IACD,MAAMkD,kBAAkB,GACtBtP,iBAAW,CACT,oBAAoB,EACpBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACH,EAAA,MAAM5E,EAAE,GAAG,CAAA,EAAGK,QAAQ,CAACE,IAAY,OAAA,CAAA,CAAA;EACnC,EAAA,oBACEwB,yBAAA,CAAAwC,aAAA,CAAC6M,kBAAkB,EAAA;EACjBpR,IAAAA,EAAE,EAAEA,EAAE;EACNmD,IAAAA,KAAK,EAAEA,KAAK;EACZN,IAAAA,QAAQ,EAAEA,QAAQ;EAClBpF,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAClB,CAAA;EAEN;;ECnCA;;;;;EAKG;EACqB,SAAA2T,iBAAiB,CAIvC9T,KAA2B,EAAA;IAC3B,MAAM;MACJyC,EAAE;MACFD,KAAK;MACL4C,QAAQ;MACRD,QAAQ;MACRE,SAAS;MACTE,MAAM;MACNC,OAAO;MACP1E,QAAQ;MACRuG,OAAO;MACPnH,MAAM;MACN8D,QAAQ;MACR6B,WAAW;MACX1F,QAAQ;MACRwF,SAAS;MACT/B,IAAI;MACJ,GAAGmQ,IAAAA;EACJ,GAAA,GAAG/T,KAAK,CAAA;EAET;EACA;IACA,IAAI,CAACyC,EAAE,EAAE;EACP0O,IAAAA,OAAO,CAAC6C,GAAG,CAAC,WAAW,EAAEhU,KAAK,CAAC,CAAA;MAC/B,MAAM,IAAIiU,KAAK,CAAC,CAAmB7F,gBAAAA,EAAAA,IAAI,CAACC,SAAS,CAACrO,KAAK,CAAG,CAAA,CAAA,CAAC,CAAA;EAC5D,GAAA;EACD,EAAA,MAAMkU,UAAU,GAAG;EACjB,IAAA,GAAGH,IAAI;EACP,IAAA,GAAGI,mBAAa,CAAUjU,MAAM,EAAE0D,IAAI,EAAEyD,OAAO,CAAA;KAChD,CAAA;EAED,EAAA,IAAI+M,UAAU,CAAA;IACd,IAAIF,UAAU,CAACtQ,IAAI,KAAK,QAAQ,IAAIsQ,UAAU,CAACtQ,IAAI,KAAK,SAAS,EAAE;MACjEwQ,UAAU,GAAG5R,KAAK,IAAIA,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE,CAAA;EAC/C,GAAA,MAAM;EACL4R,IAAAA,UAAU,GAAG5R,KAAK,IAAI,IAAI,GAAG,EAAE,GAAGA,KAAK,CAAA;EACxC,GAAA;IAED,MAAM6R,SAAS,GAAG1I,iBAAW,CAC3B,IAAA,IAAA;MAAA,IAAC;EAAE2I,MAAAA,MAAM,EAAE;EAAE9R,QAAAA,KAAAA;;OAA8C,GAAA,IAAA,CAAA;MAAA,OACzD1B,QAAQ,CAAC0B,KAAK,KAAK,EAAE,GAAG6E,OAAO,CAACkN,UAAU,GAAG/R,KAAK,CAAC,CAAA;EAAA,GAAA,EACrD,CAAC1B,QAAQ,EAAEuG,OAAO,CAAC,CACpB,CAAA;IACD,MAAMmN,OAAO,GAAG7I,iBAAW,CACzB,KAAA,IAAA;MAAA,IAAC;EAAE2I,MAAAA,MAAM,EAAE;EAAE9R,QAAAA,KAAAA;EAAO,OAAA;OAAsC,GAAA,KAAA,CAAA;EAAA,IAAA,OACxD+C,MAAM,CAAC9C,EAAE,EAAED,KAAK,CAAC,CAAA;EAAA,GAAA,EACnB,CAAC+C,MAAM,EAAE9C,EAAE,CAAC,CACb,CAAA;IACD,MAAMgS,QAAQ,GAAG9I,iBAAW,CAC1B,KAAA,IAAA;MAAA,IAAC;EAAE2I,MAAAA,MAAM,EAAE;EAAE9R,QAAAA,KAAAA;EAAO,OAAA;OAAsC,GAAA,KAAA,CAAA;EAAA,IAAA,OACxDgD,OAAO,CAAC/C,EAAE,EAAED,KAAK,CAAC,CAAA;EAAA,GAAA,EACpB,CAACgD,OAAO,EAAE/C,EAAE,CAAC,CACd,CAAA;EAED,EAAA,oBACE+B,yBAAA,CAAAwC,aAAA,CAAAxC,yBAAA,CAAAyN,QAAA,EAAA,IAAA,eACEzN,yBACE,CAAAwC,aAAA,CAAA,OAAA,EAAA;EAAAvE,IAAAA,EAAE,EAAEA,EAAE;EACNyC,IAAAA,IAAI,EAAEzC,EAAE;EACRqE,IAAAA,SAAS,EAAC,cAAc;EACxB2J,IAAAA,QAAQ,EAAErL,QAAQ;EAClBD,IAAAA,QAAQ,EAAEA,QAAQ;EAClBuP,IAAAA,SAAS,EAAErP,SAAS;EACpB7C,IAAAA,KAAK,EAAE4R,UAAU;EAAA,IAAA,GACbF,UAAU;MACdS,IAAI,EAAEzU,MAAM,CAAC0U,QAAQ,GAAG,CAAYnS,SAAAA,EAAAA,EAAE,CAAE,CAAA,GAAGM,SAAS;EACpDjC,IAAAA,QAAQ,EAAEuT,SAAS;EACnB9O,IAAAA,MAAM,EAAEiP,OAAO;EACfhP,IAAAA,OAAO,EAAEiP,QAAAA;EACT,GAAA,CAAA,EACDpV,KAAK,CAACC,OAAO,CAACY,MAAM,CAAC0U,QAAQ,CAAC,iBAC7BpQ,yBAAA,CAAAwC,aAAA,CAAA,UAAA,EAAA;MAAUvH,GAAG,EAAE,CAAYgD,SAAAA,EAAAA,EAAI,CAAA,CAAA;MAAEA,EAAE,EAAE,YAAYA,EAAE,CAAA,CAAA;EAChD,GAAA,EAAA,CACC,GAAG,IAAIoS,GAAG,CACR3U,MAAM,CAAC0U,QAAQ,CAAC9M,MAAM,CAAC5H,MAAM,CAAC+K,OAAO,GAAG,CAAC/K,MAAM,CAAC+K,OAAO,CAAC,GAAG,EAAE,CAAC,CAC/D,CACF,CAAC1L,GAAG,CAAEuV,OAAY,iBACjBtQ,yBAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;EAAQvH,IAAAA,GAAG,EAAEqV,OAAO;EAAEtS,IAAAA,KAAK,EAAEsS,OAAAA;KAAW,CACzC,CAAC,CAEL,CACA,CAAA;EAEP;;EC7FA;EACG;EACW,SAAUC,YAAY,CAIM,IAAA,EAAA;IAAA,IAAxC;EAAE/Q,IAAAA,QAAAA;KAAsC,GAAA,IAAA,CAAA;IACxC,MAAM;MACJgR,UAAU;MACVC,QAAQ;MACRjV,KAAK,EAAEkV,iBAAiB,GAAG,EAAA;KAC5B,GAAGC,4BAAsB,CAACnR,QAAQ,CAAC,CAAA;EACpC,EAAA,IAAIiR,QAAQ,EAAE;EACZ,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,oBACEzQ,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,yBAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;EACEpD,IAAAA,IAAI,EAAC,QAAQ;SACTsR,iBAAiB;EACrBpO,IAAAA,SAAS,EAAE,CAAA,aAAA,EAAgBoO,iBAAiB,CAACpO,SAAW,CAAA,CAAA;KAAA,EAEvDkO,UAAU,CACJ,CACL,CAAA;EAEV;;EC3BwB,SAAAI,UAAU,CAIhCpV,KAA+B,EAAA;IAC/B,MAAM;EACJqV,IAAAA,QAAQ,GAAG,SAAS;MACpBC,IAAI;MACJxO,SAAS;MACT9C,QAAQ;MACR,GAAGuR,UAAAA;EACJ,GAAA,GAAGvV,KAAK,CAAA;EACT,EAAA,oBACEwE,yBAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;EACEpD,IAAAA,IAAI,EAAC,QAAQ;EACbkD,IAAAA,SAAS,EAAE,CAAA,QAAA,EAAWuO,QAAQ,CAAA,CAAA,EAAIvO,SAAS,CAAE,CAAA;SACzCyO,UAAAA;EAAU,GAAA,eAEd/Q,yBAAG,CAAAwC,aAAA,CAAA,GAAA,EAAA;MAAAF,SAAS,EAAyB,uBAAAwO;EAAU,GAAA,CAAA,CACxC,CAAA;EAEb,CAAA;EAEM,SAAU1C,cAAc,CAI5B5S,KAA+B,EAAA;EAC/B,EAAA,oBACEwE,yBAAC,CAAAwC,aAAA,CAAAoO,UAAU;EACTxP,IAAAA,KAAK,EAAC,WAAW;EACjBkB,IAAAA,SAAS,EAAC,sBAAsB;EAAA,IAAA,GAC5B9G,KAAK;EACTsV,IAAAA,IAAI,EAAC,YAAA;EAAY,GAAA,CACjB,CAAA;EAEN,CAAA;EAEM,SAAUzC,YAAY,CAI1B7S,KAA+B,EAAA;EAC/B,EAAA,oBACEwE,yBAAC,CAAAwC,aAAA,CAAAoO,UAAU;EACTxP,IAAAA,KAAK,EAAC,SAAS;EACfkB,IAAAA,SAAS,EAAC,oBAAoB;EAAA,IAAA,GAC1B9G,KAAK;EACTsV,IAAAA,IAAI,EAAC,UAAA;EAAU,GAAA,CACf,CAAA;EAEN,CAAA;EAEM,SAAUxC,YAAY,CAI1B9S,KAA+B,EAAA;EAC/B,EAAA,oBACEwE,wCAAC4Q,UAAU,EAAA;EACTxP,IAAAA,KAAK,EAAC,QAAQ;EACdkB,IAAAA,SAAS,EAAC,mBAAmB;SACzB9G,KAAK;EACTqV,IAAAA,QAAQ,EAAC,QAAQ;EACjBC,IAAAA,IAAI,EAAC,QAAA;EACL,GAAA,CAAA,CAAA;EAEN;;ECjEA;EACG;EACW,SAAU3B,SAAS,CAI2B,IAAA,EAAA;IAAA,IAA1D;MAAE7M,SAAS;MAAE0M,OAAO;EAAErO,IAAAA,QAAAA;KAAoC,GAAA,IAAA,CAAA;EAC1D,EAAA,oBACEX,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,KAAA;EAAK,GAAA,eAClBtC,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;MAAGF,SAAS,EAAyC,uCAAAA,SAAW,CAAA,CAAA;EAAA,GAAA,eAC9DtC,yBAAA,CAAAwC,aAAA,CAACoO,UAAU,EAAA;EACTC,IAAAA,QAAQ,EAAC,MAAM;EACfC,IAAAA,IAAI,EAAC,MAAM;EACXxO,IAAAA,SAAS,EAAC,mBAAmB;EAC7BlB,IAAAA,KAAK,EAAC,KAAK;EACX4N,IAAAA,OAAO,EAAEA,OAAO;EAChBrO,IAAAA,QAAQ,EAAEA,QAAAA;KAAQ,CAClB,CACA,CACA,CAAA;EAEV;;ECpBA,SAASqQ,eAAe,GAAA;IAKtB,OAAO;MACLT,YAAY;MACZpB,SAAS;MACTf,cAAc;MACdC,YAAY;EACZC,IAAAA,YAAAA;KACD,CAAA;EACH;;ECfA;;;EAGG;EACqB,SAAA2C,gBAAgB,CAItCzV,KAAqC,EAAA;IACrC,MAAM;MAAEyC,EAAE;EAAEmL,IAAAA,WAAAA;EAAa,GAAA,GAAG5N,KAAK,CAAA;IACjC,IAAI,CAAC4N,WAAW,EAAE;EAChB,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;EACnC,IAAA,oBACEpJ,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;EAAGvE,MAAAA,EAAE,EAAEA,EAAE;EAAEqE,MAAAA,SAAS,EAAC,mBAAA;OAAmB,EACrC8G,WAAW,CACV,CAAA;EAEP,GAAA,MAAM;EACL,IAAA,oBACEpJ,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKvE,MAAAA,EAAE,EAAEA,EAAE;EAAEqE,MAAAA,SAAS,EAAC,mBAAA;OAAmB,EACvC8G,WAAW,CACR,CAAA;EAET,GAAA;EACH;;ECzBA;;;EAGG;EACW,SAAU8H,SAAS,CAII,IAAA,EAAA;IAAA,IAAnC;EAAElE,IAAAA,MAAAA;KAAiC,GAAA,IAAA,CAAA;EACnC,EAAA,oBACEhN,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,2BAAA;EAA2B,GAAA,eACxCtC,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,eAAA;EAAe,GAAA,eAC5BtC,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIF,IAAAA,SAAS,EAAC,aAAA;KAAa,EAAA,QAAA,CAAY,CACnC,eACNtC,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIF,IAAAA,SAAS,EAAC,YAAA;KAAY,EACvB0K,MAAM,CAACjS,GAAG,CAAC,CAACoW,KAA0B,EAAEhU,CAAS,KAAI;EACpD,IAAA,oBACE6C,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIvH,MAAAA,GAAG,EAAEkC,CAAC;EAAEmF,MAAAA,SAAS,EAAC,6BAAA;SACnB6O,KAAK,CAACC,KAAK,CACT,CAAA;KAER,CAAC,CACC,CACD,CAAA;EAEV;;EChCA,MAAMC,uBAAqB,GAAG,GAAG,CAAA;EAWjC;;;EAGG;EACqB,SAAAC,KAAK,CAAC9V,KAAiB,EAAA;IAC7C,MAAM;MAAEyH,KAAK;MAAEnC,QAAQ;EAAE7C,IAAAA,EAAAA;EAAE,GAAE,GAAGzC,KAAK,CAAA;IACrC,IAAI,CAACyH,KAAK,EAAE;EACV,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,oBACEjD;EAAOsC,IAAAA,SAAS,EAAC,eAAe;EAACiP,IAAAA,OAAO,EAAEtT,EAAAA;KAAE,EACzCgF,KAAK,EACLnC,QAAQ,iBAAId,yBAAM,CAAAwC,aAAA,CAAA,MAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,UAAA;OAAY+O,uBAAqB,CAAQ,CAChE,CAAA;EAEZ;;EChBA;;;;EAIG;EACqB,SAAA/F,aAAa,CAInC9P,KAAkC,EAAA;IAClC,MAAM;MACJyC,EAAE;MACFgF,KAAK;MACLsB,QAAQ;MACRyI,MAAM;MACNR,IAAI;MACJpD,WAAW;MACXc,MAAM;MACNpJ,QAAQ;MACRqL,YAAY;MACZxQ,QAAQ;EACR6D,IAAAA,QAAAA;EAAQ,GACT,GAAGhE,KAAK,CAAA;EACT,EAAA,MAAMqE,SAAS,GAAGH,kBAAY,CAACF,QAAQ,CAAC,CAAA;IACxC,MAAMgS,wBAAwB,GAAGzR,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkE,SAAS,CAAC,CAAA;EAClD,EAAA,IAAIqK,MAAM,EAAE;EACV,IAAA,oBAAOlK;EAAKsC,MAAAA,SAAS,EAAC,QAAA;OAAU,EAAAiC,QAAQ,CAAO,CAAA;EAChD,GAAA;EACD,EAAA,oBACEvE,yBAAA,CAAAwC,aAAA,CAACgP,wBAAwB,EAAA;MAAA,GAAKhW,KAAAA;KAAK,EAChC2Q,YAAY,iBAAInM,yBAAA,CAAAwC,aAAA,CAAC8O,KAAK,EAAA;EAACrO,IAAAA,KAAK,EAAEA,KAAK;EAAEnC,IAAAA,QAAQ,EAAEA,QAAQ;EAAE7C,IAAAA,EAAE,EAAEA,EAAAA;EAAM,GAAA,CAAA,EACnEkO,YAAY,IAAI/C,WAAW,GAAGA,WAAW,GAAG,IAAI,EAChD7E,QAAQ,EACRyI,MAAM,EACNR,IAAI,CACoB,CAAA;EAE/B;;EC9CA;;;EAGG;EACqB,SAAAf,kBAAkB,CAIxCjQ,KAA+B,EAAA;IAC/B,MAAM;EAAEwR,IAAAA,MAAM,GAAG,EAAE;EAAE1O,IAAAA,QAAAA;EAAQ,GAAE,GAAG9C,KAAK,CAAA;EACvC,EAAA,IAAIwR,MAAM,CAAClO,MAAM,KAAK,CAAC,EAAE;EACvB,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,MAAMb,EAAE,GAAG,CAAA,EAAGK,QAAQ,CAACE,IAAY,OAAA,CAAA,CAAA;EAEnC,EAAA,oBACEwB,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,yBAAI,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAAvE,IAAAA,EAAE,EAAEA,EAAE;EAAEqE,IAAAA,SAAS,EAAC,yCAAA;OACnB0K,MAAM,CACJ1P,MAAM,CAAEmU,IAAI,IAAK,CAAC,CAACA,IAAI,CAAC,CACxB1W,GAAG,CAAC,CAACoW,KAAK,EAAEtU,KAAa,KAAI;EAC5B,IAAA,oBACEmD,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIF,MAAAA,SAAS,EAAC,aAAa;EAACrH,MAAAA,GAAG,EAAE4B,KAAAA;OAAK,EACnCsU,KAAK,CACH,CAAA;KAER,CAAC,CACD,CACD,CAAA;EAEV;;EC9BA;;;EAGG;EACqB,SAAA3F,iBAAiB,CAIvChQ,KAA8B,EAAA;IAC9B,MAAM;MAAE8C,QAAQ;EAAEkO,IAAAA,IAAAA;EAAM,GAAA,GAAGhR,KAAK,CAAA;IAChC,IAAI,CAACgR,IAAI,EAAE;EACT,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,MAAMvO,EAAE,GAAG,CAAA,EAAGK,QAAQ,CAACE,IAAW,MAAA,CAAA,CAAA;EAClC,EAAA,IAAI,OAAOgO,IAAI,KAAK,QAAQ,EAAE;EAC5B,IAAA,oBACExM,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;EAAGvE,MAAAA,EAAE,EAAEA,EAAE;EAAEqE,MAAAA,SAAS,EAAC,YAAA;OAAY,EAC9BkK,IAAI,CACH,CAAA;EAEP,GAAA;EACD,EAAA,oBACExM,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKvE,IAAAA,EAAE,EAAEA,EAAE;EAAEqE,IAAAA,SAAS,EAAC,YAAA;KAAY,EAChCkK,IAAI,CACD,CAAA;EAEV;;ECtBA;;;;;EAKG;EACqB,SAAAkF,mBAAmB,CAIzClW,KAAwC,EAAA;IACxC,MAAM;MACJ4N,WAAW;MACXzI,QAAQ;MACR/F,QAAQ;MACR0D,QAAQ;MACRnC,UAAU;MACVyJ,UAAU;MACVhF,QAAQ;MACRjF,QAAQ;MACRmF,QAAQ;MACRpF,MAAM;MACN0F,KAAK;EACL5B,IAAAA,QAAAA;EAAQ,GACT,GAAGhE,KAAK,CAAA;EACT,EAAA,MAAMqH,OAAO,GAAGnD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;IAC/C,MAAM6P,kBAAkB,GAAGtP,iBAAW,CACpC,oBAAoB,EACpBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;IACD,MAAM0I,wBAAwB,GAAGxL,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkH,OAAO,CAAC,CAAA;EAChD;IACA,MAAM;EACJ2L,IAAAA,eAAe,EAAE;EAAEW,MAAAA,SAAAA;EAAW,KAAA;KAC/B,GAAGxT,QAAQ,CAAC4S,SAAS,CAAA;EACtB,EAAA,oBACEvO,yBAAU,CAAAwC,aAAA,CAAA,UAAA,EAAA;MAAAvE,EAAE,EAAEK,QAAQ,CAACE,GAAAA;EAAG,GAAA,EACvB,CAACqE,OAAO,CAACzB,KAAK,IAAIA,KAAK,kBACtBpB,yBAAA,CAAAwC,aAAA,CAAC6M,kBAAkB,EACjB;EAAApR,IAAAA,EAAE,EAAK,CAAA,EAAAK,QAAQ,CAACE,GAAG,CAAS,OAAA,CAAA;EAC5B4C,IAAAA,KAAK,EAAEyB,OAAO,CAACzB,KAAK,IAAIA,KAAK;EAC7BN,IAAAA,QAAQ,EAAEA,QAAQ;EAClBpF,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;MAEb,EACA,CAACkH,OAAO,CAACuG,WAAW,IAAIA,WAAW,kBAClCpJ,yBAAC,CAAAwC,aAAA,CAAA+I,wBAAwB;EACvBtN,IAAAA,EAAE,KAAKK,QAAQ,CAACE,GAAkB,CAAA,aAAA,CAAA;EAClC4K,IAAAA,WAAW,EAAEvG,OAAO,CAACuG,WAAW,IAAIA,WAAY;EAChD1N,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;MAEb,EACAiK,UAAU,CAAC7K,GAAG,CAAE4W,IAAqC,IAAKA,IAAI,CAACvH,OAAO,CAAC,EACvEwH,eAAS,CAAClW,MAAM,EAAE8D,QAAQ,EAAE5E,QAAQ,CAAC,iBACpCoF,yBAAA,CAAAwC,aAAA,CAAC2M,SAAS,EACR;EAAA7M,IAAAA,SAAS,EAAC,wBAAwB;EAClC0M,IAAAA,OAAO,EAAE7S,UAAU,CAACT,MAAM,CAAC;MAC3BiF,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BpB,IAAAA,QAAQ,EAAEA,QAAAA;EAAQ,GAAA,CAErB,CACQ,CAAA;EAEf;;EC7EA,MAAM6R,qBAAqB,GAAG,GAAG,CAAA;EAEjC;;;EAGG;EACqB,SAAAQ,UAAU,CAIhCrW,KAA+B,EAAA;IAC/B,MAAM;MAAEyC,EAAE;MAAEmD,KAAK;EAAEN,IAAAA,QAAAA;EAAQ,GAAE,GAAGtF,KAAK,CAAA;EACrC,EAAA,oBACEwE,yBAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;EAAQvE,IAAAA,EAAE,EAAEA,EAAAA;KAAE,EACXmD,KAAK,EACLN,QAAQ,iBAAId,yBAAM,CAAAwC,aAAA,CAAA,MAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,UAAA;OAAY+O,qBAAqB,CAAQ,CAC/D,CAAA;EAEb;;EClBA;;;;EAIG;EACH,SAASS,gBAAgB,CAIvBtW,KAAqC,EAAA;IACrC,MAAM;MAAEE,MAAM;MAAE4C,QAAQ;EAAE2B,IAAAA,MAAAA;EAAM,GAAE,GAAGzE,KAAK,CAAA;EAC1C,EAAA,oBACEwE,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,mBAAA;EAAmB,GAAA,eAChCtC,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA,IAAA,8BAEGlE,QAAQ,IAAIA,QAAQ,CAACE,GAAG,iBACvBwB,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EACG,MAAM,0BAAQxC,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOlE,QAAQ,CAACE,GAAG,CAAQ,CAE7C,EACAyB,MAAM,iBAAID,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,QAAOvC,MAAM,CAAM,EAC5B,GAAA,CAAA,EACHvE,MAAM,iBAAIsE,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,EAAMoH,IAAI,CAACC,SAAS,CAACnO,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAO,CACnD,CAAA;EAEV;;ECtBA;;;;EAIG;EACqB,SAAA8V,wBAAwB,CAI9ChW,KAA6C,EAAA;IAC7C,MAAM;MACJyC,EAAE;MACFwO,UAAU;MACV9L,QAAQ;MACRsC,KAAK;MACLqF,WAAW;MACXN,mBAAmB;MACnBpH,QAAQ;MACRE,QAAQ;MACRpF,MAAM;MACN6I,QAAQ;MACR/E,QAAQ;EACR7D,IAAAA,QAAAA;EAAQ,GACT,GAAGH,KAAK,CAAA;EACT;IACA,MAAM;EAAE8S,IAAAA,YAAAA;EAAc,GAAA,GAAG3S,QAAQ,CAAC4S,SAAS,CAACC,eAAe,CAAA;EAC3D,EAAA,MAAMuD,QAAQ,GAAG,CAAA,EAAG9O,KAAW,CAAA,IAAA,CAAA,CAAC;EAChC,EAAA,MAAMM,UAAU,IAAGyG,8BAAwB,IAAItO,MAAM,CAAA,CAAA;IAErD,IAAI,CAAC6H,UAAU,EAAE;EACf,IAAA,oBAAOvD;EAAKsC,MAAAA,SAAS,EAAEmK,UAAAA;OAAa,EAAAlI,QAAQ,CAAO,CAAA;EACpD,GAAA;EAED,EAAA,oBACEvE,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAEmK,UAAAA;EAAU,GAAA,eACxBzM,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,KAAA;EAAK,GAAA,eAClBtC,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,0BAAA;EAA0B,GAAA,eACvCtC,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,YAAA;EAAY,GAAA,eACzBtC,yBAAA,CAAAwC,aAAA,CAAC8O,KAAK,EAAA;EAACrO,IAAAA,KAAK,EAAE8O,QAAQ;EAAEjR,IAAAA,QAAQ,EAAEA,QAAQ;MAAE7C,EAAE,EAAK,GAAAA;EAAY,GAAA,CAAA,eAC/D+B,yBAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA;EACEF,IAAAA,SAAS,EAAC,cAAc;EACxBlD,IAAAA,IAAI,EAAC,MAAM;MACXnB,EAAE,EAAK,CAAAA,EAAAA,EAAQ,CAAA,IAAA,CAAA;MACf8C,MAAM,EAAG3E,KAAK,IAAKkM,WAAW,CAAClM,KAAK,CAAC0T,MAAM,CAAC9R,KAAK,CAAC;EAClDgU,IAAAA,YAAY,EAAE/O,KAAAA;KAAK,CACnB,CACE,CACF,eACNjD,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,qCAAA;KAAqC,EAAEiC,QAAQ,CAAO,eACrEvE,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,UAAA;EAAU,GAAA,eACvBtC,yBAAA,CAAAwC,aAAA,CAAC8L,YAAY,EAAA;EACXhM,IAAAA,SAAS,EAAC,6BAA6B;EACvCmH,IAAAA,KAAK,EAAE;EAAEwI,MAAAA,MAAM,EAAE,GAAA;OAAK;MACtBtR,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BoO,IAAAA,OAAO,EAAEhH,mBAAmB,CAAC/E,KAAK,CAAC;EACnCzD,IAAAA,QAAQ,EAAEA,QAAAA;KACV,CAAA,CACE,CACF,CACF,CAAA;EAEV;;ECjDA,SAAS+O,SAAS,GAAA;IAKhB,OAAO;MACLL,6BAA6B;MAC7BC,sBAAsB;MACtBc,kBAAkB;MAClBC,uBAAuB;MACvBV,eAAe,EAAEA,eAAe,EAAW;MAC3Cc,iBAAiB;EACjB/D,IAAAA,wBAAwB,EAAE0F,gBAAgB;EAC1CiB,IAAAA,iBAAiB,EAAEhB,SAAS;MAC5B5F,aAAa;MACbG,kBAAkB;MAClBD,iBAAiB;MACjBkG,mBAAmB;EACnBrC,IAAAA,kBAAkB,EAAEwC,UAAU;EAC9B/R,IAAAA,wBAAwB,EAAEgS,gBAAgB;EAC1CN,IAAAA,wBAAAA;KACD,CAAA;EACH;;EChCA,SAASW,YAAY,CAACC,KAAa,EAAEC,IAAY,EAAA;IAC/C,MAAMxP,OAAO,GAAG,EAAE,CAAA;IAClB,KAAK,IAAI1F,CAAC,GAAGiV,KAAK,EAAEjV,CAAC,IAAIkV,IAAI,EAAElV,CAAC,EAAE,EAAE;MAClC0F,OAAO,CAAC6J,IAAI,CAAC;EAAE1O,MAAAA,KAAK,EAAEb,CAAC;EAAE8F,MAAAA,KAAK,EAAEqP,SAAG,CAACnV,CAAC,EAAE,CAAC,CAAA;EAAC,KAAE,CAAC,CAAA;EAC7C,GAAA;EACD,EAAA,OAAO0F,OAAO,CAAA;EAChB,CAAA;EAEA,SAAS0P,cAAc,CAAChW,KAAiB,EAAA;EACvC,EAAA,OAAO6H,MAAM,CAACoO,MAAM,CAACjW,KAAK,CAAC,CAAC8I,KAAK,CAAErH,KAAK,IAAKA,KAAK,KAAK,CAAC,CAAC,CAAC,CAAA;EAC5D,CAAA;EAEA,SAASyU,gBAAgB,CACvBlW,KAAiB,EACjBmW,IAAa,EACbC,YAAmE;EAAA,EAAA,IAAnEA;EAAAA,IAAAA,aAA+B,CAAC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;EAAA,GAAA;IAEnE,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,GAAG;MAAEC,IAAI;MAAEC,MAAM;EAAEC,IAAAA,MAAAA;EAAQ,GAAA,GAAG5W,KAAK,CAAA;IACxD,MAAM6W,IAAI,GAAG,CACX;EACEhU,IAAAA,IAAI,EAAE,MAAM;EACZiU,IAAAA,KAAK,EAAEV,UAAU;EACjB3U,IAAAA,KAAK,EAAE8U,IAAAA;EACR,GAAA,EACD;EAAE1T,IAAAA,IAAI,EAAE,OAAO;EAAEiU,IAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAErV,IAAAA,KAAK,EAAE+U,KAAAA;EAAO,GAAA,EAC/C;EAAE3T,IAAAA,IAAI,EAAE,KAAK;EAAEiU,IAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAErV,IAAAA,KAAK,EAAEgV,GAAAA;EAAK,GAAA,CAC8B,CAAA;EAC3E,EAAA,IAAIN,IAAI,EAAE;MACRU,IAAI,CAAC1G,IAAI,CACP;EAAEtN,MAAAA,IAAI,EAAE,MAAM;EAAEiU,MAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAErV,MAAAA,KAAK,EAAEiV,IAAAA;EAAI,KAAE,EAC7C;EAAE7T,MAAAA,IAAI,EAAE,QAAQ;EAAEiU,MAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAErV,MAAAA,KAAK,EAAEkV,MAAAA;EAAQ,KAAA,EACjD;EAAE9T,MAAAA,IAAI,EAAE,QAAQ;EAAEiU,MAAAA,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAAErV,MAAAA,KAAK,EAAEmV,MAAAA;EAAQ,KAAA,CAClD,CAAA;EACF,GAAA;EACD,EAAA,OAAOC,IAAI,CAAA;EACb,CAAA;EAsBA,SAASE,WAAW,CAgBQ,IAAA,EAAA;IAAA,IAZ1B;MACAlU,IAAI;MACJiU,KAAK;MACLrV,KAAK;MACLuV,MAAM;MACNC,MAAM;MACN7S,QAAQ;MACRC,QAAQ;MACRC,SAAS;MACTlF,QAAQ;MACRoF,MAAM;EACNC,IAAAA,OAAAA;KAC0B,GAAA,IAAA,CAAA;EAC1B,EAAA,MAAM/C,EAAE,GAAGuV,MAAM,GAAG,GAAG,GAAGpU,IAAI,CAAA;IAC9B,MAAM;EAAEqU,IAAAA,YAAAA;KAAc,GAAG9X,QAAQ,CAACgH,OAAO,CAAA;EACzC,EAAA,oBACE3C,yBAAC,CAAAwC,aAAA,CAAAiR,YAAY;EACX/X,IAAAA,MAAM,EAAE;EAAE0D,MAAAA,IAAI,EAAE,SAAA;OAAgB;EAChCnB,IAAAA,EAAE,EAAEA,EAAE;EACNqE,IAAAA,SAAS,EAAC,cAAc;EACxBO,IAAAA,OAAO,EAAE;QAAEK,WAAW,EAAEiP,YAAY,CAACkB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAA;OAAG;EAC1D3Q,IAAAA,WAAW,EAAEtD,IAAI;EACjBpB,IAAAA,KAAK,EAAEA,KAAK;EACZ2C,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,SAAS,EAAEA,SAAS;MACpBvE,QAAQ,EAAG0B,KAAU,IAAKuV,MAAM,CAACnU,IAAwB,EAAEpB,KAAK,CAAC;EACjE+C,IAAAA,MAAM,EAAEA,MAAM;EACdC,IAAAA,OAAO,EAAEA,OAAO;EAChBrF,IAAAA,QAAQ,EAAEA,QAAQ;EAClBsH,IAAAA,KAAK,EAAC,EAAA;EAAE,GAAA,CACR,CAAA;EAEN,CAAA;EAEA;;EAEG;EACH,SAASyQ,aAAa,CAgBC,KAAA,EAAA;IAAA,IAZrB;EACAhB,IAAAA,IAAI,GAAG,KAAK;EACZ/R,IAAAA,QAAQ,GAAG,KAAK;EAChBC,IAAAA,QAAQ,GAAG,KAAK;EAChBC,IAAAA,SAAS,GAAG,KAAK;MACjBgC,OAAO;MACP5E,EAAE;MACFtC,QAAQ;MACRoF,MAAM;MACNC,OAAO;MACP1E,QAAQ;EACR0B,IAAAA,KAAAA;KACqB,GAAA,KAAA,CAAA;EACrB,EAAA,MAAM,CAACzB,KAAK,EAAEG,QAAQ,CAAC,GAAGiX,gBAAU,CAClC,CAACpX,KAAiB,EAAEqX,MAA2B,KAAI;MACjD,OAAO;EAAE,MAAA,GAAGrX,KAAK;QAAE,GAAGqX,MAAAA;OAAQ,CAAA;EAChC,GAAC,EACDC,qBAAe,CAAC7V,KAAK,EAAE0U,IAAI,CAAC,CAC7B,CAAA;EAED1E,EAAAA,eAAS,CAAC,MAAK;MACb,IAAIhQ,KAAK,IAAIA,KAAK,KAAK8V,kBAAY,CAACvX,KAAK,EAAEmW,IAAI,CAAC,EAAE;EAChDhW,MAAAA,QAAQ,CAACmX,qBAAe,CAAC7V,KAAK,EAAE0U,IAAI,CAAC,CAAC,CAAA;EACvC,KAAA;KACF,EAAE,CAAC1U,KAAK,EAAEzB,KAAK,EAAEmW,IAAI,CAAC,CAAC,CAAA;EAExB1E,EAAAA,eAAS,CAAC,MAAK;EACb,IAAA,IAAIuE,cAAc,CAAChW,KAAK,CAAC,EAAE;EACzB;EACAD,MAAAA,QAAQ,CAACwX,kBAAY,CAACvX,KAAK,EAAEmW,IAAI,CAAC,CAAC,CAAA;EACpC,KAAA;KACF,EAAE,CAACnW,KAAK,EAAEmW,IAAI,EAAEpW,QAAQ,CAAC,CAAC,CAAA;IAE3B,MAAM4K,YAAY,GAAGC,iBAAW,CAC9B,CAAC4M,QAA0B,EAAE/V,KAAa,KAAI;EAC5CtB,IAAAA,QAAQ,CAAC;EAAE,MAAA,CAACqX,QAAQ,GAAG/V,KAAAA;EAAO,KAAA,CAAC,CAAA;KAChC,EACD,EAAE,CACH,CAAA;EAED,EAAA,MAAMgW,YAAY,GAAG7M,iBAAW,CAC7B/K,KAAoC,IAAI;MACvCA,KAAK,CAACC,cAAc,EAAE,CAAA;MACtB,IAAIsE,QAAQ,IAAIC,QAAQ,EAAE;EACxB,MAAA,OAAA;EACD,KAAA;EACD,IAAA,MAAMqT,UAAU,GAAGJ,qBAAe,CAAC,IAAIjB,IAAI,EAAE,CAACsB,MAAM,EAAE,EAAExB,IAAI,CAAC,CAAA;MAC7DhW,QAAQ,CAACuX,UAAU,CAAC,CAAA;KACrB,EACD,CAACtT,QAAQ,EAAEC,QAAQ,EAAE8R,IAAI,CAAC,CAC3B,CAAA;EAED,EAAA,MAAMyB,WAAW,GAAGhN,iBAAW,CAC5B/K,KAAoC,IAAI;MACvCA,KAAK,CAACC,cAAc,EAAE,CAAA;MACtB,IAAIsE,QAAQ,IAAIC,QAAQ,EAAE;EACxB,MAAA,OAAA;EACD,KAAA;EACDlE,IAAAA,QAAQ,CAACmX,qBAAe,CAAC,EAAE,EAAEnB,IAAI,CAAC,CAAC,CAAA;MACnCpW,QAAQ,CAACiC,SAAS,CAAC,CAAA;KACpB,EACD,CAACoC,QAAQ,EAAEC,QAAQ,EAAE8R,IAAI,EAAEpW,QAAQ,CAAC,CACrC,CAAA;EAED,EAAA,oBACE0D,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIF,IAAAA,SAAS,EAAC,aAAA;KAAa,EACxBmQ,gBAAgB,CACflW,KAAK,EACLmW,IAAI,EACJ7P,OAAO,CAAC8P,UAA0C,CACnD,CAAC5X,GAAG,CAAC,CAACqZ,SAAS,EAAEjX,CAAC,kBACjB6C,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIvH,IAAAA,GAAG,EAAEkC,CAAAA;EAAC,GAAA,eACR6C,yBAAA,CAAAwC,aAAA,CAAC8Q,WAAW,EACV;EAAAE,IAAAA,MAAM,EAAEvV,EAAE;EACVsV,IAAAA,MAAM,EAAErM,YAAY;SAChBkN,SAAS;EACbzT,IAAAA,QAAQ,EAAEA,QAAQ;EAClBC,IAAAA,QAAQ,EAAEA,QAAQ;EAClBjF,IAAAA,QAAQ,EAAEA,QAAQ;EAClBoF,IAAAA,MAAM,EAAEA,MAAM;EACdC,IAAAA,OAAO,EAAEA,OAAO;EAChBH,IAAAA,SAAS,EAAEA,SAAS,IAAI1D,CAAC,KAAK,CAAA;EAC9B,GAAA,CAAA,CAEL,CAAC,EACD,CAAC0F,OAAO,CAACwR,aAAa,KAAK,WAAW,GACnC,CAACxR,OAAO,CAACwR,aAAa,GACtB,IAAI,kBACNrU,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,eACExC,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;EAAG8R,IAAAA,IAAI,EAAC,GAAG;EAAChS,IAAAA,SAAS,EAAC,sBAAsB;EAAC0M,IAAAA,OAAO,EAAEgF,YAAAA;EAAY,GAAA,EAAA,KAAA,CAE9D,CAEP,EACA,CAACnR,OAAO,CAAC0R,eAAe,KAAK,WAAW,GACrC,CAAC1R,OAAO,CAAC0R,eAAe,GACxB,IAAI,kBACNvU,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA,IAAA,eACExC,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA;EACE8R,IAAAA,IAAI,EAAC,GAAG;EACRhS,IAAAA,SAAS,EAAC,2BAA2B;EACrC0M,IAAAA,OAAO,EAAEmF,WAAAA;EAGP,GAAA,EAAA,OAAA,CAAA,CAEP,CACE,CAAA;EAET;;ECzNA;;;;EAIG;EACH,SAASK,iBAAiB,CAIuB,IAAA,EAAA;IAAA,IAA/C;EAAE9B,IAAAA,IAAI,GAAG,IAAI;MAAE,GAAGlX,KAAAA;KAA6B,GAAA,IAAA,CAAA;IAC/C,MAAM;EAAEkY,IAAAA,aAAAA;EAAe,GAAA,GAAGlY,KAAK,CAACG,QAAQ,CAACgH,OAAO,CAAA;EAChD,EAAA,oBAAO3C,yBAAA,CAAAwC,aAAA,CAACkR,aAAa,EAAC;EAAAhB,IAAAA,IAAI,EAAEA,IAAI;MAAA,GAAMlX,KAAAA;EAAK,GAAA,CAAI,CAAA;EACjD;;ECVA;;;;EAIG;EACH,SAASiZ,cAAc,CAkBA,IAAA,EAAA;IAAA,IAdrB;MACA/Y,MAAM;MACN8D,QAAQ;MACRqD,OAAO;MACP5E,EAAE;MACFD,KAAK;MACL2C,QAAQ;MACRC,QAAQ;MACRqC,KAAK;EACLpC,IAAAA,SAAS,GAAG,KAAK;MACjBE,MAAM;MACNC,OAAO;MACP1E,QAAQ;EACRX,IAAAA,QAAAA;KACqB,GAAA,IAAA,CAAA;IACrB,MAAM4P,wBAAwB,GAAGxL,iBAAW,CAK1C,0BAA0B,EAAEpE,QAAQ,EAAEkH,OAAO,CAAC,CAAA;EAChD;EACA;EACA;EACA,EAAA,MAAM/B,QAAQ,GAAG4T,6BAAuB,CAAChZ,MAAM,CAAC,CAAA;EAEhD,EAAA,MAAMwL,YAAY,GAAGC,iBAAW,CAC7B/K,KAA0C,IACzCE,QAAQ,CAACF,KAAK,CAAC0T,MAAM,CAAC6E,OAAO,CAAC,EAChC,CAACrY,QAAQ,CAAC,CACX,CAAA;IAED,MAAMsY,UAAU,GAAGzN,iBAAW,CAC3B/K,KAAyC,IACxC2E,MAAM,CAAC9C,EAAE,EAAE7B,KAAK,CAAC0T,MAAM,CAAC6E,OAAO,CAAC,EAClC,CAAC5T,MAAM,EAAE9C,EAAE,CAAC,CACb,CAAA;IAED,MAAM4W,WAAW,GAAG1N,iBAAW,CAC5B/K,KAAyC,IACxC4E,OAAO,CAAC/C,EAAE,EAAE7B,KAAK,CAAC0T,MAAM,CAAC6E,OAAO,CAAC,EACnC,CAAC3T,OAAO,EAAE/C,EAAE,CAAC,CACd,CAAA;EAED,EAAA,oBACE+B,yBAAK,CAAAwC,aAAA,CAAA,KAAA,EAAA;MAAAF,SAAS,EAAE,YAAY3B,QAAQ,IAAIC,QAAQ,GAAG,UAAU,GAAG,EAAI,CAAA,CAAA;KAAA,EACjElF,MAAM,CAAC0N,WAAW,iBACjBpJ,yBAAC,CAAAwC,aAAA,CAAA+I,wBAAwB,EACvB;MAAAtN,EAAE,EAAEA,EAAE,GAAG,eAAe;MACxBmL,WAAW,EAAE1N,MAAM,CAAC0N,WAAW;EAC/B1N,IAAAA,MAAM,EAAEA,MAAM;EACd8D,IAAAA,QAAQ,EAAEA,QAAQ;EAClB7D,IAAAA,QAAQ,EAAEA,QAAAA;MAEb,eACDqE,yBAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA,IAAA,eACExC,yBACE,CAAAwC,aAAA,CAAA,OAAA,EAAA;EAAApD,IAAAA,IAAI,EAAC,UAAU;EACfnB,IAAAA,EAAE,EAAEA,EAAE;EACNyC,IAAAA,IAAI,EAAEzC,EAAE;MACR0W,OAAO,EAAE,OAAO3W,KAAK,KAAK,WAAW,GAAG,KAAK,GAAGA,KAAK;EACrD8C,IAAAA,QAAQ,EAAEA,QAAQ;MAClBH,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BsP,IAAAA,SAAS,EAAErP,SAAS;EACpBvE,IAAAA,QAAQ,EAAE4K,YAAY;EACtBnG,IAAAA,MAAM,EAAE6T,UAAU;EAClB5T,IAAAA,OAAO,EAAE6T,WAAAA;EACT,GAAA,CAAA,eACF7U,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOS,KAAK,CAAQ,CACd,CACJ,CAAA;EAEV;;ECnFA,SAAS6R,WAAW,CAAC9W,KAAU,EAAE+W,QAAe,EAAEC,GAAU,EAAA;EAC1D,EAAA,MAAMC,EAAE,GAAGD,GAAG,CAAC/L,OAAO,CAACjL,KAAK,CAAC,CAAA;IAC7B,MAAMkX,OAAO,GAAGH,QAAQ,CAACjX,KAAK,CAAC,CAAC,EAAEmX,EAAE,CAAC,CAAC3R,MAAM,CAACtF,KAAK,EAAE+W,QAAQ,CAACjX,KAAK,CAACmX,EAAE,CAAC,CAAC,CAAA;EACvE;EACA;IACA,OAAOC,OAAO,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKC,MAAM,CAACN,GAAG,CAAC/L,OAAO,CAACmM,CAAC,CAAC,GAAGJ,GAAG,CAAC/L,OAAO,CAACoM,CAAC,CAAC,CAAC,CAAC,CAAA;EACxE,CAAA;EAEA,SAASE,aAAa,CAACvX,KAAU,EAAE+W,QAAe,EAAA;IAChD,OAAOA,QAAQ,CAACzX,MAAM,CAAEgI,CAAC,IAAKA,CAAC,KAAKtH,KAAK,CAAC,CAAA;EAC5C,CAAA;EAEA;;;;EAIG;EACH,SAASwX,gBAAgB,CAYF,IAAA,EAAA;IAAA,IARrB;MACAvX,EAAE;MACF0C,QAAQ;EACRkC,IAAAA,OAAO,EAAE;EAAE4S,MAAAA,MAAM,GAAG,KAAK;QAAEvS,WAAW;EAAEwS,MAAAA,YAAAA;OAAc;MACtD1X,KAAK;EACL6C,IAAAA,SAAS,GAAG,KAAK;MACjBD,QAAQ;EACRtE,IAAAA,QAAAA;KACqB,GAAA,IAAA,CAAA;EACrB,EAAA,oBACE0D,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,YAAY;EAACrE,IAAAA,EAAE,EAAEA,EAAAA;OAC7BpD,KAAK,CAACC,OAAO,CAACoI,WAAW,CAAC,IACzBA,WAAW,CAACnI,GAAG,CAAC,CAAC+J,MAAM,EAAEjI,KAAK,KAAI;EAChC,IAAA,MAAM8X,OAAO,GAAG3W,KAAK,CAACiL,OAAO,CAACnE,MAAM,CAAC9G,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;EAClD,IAAA,MAAM2X,YAAY,GAChB9a,KAAK,CAACC,OAAO,CAAC4a,YAAY,CAAC,IAC3BA,YAAY,CAACzM,OAAO,CAACnE,MAAM,CAAC9G,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;MAC1C,MAAM4X,WAAW,GACfjV,QAAQ,IAAIgV,YAAY,IAAI/U,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAA;MAExD,MAAMsG,YAAY,GAAI9K,KAAoC,IAAI;EAC5D,MAAA,MAAM4Y,GAAG,GAAG9R,WAAW,CAACnI,GAAG,CAAC,KAAA,IAAA;UAAA,IAAC;EAAEiD,UAAAA,KAAAA;WAAO,GAAA,KAAA,CAAA;EAAA,QAAA,OAAKA,KAAK,CAAA;SAAC,CAAA,CAAA;EACjD,MAAA,IAAI5B,KAAK,CAAC0T,MAAM,CAAC6E,OAAO,EAAE;UACxBrY,QAAQ,CAACwY,WAAW,CAAChQ,MAAM,CAAC9G,KAAK,EAAEA,KAAK,EAAEgX,GAAG,CAAC,CAAC,CAAA;EAChD,OAAA,MAAM;UACL1Y,QAAQ,CAACiZ,aAAa,CAACzQ,MAAM,CAAC9G,KAAK,EAAEA,KAAK,CAAC,CAAC,CAAA;EAC7C,OAAA;OACF,CAAA;EAED,IAAA,MAAM6X,QAAQ,gBACZ7V,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,eACExC,yBAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA;EACEpD,MAAAA,IAAI,EAAC,UAAU;EACfnB,MAAAA,EAAE,GAAKA,EAAAA,EAAE,IAAI6G,MAAM,CAAC9G,KAAO,CAAA,CAAA;EAC3B0C,MAAAA,IAAI,EAAEzC,EAAE;EACR0W,MAAAA,OAAO,EAAEA,OAAO;EAChBhU,MAAAA,QAAQ,EAAEA,QAAQ,IAAIgV,YAAY,IAAI/U,QAAQ;EAC9CsP,MAAAA,SAAS,EAAErP,SAAS,IAAIhE,KAAK,KAAK,CAAC;EACnCP,MAAAA,QAAQ,EAAE4K,YAAAA;EACV,KAAA,CAAA,eACFlH,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOsC,MAAM,CAAC7B,KAAK,CAAQ,CAE9B,CAAA;EACD,IAAA,OAAOwS,MAAM,gBACXzV;QACE/E,GAAG,EAAE6J,MAAM,CAAC9G,KAAK;QACjBsE,SAAS,EAAE,mBAAmBsT,WAAa,CAAA,CAAA;OAAA,EAE1CC,QAAQ,CACH,gBAER7V;QAAK/E,GAAG,EAAE6J,MAAM,CAAC9G,KAAK;QAAEsE,SAAS,EAAE,YAAYsT,WAAa,CAAA,CAAA;OAAA,eAC1D5V,yBAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA,IAAA,EAAQqT,QAAQ,CAAS,CAE5B,CAAA;EACH,GAAC,CAAC,CACA,CAAA;EAEV;;EC9EA;;;;EAIG;EACqB,SAAAC,WAAW,CAIjCta,KAA2B,EAAA;IAC3B,MAAM;MAAEmF,QAAQ;MAAEC,QAAQ;MAAEiC,OAAO;EAAElH,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IACvD,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBACE7C,yBAAC,CAAAwC,aAAA,CAAA8M,iBAAiB,EAChB;EAAAlQ,IAAAA,IAAI,EAAC,OAAO;EAAA,IAAA,GACR5D,KAAK;MACTmF,QAAQ,EAAEA,QAAQ,IAAIC,QAAAA;EAAQ,GAAA,CAC9B,CAAA;EAEN;;ECvBA;;;;EAIG;EACqB,SAAAmV,UAAU,CAIhCva,KAA2B,EAAA;IAC3B,MAAM;MAAEc,QAAQ;MAAEuG,OAAO;EAAElH,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IAC7C,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,MAAMqE,YAAY,GAAGC,iBAAW,CAC7BnJ,KAAwB,IAAK1B,QAAQ,CAAC0B,KAAK,IAAIO,SAAS,CAAC,EAC1D,CAACjC,QAAQ,CAAC,CACX,CAAA;EAED,EAAA,oBAAO0D,yBAAC,CAAAwC,aAAA,CAAA8M,iBAAiB,EAAC;EAAAlQ,IAAAA,IAAI,EAAC,MAAM;EAAK,IAAA,GAAA5D,KAAK;EAAEc,IAAAA,QAAQ,EAAE4K,YAAAA;MAAgB,CAAA;EAC7E;;ECpBA;;;;EAIG;EACqB,SAAA8O,cAAc,CAIpCxa,KAA2B,EAAA;IAC3B,MAAM;MAAEc,QAAQ;MAAE0B,KAAK;MAAE6E,OAAO;EAAElH,IAAAA,QAAAA;EAAQ,GAAE,GAAGH,KAAK,CAAA;IACpD,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBACE7C,yBAAA,CAAAwC,aAAA,CAAC8M,iBAAiB,EAAA;EAChBlQ,IAAAA,IAAI,EAAC,gBAAgB;EACjB,IAAA,GAAA5D,KAAK;EACTwC,IAAAA,KAAK,EAAEiY,gBAAU,CAACjY,KAAK,CAAC;MACxB1B,QAAQ,EAAG0B,KAAK,IAAK1B,QAAQ,CAAC4Z,gBAAU,CAAClY,KAAK,CAAC,CAAA;EAAC,GAAA,CAChD,CAAA;EAEN;;EC1BA;;;EAGG;EACqB,SAAAmY,WAAW,CAIjC3a,KAA2B,EAAA;IAC3B,MAAM;MAAEqH,OAAO;EAAElH,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBAAO7C,yBAAA,CAAAwC,aAAA,CAAC8M,iBAAiB,EAAC;EAAAlQ,IAAAA,IAAI,EAAC,OAAO;MAAA,GAAK5D,KAAAA;EAAK,GAAA,CAAI,CAAA;EACtD;;ECfA,SAAS4a,gBAAgB,CAACC,OAAe,EAAE3V,IAAY,EAAA;IACrD,IAAI2V,OAAO,KAAK,IAAI,EAAE;EACpB,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,OAAOA,OAAO,CAAC7O,OAAO,CAAC,SAAS,EAAW,CAAA8O,MAAAA,EAAAA,kBAAkB,CAAC5V,IAAI,CAAC,CAAA,OAAA,CAAS,CAAC,CAAA;EAC/E,CAAA;EASA,SAAS6V,WAAW,CAACC,IAAU,EAAA;IAC7B,MAAM;MAAE9V,IAAI;MAAE+V,IAAI;EAAErX,IAAAA,IAAAA;EAAI,GAAE,GAAGoX,IAAI,CAAA;EACjC,EAAA,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;EACrC,IAAA,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAU,EAAE,CAAA;MACtCF,MAAM,CAACG,OAAO,GAAGJ,MAAM,CAAA;EACvBC,IAAAA,MAAM,CAACI,MAAM,GAAI7a,KAAK,IAAI;EAAA,MAAA,IAAA,aAAA,CAAA;QACxB,IAAI,QAAA,CAAA,aAAA,GAAOA,KAAK,CAAC0T,MAAM,kDAAZ,aAAcoH,CAAAA,MAAM,CAAK,KAAA,QAAQ,EAAE;EAC5CP,QAAAA,OAAO,CAAC;YACNN,OAAO,EAAED,gBAAgB,CAACha,KAAK,CAAC0T,MAAM,CAACoH,MAAM,EAAExW,IAAI,CAAC;YACpDA,IAAI;YACJ+V,IAAI;EACJrX,UAAAA,IAAAA;EACD,SAAA,CAAC,CAAA;EACH,OAAA,MAAM;EACLuX,QAAAA,OAAO,CAAC;EACNN,UAAAA,OAAO,EAAE,IAAI;YACb3V,IAAI;YACJ+V,IAAI;EACJrX,UAAAA,IAAAA;EACD,SAAA,CAAC,CAAA;EACH,OAAA;OACF,CAAA;EACDyX,IAAAA,MAAM,CAACM,aAAa,CAACX,IAAI,CAAC,CAAA;EAC5B,GAAC,CAAC,CAAA;EACJ,CAAA;EAEA,SAASY,YAAY,CAACC,KAAe,EAAA;EACnC,EAAA,OAAOX,OAAO,CAAC1B,GAAG,CAACna,KAAK,CAACyc,IAAI,CAACD,KAAK,CAAC,CAACtc,GAAG,CAACwb,WAAW,CAAC,CAAC,CAAA;EACxD,CAAA;EAEA,SAASgB,SAAS,CAIjB,IAAA,EAAA;IAAA,IAJkB;EACjBC,IAAAA,SAAAA;KAGD,GAAA,IAAA,CAAA;EACC,EAAA,IAAIA,SAAS,CAAC1Y,MAAM,KAAK,CAAC,EAAE;EAC1B,IAAA,OAAO,IAAI,CAAA;EACZ,GAAA;EACD,EAAA,oBACEkB,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIF,IAAAA,SAAS,EAAC,WAAA;KACX,EAAAkV,SAAS,CAACzc,GAAG,CAAC,CAAC0c,QAAQ,EAAExc,GAAG,KAAI;MAC/B,MAAM;QAAEyF,IAAI;QAAE+V,IAAI;EAAErX,MAAAA,IAAAA;EAAI,KAAE,GAAGqY,QAAQ,CAAA;EACrC,IAAA,oBACEzX,yBAAA,CAAAwC,aAAA,CAAA,IAAA,EAAA;EAAIvH,MAAAA,GAAG,EAAEA,GAAAA;OAAG,eACV+E,yBAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA,IAAA,EAAS9B,IAAI,CAAU,QAAGtB,IAAI,QAAIqX,IAAI,EACnC,SAAA,CAAA,CAAA;EAET,GAAC,CAAC,CACC,CAAA;EAET,CAAA;EAEA,SAASiB,eAAe,CAACC,QAAkB,EAAA;EACzC,EAAA,OAAOA,QAAQ,CACZra,MAAM,CAAE+Y,OAAO,IAAK,OAAOA,OAAO,KAAK,WAAW,CAAC,CACnDtb,GAAG,CAAEsb,OAAO,IAAI;MACf,MAAM;QAAEuB,IAAI;EAAElX,MAAAA,IAAAA;EAAI,KAAE,GAAGmX,mBAAa,CAACxB,OAAO,CAAC,CAAA;MAC7C,OAAO;EACL3V,MAAAA,IAAI,EAAEA,IAAI;QACV+V,IAAI,EAAEmB,IAAI,CAACnB,IAAI;QACfrX,IAAI,EAAEwY,IAAI,CAACxY,IAAAA;OACZ,CAAA;EACH,GAAC,CAAC,CAAA;EACN,CAAA;EAEA;;;EAGG;EACH,SAAS0Y,UAAU,CAaI,KAAA,EAAA;IAAA,IATrB;MACA9U,QAAQ;MACR/E,EAAE;MACF2C,QAAQ;MACRD,QAAQ;MACRrE,QAAQ;MACR0B,KAAK;EACL6C,IAAAA,SAAS,GAAG,KAAK;EACjBgC,IAAAA,OAAAA;KACqB,GAAA,KAAA,CAAA;IACrB,MAAMkV,kBAAkB,GAAGC,aAAO,CAChC,MACEnd,KAAK,CAACC,OAAO,CAACkD,KAAK,CAAC,GAAG0Z,eAAe,CAAC1Z,KAAK,CAAC,GAAG0Z,eAAe,CAAC,CAAC1Z,KAAK,CAAC,CAAC,EAC1E,CAACA,KAAK,CAAC,CACR,CAAA;IACD,MAAM,CAACwZ,SAAS,EAAES,YAAY,CAAC,GAC7BjR,cAAQ,CAAiB+Q,kBAAkB,CAAC,CAAA;EAE9C,EAAA,MAAM7Q,YAAY,GAAGC,iBAAW,CAC7B/K,KAAoC,IAAI;EACvC,IAAA,IAAI,CAACA,KAAK,CAAC0T,MAAM,CAACuH,KAAK,EAAE;EACvB,MAAA,OAAA;EACD,KAAA;MACDD,YAAY,CAAChb,KAAK,CAAC0T,MAAM,CAACuH,KAAK,CAAC,CAACa,IAAI,CAAEC,cAAc,IAAI;QACvDF,YAAY,CAACE,cAAc,CAAC,CAAA;QAC5B,MAAMC,QAAQ,GAAGD,cAAc,CAACpd,GAAG,CAAE0c,QAAQ,IAAKA,QAAQ,CAACpB,OAAO,CAAC,CAAA;EACnE,MAAA,IAAIrT,QAAQ,EAAE;UACZ1G,QAAQ,CAAC8b,QAAQ,CAAC,CAAA;EACnB,OAAA,MAAM;EACL9b,QAAAA,QAAQ,CAAC8b,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;EACtB,OAAA;EACH,KAAC,CAAC,CAAA;EACJ,GAAC,EACD,CAACpV,QAAQ,EAAE1G,QAAQ,CAAC,CACrB,CAAA;IAED,oBACE0D,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA,IAAA,eACExC,yBAAA,CAAAwC,aAAA,CAAA,GAAA,EAAA,IAAA,eACExC,yBACE,CAAAwC,aAAA,CAAA,OAAA,EAAA;EAAAvE,IAAAA,EAAE,EAAEA,EAAE;EACNyC,IAAAA,IAAI,EAAEzC,EAAE;EACRmB,IAAAA,IAAI,EAAC,MAAM;MACXuB,QAAQ,EAAEC,QAAQ,IAAID,QAAQ;EAC9BrE,IAAAA,QAAQ,EAAE4K,YAAY;EACtB8K,IAAAA,YAAY,EAAC,EAAE;EACf9B,IAAAA,SAAS,EAAErP,SAAS;EACpBmC,IAAAA,QAAQ,EAAEA,QAAQ;MAClBqV,MAAM,EAAExV,OAAO,CAACwV,MAAM,GAAGC,MAAM,CAACzV,OAAO,CAACwV,MAAM,CAAC,GAAG9Z,SAAAA;KAAS,CAC3D,CACA,eACJyB,yBAAC,CAAAwC,aAAA,CAAA+U,SAAS;EAACC,IAAAA,SAAS,EAAEA,SAAAA;EAAa,GAAA,CAAA,CAC/B,CAAA;EAEV;;EC/IA;;;;EAIG;EACH,SAASe,YAAY,CAIgB,IAAA,EAAA;IAAA,IAAnC;MAAEta,EAAE;EAAED,IAAAA,KAAAA;KAA6B,GAAA,IAAA,CAAA;EACnC,EAAA,oBACEgC,yBAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA;EACEpD,IAAAA,IAAI,EAAC,QAAQ;EACbnB,IAAAA,EAAE,EAAEA,EAAE;EACNyC,IAAAA,IAAI,EAAEzC,EAAE;EACRD,IAAAA,KAAK,EAAE,OAAOA,KAAK,KAAK,WAAW,GAAG,EAAE,GAAGA,KAAAA;EAAK,GAAA,CAChD,CAAA;EAEN;;ECjBA;;;EAGG;EACqB,SAAAwa,cAAc,CAIpChd,KAA2B,EAAA;IAC3B,MAAM;MAAEqH,OAAO;EAAElH,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBAAO7C,yBAAA,CAAAwC,aAAA,CAAC8M,iBAAiB,EAAC;EAAAlQ,IAAAA,IAAI,EAAC,UAAU;MAAA,GAAK5D,KAAAA;EAAK,GAAA,CAAI,CAAA;EACzD;;ECjBA;;;;EAIG;EACH,SAASid,WAAW,CAeG,IAAA,EAAA;IAAA,IAXrB;MACA5V,OAAO;MACP7E,KAAK;MACL8C,QAAQ;MACRH,QAAQ;MACRC,QAAQ;EACRC,IAAAA,SAAS,GAAG,KAAK;MACjBE,MAAM;MACNC,OAAO;MACP1E,QAAQ;EACR2B,IAAAA,EAAAA;KACqB,GAAA,IAAA,CAAA;EACrB;IACA,MAAMyC,IAAI,GAAGgY,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,EAAE,CAAA;IACrC,MAAM;MAAE1V,WAAW;MAAEwS,YAAY;EAAED,IAAAA,MAAAA;EAAM,GAAE,GAAG5S,OAAO,CAAA;EACrD;EACA;IAEA,MAAM+R,UAAU,GAAGzN,iBAAW,CAC3B/K,KAAmC,IAAK2E,MAAM,CAAC9C,EAAE,EAAE7B,KAAK,CAAC0T,MAAM,CAAC9R,KAAK,CAAC,EACvE,CAAC+C,MAAM,EAAE9C,EAAE,CAAC,CACb,CAAA;IAED,MAAM4W,WAAW,GAAG1N,iBAAW,CAC5B/K,KAAmC,IAAK4E,OAAO,CAAC/C,EAAE,EAAE7B,KAAK,CAAC0T,MAAM,CAAC9R,KAAK,CAAC,EACxE,CAACgD,OAAO,EAAE/C,EAAE,CAAC,CACd,CAAA;EAED,EAAA,oBACE+B,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,mBAAmB;EAACrE,IAAAA,EAAE,EAAEA,EAAAA;OACpCpD,KAAK,CAACC,OAAO,CAACoI,WAAW,CAAC,IACzBA,WAAW,CAACnI,GAAG,CAAC,CAAC+J,MAAM,EAAE3H,CAAC,KAAI;EAC5B,IAAA,MAAMwX,OAAO,GAAG7P,MAAM,CAAC9G,KAAK,KAAKA,KAAK,CAAA;EACtC,IAAA,MAAM2X,YAAY,GAChB9a,KAAK,CAACC,OAAO,CAAC4a,YAAY,CAAC,IAC3BA,YAAY,CAACzM,OAAO,CAACnE,MAAM,CAAC9G,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;MAC1C,MAAM4X,WAAW,GACfjV,QAAQ,IAAIgV,YAAY,IAAI/U,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAA;MAExD,MAAMsG,YAAY,GAAG,MAAM5K,QAAQ,CAACwI,MAAM,CAAC9G,KAAK,CAAC,CAAA;EAEjD,IAAA,MAAM6a,KAAK,gBACT7Y,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,eACExC,yBACE,CAAAwC,aAAA,CAAA,OAAA,EAAA;EAAApD,MAAAA,IAAI,EAAC,OAAO;EACZnB,MAAAA,EAAE,EAAE,CAAGA,EAAAA,EAAE,IAAI6G,MAAM,CAAC9G,KAAK,CAAE,CAAA;EAC3B2W,MAAAA,OAAO,EAAEA,OAAO;EAChBjU,MAAAA,IAAI,EAAEA,IAAI;EACVI,MAAAA,QAAQ,EAAEA,QAAQ;QAClB9C,KAAK,EAAE8G,MAAM,CAAC9G,KAAK;EACnB2C,MAAAA,QAAQ,EAAEA,QAAQ,IAAIgV,YAAY,IAAI/U,QAAQ;EAC9CsP,MAAAA,SAAS,EAAErP,SAAS,IAAI1D,CAAC,KAAK,CAAC;EAC/Bb,MAAAA,QAAQ,EAAE4K,YAAY;EACtBnG,MAAAA,MAAM,EAAE6T,UAAU;EAClB5T,MAAAA,OAAO,EAAE6T,WAAAA;EACT,KAAA,CAAA,eACF7U,yBAAA,CAAAwC,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOsC,MAAM,CAAC7B,KAAK,CAAQ,CAE9B,CAAA;EAED,IAAA,OAAOwS,MAAM,gBACXzV;QAAO/E,GAAG,EAAE6J,MAAM,CAAC9G,KAAK;QAAEsE,SAAS,EAAE,gBAAgBsT,WAAa,CAAA,CAAA;OAAA,EAC/DiD,KAAK,CACA,gBAER7Y;QAAK/E,GAAG,EAAE6J,MAAM,CAAC9G,KAAK;QAAEsE,SAAS,EAAE,SAASsT,WAAa,CAAA,CAAA;OAAA,eACvD5V,yBAAA,CAAAwC,aAAA,CAAA,OAAA,EAAA,IAAA,EAAQqW,KAAK,CAAS,CAEzB,CAAA;EACH,GAAC,CAAC,CACA,CAAA;EAEV;;ECjFA;;;;EAIG;EACqB,SAAAC,WAAW,CAIjCtd,KAA2B,EAAA;IAC3B,MAAM;MACJwC,KAAK;EACLrC,IAAAA,QAAQ,EAAE;EACR4S,MAAAA,SAAS,EAAE;EAAEe,QAAAA,iBAAAA;EAAmB,OAAA;EAAA,KAAA;EAEnC,GAAA,GAAG9T,KAAK,CAAA;EACT,EAAA,oBACEwE,yBAAA,CAAAwC,aAAA,CAAA,KAAA,EAAA;EAAKF,IAAAA,SAAS,EAAC,qBAAA;EAAqB,GAAA,eAClCtC,yBAAA,CAAAwC,aAAA,CAAC8M,iBAAiB,EAAC;EAAAlQ,IAAAA,IAAI,EAAC,OAAO;MAAA,GAAK5D,KAAAA;EAAS,GAAA,CAAA,eAC7CwE,yBAAM,CAAAwC,aAAA,CAAA,MAAA,EAAA;EAAAF,IAAAA,SAAS,EAAC,YAAA;KAAY,EAAEtE,KAAK,CAAQ,CACvC,CAAA;EAEV;;ECrBA,SAAS+a,QAAQ,CACf3c,KAA8C,EAC9C4G,QAAiB,EAAA;EAEjB,EAAA,IAAIA,QAAQ,EAAE;EACZ,IAAA,OAAOnI,KAAK,CAACyc,IAAI,CAAElb,KAAK,CAAC0T,MAA4B,CAACjN,OAAO,CAAC,CAC3D/E,KAAK,EAAE,CACPR,MAAM,CAAE0H,CAAC,IAAKA,CAAC,CAAC+P,QAAQ,CAAC,CACzBha,GAAG,CAAEiK,CAAC,IAAKA,CAAC,CAAChH,KAAK,CAAC,CAAA;EACvB,GAAA;EACD,EAAA,OAAQ5B,KAAK,CAAC0T,MAA4B,CAAC9R,KAAK,CAAA;EAClD,CAAA;EAEA;;;;EAIG;EACH,SAASyV,YAAY,CAkBE,IAAA,EAAA;IAAA,IAdrB;MACA/X,MAAM;MACNuC,EAAE;MACF4E,OAAO;MACP7E,KAAK;MACL8C,QAAQ;MACRH,QAAQ;MACRC,QAAQ;EACRoC,IAAAA,QAAQ,GAAG,KAAK;EAChBnC,IAAAA,SAAS,GAAG,KAAK;MACjBvE,QAAQ;MACRyE,MAAM;MACNC,OAAO;EACP0B,IAAAA,WAAAA;KACqB,GAAA,IAAA,CAAA;IACrB,MAAM;MAAEQ,WAAW;EAAEwS,IAAAA,YAAAA;EAAc,GAAA,GAAG7S,OAAO,CAAA;EAC7C,EAAA,MAAMkN,UAAU,GAAG/M,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAA;EAErC,EAAA,MAAM6R,WAAW,GAAG1N,iBAAW,CAC5B/K,KAAoC,IAAI;EACvC,IAAA,MAAMgc,QAAQ,GAAGW,QAAQ,CAAC3c,KAAK,EAAE4G,QAAQ,CAAC,CAAA;EAC1C,IAAA,OAAOhC,OAAO,CAAC/C,EAAE,EAAE+a,wBAAkB,CAACtd,MAAM,EAAE0c,QAAQ,EAAEvV,OAAO,CAAC,CAAC,CAAA;EACnE,GAAC,EACD,CAAC7B,OAAO,EAAE/C,EAAE,EAAEvC,MAAM,EAAEsH,QAAQ,EAAEH,OAAO,CAAC,CACzC,CAAA;EAED,EAAA,MAAM+R,UAAU,GAAGzN,iBAAW,CAC3B/K,KAAoC,IAAI;EACvC,IAAA,MAAMgc,QAAQ,GAAGW,QAAQ,CAAC3c,KAAK,EAAE4G,QAAQ,CAAC,CAAA;EAC1C,IAAA,OAAOjC,MAAM,CAAC9C,EAAE,EAAE+a,wBAAkB,CAACtd,MAAM,EAAE0c,QAAQ,EAAEvV,OAAO,CAAC,CAAC,CAAA;EAClE,GAAC,EACD,CAAC9B,MAAM,EAAE9C,EAAE,EAAEvC,MAAM,EAAEsH,QAAQ,EAAEH,OAAO,CAAC,CACxC,CAAA;EAED,EAAA,MAAMqE,YAAY,GAAGC,iBAAW,CAC7B/K,KAAqC,IAAI;EACxC,IAAA,MAAMgc,QAAQ,GAAGW,QAAQ,CAAC3c,KAAK,EAAE4G,QAAQ,CAAC,CAAA;MAC1C,OAAO1G,QAAQ,CAAC0c,wBAAkB,CAACtd,MAAM,EAAE0c,QAAQ,EAAEvV,OAAO,CAAC,CAAC,CAAA;KAC/D,EACD,CAACvG,QAAQ,EAAEZ,MAAM,EAAEsH,QAAQ,EAAEH,OAAO,CAAC,CACtC,CAAA;EAED,EAAA,oBACE7C,yBACE,CAAAwC,aAAA,CAAA,QAAA,EAAA;EAAAvE,IAAAA,EAAE,EAAEA,EAAE;EACNyC,IAAAA,IAAI,EAAEzC,EAAE;EACR+E,IAAAA,QAAQ,EAAEA,QAAQ;EAClBV,IAAAA,SAAS,EAAC,cAAc;MACxBtE,KAAK,EAAE,OAAOA,KAAK,KAAK,WAAW,GAAG+R,UAAU,GAAG/R,KAAK;EACxD8C,IAAAA,QAAQ,EAAEA,QAAQ;MAClBH,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;EAC9BsP,IAAAA,SAAS,EAAErP,SAAS;EACpBE,IAAAA,MAAM,EAAE6T,UAAU;EAClB5T,IAAAA,OAAO,EAAE6T,WAAW;EACpBvY,IAAAA,QAAQ,EAAE4K,YAAAA;EAAY,GAAA,EAErB,CAAClE,QAAQ,IAAItH,MAAM,CAAC+K,OAAO,KAAKlI,SAAS,iBACxCyB,yBAAA,CAAAwC,aAAA,CAAA,QAAA,EAAA;EAAQxE,IAAAA,KAAK,EAAC,EAAA;EAAI,GAAA,EAAA0E,WAAW,CAC9B,EACA7H,KAAK,CAACC,OAAO,CAACoI,WAAW,CAAC,IACzBA,WAAW,CAACnI,GAAG,CAAC,CAAA,KAAA,EAAmBoC,CAAC,KAAI;MAAA,IAAvB;QAAEa,KAAK;EAAEiF,MAAAA,KAAAA;OAAO,GAAA,KAAA,CAAA;EAC/B,IAAA,MAAMtC,QAAQ,GAAG+U,YAAY,IAAIA,YAAY,CAACzM,OAAO,CAACjL,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;EAClE,IAAA,oBACEgC,yBAAQ,CAAAwC,aAAA,CAAA,QAAA,EAAA;EAAAvH,MAAAA,GAAG,EAAEkC,CAAC;EAAEa,MAAAA,KAAK,EAAEA,KAAK;EAAE2C,MAAAA,QAAQ,EAAEA,QAAAA;SACrCsC,KAAK,CACC,CAAA;EAEb,GAAC,CAAC,CACG,CAAA;EAEb;;EC7FA;;;EAGG;EACH,SAASgW,cAAc,CAgBA,IAAA,EAAA;IAAA,IAZrB;MACAhb,EAAE;MACF4E,OAAO,GAAG,EAAE;MACZH,WAAW;MACX1E,KAAK;MACL8C,QAAQ;MACRH,QAAQ;MACRC,QAAQ;EACRC,IAAAA,SAAS,GAAG,KAAK;MACjBvE,QAAQ;MACRyE,MAAM;EACNC,IAAAA,OAAAA;KACqB,GAAA,IAAA,CAAA;IACrB,MAAMkG,YAAY,GAAGC,iBAAW,CAC9B,KAAA,IAAA;MAAA,IAAC;EAAE2I,MAAAA,MAAM,EAAE;EAAE9R,QAAAA,KAAAA;EAAK,OAAA;OAA4C,GAAA,KAAA,CAAA;MAAA,OAC5D1B,QAAQ,CAAC0B,KAAK,KAAK,EAAE,GAAG6E,OAAO,CAACkN,UAAU,GAAG/R,KAAK,CAAC,CAAA;EAAA,GAAA,EACrD,CAAC1B,QAAQ,EAAEuG,OAAO,CAACkN,UAAU,CAAC,CAC/B,CAAA;IAED,MAAM6E,UAAU,GAAGzN,iBAAW,CAC5B,KAAA,IAAA;MAAA,IAAC;EAAE2I,MAAAA,MAAM,EAAE;EAAE9R,QAAAA,KAAAA;EAAO,OAAA;OAAmC,GAAA,KAAA,CAAA;EAAA,IAAA,OACrD+C,MAAM,CAAC9C,EAAE,EAAED,KAAK,CAAC,CAAA;EAAA,GAAA,EACnB,CAAC+C,MAAM,EAAE9C,EAAE,CAAC,CACb,CAAA;IAED,MAAM4W,WAAW,GAAG1N,iBAAW,CAC7B,KAAA,IAAA;MAAA,IAAC;EAAE2I,MAAAA,MAAM,EAAE;EAAE9R,QAAAA,KAAAA;EAAO,OAAA;OAAmC,GAAA,KAAA,CAAA;EAAA,IAAA,OACrDgD,OAAO,CAAC/C,EAAE,EAAED,KAAK,CAAC,CAAA;EAAA,GAAA,EACpB,CAACC,EAAE,EAAE+C,OAAO,CAAC,CACd,CAAA;EAED,EAAA,oBACEhB,yBAAA,CAAAwC,aAAA,CAAA,UAAA,EAAA;EACEvE,IAAAA,EAAE,EAAEA,EAAE;EACNyC,IAAAA,IAAI,EAAEzC,EAAE;EACRqE,IAAAA,SAAS,EAAC,cAAc;EACxBtE,IAAAA,KAAK,EAAEA,KAAK,GAAGA,KAAK,GAAG,EAAE;EACzB0E,IAAAA,WAAW,EAAEA,WAAW;EACxB5B,IAAAA,QAAQ,EAAEA,QAAQ;EAClBH,IAAAA,QAAQ,EAAEA,QAAQ;EAClBsL,IAAAA,QAAQ,EAAErL,QAAQ;EAClBsP,IAAAA,SAAS,EAAErP,SAAS;MACpBqY,IAAI,EAAErW,OAAO,CAACqW,IAAI;EAClBnY,IAAAA,MAAM,EAAE6T,UAAU;EAClB5T,IAAAA,OAAO,EAAE6T,WAAW;EACpBvY,IAAAA,QAAQ,EAAE4K,YAAAA;EAAY,GAAA,CACtB,CAAA;EAEN,CAAA;EAEA+R,cAAc,CAACE,YAAY,GAAG;EAC5BtY,EAAAA,SAAS,EAAE,KAAK;EAChBgC,EAAAA,OAAO,EAAE,EAAE;GACZ;;EC5DD;;;EAGG;EACqB,SAAAuW,UAAU,CAIhC5d,KAA2B,EAAA;IAC3B,MAAM;MAAEqH,OAAO;EAAElH,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBAAO7C,yBAAC,CAAAwC,aAAA,CAAA8M,iBAAiB,EAAK;MAAA,GAAA9T,KAAAA;MAAS,CAAA;EACzC;;EChBA;;;EAGG;EACqB,SAAA6d,SAAS,CAI/B7d,KAA2B,EAAA;IAC3B,MAAM;MAAEqH,OAAO;EAAElH,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBAAO7C,yBAAA,CAAAwC,aAAA,CAAC8M,iBAAiB,EAAC;EAAAlQ,IAAAA,IAAI,EAAC,KAAK;MAAA,GAAK5D,KAAAA;EAAK,GAAA,CAAI,CAAA;EACpD;;EChBA;;;EAGG;EACqB,SAAA8d,YAAY,CAIlC9d,KAA2B,EAAA;IAC3B,MAAM;MAAEqH,OAAO;EAAElH,IAAAA,QAAAA;EAAU,GAAA,GAAGH,KAAK,CAAA;IACnC,MAAM8T,iBAAiB,GAAGvP,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EACD,EAAA,oBAAO7C,yBAAA,CAAAwC,aAAA,CAAC8M,iBAAiB,EAAC;EAAAlQ,IAAAA,IAAI,EAAC,QAAQ;MAAA,GAAK5D,KAAAA;EAAK,GAAA,CAAI,CAAA;EACvD;;ECCA,SAASmH,OAAO,GAAA;IAKd,OAAO;MACL6V,cAAc;MACdC,WAAW;MACXa,YAAY;MACZR,WAAW;MACXrF,YAAY;MACZ2F,UAAU;MACVrD,UAAU;MACVC,cAAc;MACdtC,aAAa;MACbc,iBAAiB;MACjB2B,WAAW;MACXkD,SAAS;MACTJ,cAAc;MACdV,YAAY;MACZzC,WAAW;MACXgC,UAAU;MACVrD,cAAc;EACde,IAAAA,gBAAAA;KACD,CAAA;EACH;;ECxCA;;;EAGG;EACW,SAAU+D,kBAAkB,GAAA;IAKxC,OAAO;MACL9V,MAAM,EAAEA,MAAM,EAAW;MACzB8K,SAAS,EAAEA,SAAS,EAAW;MAC/B5L,OAAO,EAAEA,OAAO,EAAW;MAC3B6W,UAAU,EAAE,EAAO;EACnBnY,IAAAA,WAAW,EAAE,EAAO;KACrB,CAAA;EACH;;ECmNA;EACqB,MAAAoY,IAInB,SAAQne,eAAiD,CAAA;EACzD;;EAEG;;EAGH;;;;;EAKG;IACHC,WAAA,CAAYC,KAAyB,EAAA;MACnC,KAAK,CAACA,KAAK,CAAC,CAAA;EAAC,IAAA,IAAA,CATfke,WAAW,GAAA,KAAA,CAAA,CAAA;EAAA,IAAA,IAAA,CAiNXC,eAAe,GAAG,CAAC/e,QAAW,EAAE6I,MAAkB,KAAO;EACvD;QACA,IAAIA,MAAM,CAAC3E,MAAM,KAAK,CAAC,IAAI,OAAOlE,QAAQ,KAAK,QAAQ,EAAE;EACvD,QAAA,OAAOA,QAAQ,CAAA;EAChB,OAAA;EAED;EACA,MAAA,MAAMwY,IAAI,GAAsBwG,yBAAK,CACnChf,QAAQ,EACR6I,MAA6B,CAC9B,CAAA;EACD,MAAA,IAAI5I,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;EAC3B,QAAA,OAAOwJ,MAAM,CAACC,IAAI,CAAC+O,IAAI,CAAC,CAACrY,GAAG,CAAEE,GAAW,IAAKmY,IAAI,CAACnY,GAAG,CAAC,CAAiB,CAAA;EACzE,OAAA;EAED,MAAA,OAAOmY,IAAS,CAAA;OACjB,CAAA;EAAA,IAAA,IAAA,CAODyG,aAAa,GAAG,CAACC,UAAyB,EAAElf,QAAW,KAAgB;QACrE,MAAMmf,WAAW,GAAG,UAClBC,IAAuB,EACvBC,GAAA,EACAC,KAAoB,EAClB;EAAA,QAAA,IAFFD,GAAA,KAAA,KAAA,CAAA,EAAA;EAAAA,UAAAA,GAAA,GAAkB,EAAE,CAAA;EAAA,SAAA;EAAA,QAAA,IACpBC,KAAoB,KAAA,KAAA,CAAA,EAAA;YAApBA,KAAoB,GAAA,CAAC,EAAE,CAAC,CAAA;EAAA,SAAA;UAExB9V,MAAM,CAACC,IAAI,CAAC2V,IAAI,CAAC,CAACG,OAAO,CAAElf,GAAW,IAAI;EACxC,UAAA,IAAI,OAAO+e,IAAI,CAAC/e,GAAG,CAAC,KAAK,QAAQ,EAAE;EACjC,YAAA,MAAMmf,QAAQ,GAAGF,KAAK,CAACnf,GAAG,CAAEsf,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEpf,GAAG,CAAC,CAAC,CAAA;EACpD;EACA,YAAA,IACE+e,IAAI,CAAC/e,GAAG,CAAC,CAACqf,oCAA8B,CAAC,IACzCN,IAAI,CAAC/e,GAAG,CAAC,CAACsf,cAAQ,CAAC,KAAK,EAAE,EAC1B;gBACAN,GAAG,CAACvN,IAAI,CAACsN,IAAI,CAAC/e,GAAG,CAAC,CAACsf,cAAQ,CAAC,CAAC,CAAA;EAC9B,aAAA,MAAM;gBACLR,WAAW,CAACC,IAAI,CAAC/e,GAAG,CAAC,EAAEgf,GAAG,EAAEG,QAAQ,CAAC,CAAA;EACtC,aAAA;EACF,WAAA,MAAM,IAAInf,GAAG,KAAKsf,cAAQ,IAAIP,IAAI,CAAC/e,GAAG,CAAC,KAAK,EAAE,EAAE;EAC/Cif,YAAAA,KAAK,CAACC,OAAO,CAAEE,IAAI,IAAI;EACrB,cAAA,MAAMG,SAAS,GAAGC,uBAAI,CAAC7f,QAAQ,EAAEyf,IAAI,CAAC,CAAA;EACtC;EACA;gBACA,IAAI,OAAOG,SAAS,KAAK,QAAQ,IAAIE,4BAAQ,CAACF,SAAS,CAAC,EAAE;EACxDP,gBAAAA,GAAG,CAACvN,IAAI,CAAC2N,IAAI,CAAC,CAAA;EACf,eAAA;EACH,aAAC,CAAC,CAAA;EACH,WAAA;EACH,SAAC,CAAC,CAAA;EACF,QAAA,OAAOJ,GAAG,CAAA;SACX,CAAA;QAED,OAAOF,WAAW,CAACD,UAAU,CAAC,CAAA;OAC/B,CAAA;MAAA,IAaDxd,CAAAA,QAAQ,GAAG,CAAC1B,QAAW,EAAEqC,cAA+B,EAAEgB,EAAW,KAAI;QACvE,MAAM;UACJ0c,WAAW;UACXC,aAAa;UACbC,QAAQ;UACRC,UAAU;UACVC,YAAY;EACZze,QAAAA,QAAAA;SACD,GAAG,IAAI,CAACd,KAAK,CAAA;QACd,MAAM;UAAEI,WAAW;EAAEF,QAAAA,MAAAA;SAAQ,GAAG,IAAI,CAACa,KAAK,CAAA;QAC1C,IAAIgF,cAAQ,CAAC3G,QAAQ,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;UACjD,MAAMogB,QAAQ,GAAG,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACzf,KAAK,EAAEZ,QAAQ,CAAC,CAAA;UAC7DA,QAAQ,GAAGogB,QAAQ,CAACpgB,QAAQ,CAAA;EAC7B,OAAA;EAED,MAAA,MAAMsgB,YAAY,GAAG,CAACJ,UAAU,IAAIC,YAAY,CAAA;EAChD,MAAA,IAAIxe,KAAK,GAAgC;UAAE3B,QAAQ;EAAEc,QAAAA,MAAAA;SAAQ,CAAA;QAC7D,IAAIyC,WAAW,GAAGvD,QAAQ,CAAA;EAE1B,MAAA,IAAIggB,aAAa,KAAK,IAAI,IAAIC,QAAQ,KAAK,IAAI,EAAE;UAC/C,MAAMM,eAAe,GAAGvf,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,EAAEd,QAAQ,CAAC,CAAA;UACpE,MAAMkf,UAAU,GAAGle,WAAW,CAACwf,YAAY,CACzCD,eAAe,EACf,EAAE,EACFvgB,QAAQ,CACT,CAAA;UAED,MAAMygB,UAAU,GAAG,IAAI,CAACxB,aAAa,CAACC,UAAU,EAAElf,QAAQ,CAAC,CAAA;UAE3DuD,WAAW,GAAG,IAAI,CAACwb,eAAe,CAAC/e,QAAQ,EAAEygB,UAAU,CAAC,CAAA;EACxD9e,QAAAA,KAAK,GAAG;EACN3B,UAAAA,QAAQ,EAAEuD,WAAAA;WACX,CAAA;EACF,OAAA;EAED,MAAA,IAAI+c,YAAY,EAAE;EAChB,QAAA,MAAMI,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAACpd,WAAW,CAAC,CAAA;EACnD,QAAA,IAAI6O,MAAM,GAAGsO,gBAAgB,CAACtO,MAAM,CAAA;EACpC,QAAA,IAAIhQ,WAAW,GAAGse,gBAAgB,CAACte,WAAW,CAAA;UAC9C,MAAMwe,sBAAsB,GAAGxO,MAAM,CAAA;UACrC,MAAMyO,2BAA2B,GAAGze,WAAW,CAAA;EAC/C,QAAA,IAAI2d,WAAW,EAAE;YACf,MAAMe,MAAM,GAAG9f,WAAW,CAAC+f,mBAAmB,CAC5CL,gBAAgB,EAChBX,WAAW,CACZ,CAAA;YACD3d,WAAW,GAAG0e,MAAM,CAAC1e,WAAW,CAAA;YAChCgQ,MAAM,GAAG0O,MAAM,CAAC1O,MAAM,CAAA;EACvB,SAAA;EACDzQ,QAAAA,KAAK,GAAG;EACN3B,UAAAA,QAAQ,EAAEuD,WAAW;YACrB6O,MAAM;YACNhQ,WAAW;YACXwe,sBAAsB;EACtBC,UAAAA,2BAAAA;WACD,CAAA;EACF,OAAA,MAAM,IAAI,CAACX,UAAU,IAAI7d,cAAc,EAAE;EACxC,QAAA,MAAMD,WAAW,GAAG2d,WAAW,GAC1B/O,kBAAY,CACX3O,cAAc,EACd0d,WAAW,EACX,mBAAmB,CACD,GACpB1d,cAAc,CAAA;EAClBV,QAAAA,KAAK,GAAG;EACN3B,UAAAA,QAAQ,EAAEuD,WAAW;EACrBnB,UAAAA,WAAW,EAAEA,WAAW;YACxBgQ,MAAM,EAAEpR,WAAW,CAACggB,YAAY,EAAE,CAACC,WAAW,CAAC7e,WAAW,CAAA;WAC3D,CAAA;EACF,OAAA;QACD,IAAI,CAACN,QAAQ,CACXH,KAA2B,EAC3B,MAAMD,QAAQ,IAAIA,QAAQ,CAAC;UAAE,GAAG,IAAI,CAACC,KAAK;UAAE,GAAGA,KAAAA;SAAO,EAAE0B,EAAE,CAAC,CAC5D,CAAA;OACF,CAAA;EAAA,IAAA,IAAA,CAQD8C,MAAM,GAAG,CAAC9C,EAAU,EAAEmV,IAAS,KAAI;QACjC,MAAM;EAAErS,QAAAA,MAAAA;SAAQ,GAAG,IAAI,CAACvF,KAAK,CAAA;EAC7B,MAAA,IAAIuF,MAAM,EAAE;EACVA,QAAAA,MAAM,CAAC9C,EAAE,EAAEmV,IAAI,CAAC,CAAA;EACjB,OAAA;OACF,CAAA;EAAA,IAAA,IAAA,CAQDpS,OAAO,GAAG,CAAC/C,EAAU,EAAEmV,IAAS,KAAI;QAClC,MAAM;EAAEpS,QAAAA,OAAAA;SAAS,GAAG,IAAI,CAACxF,KAAK,CAAA;EAC9B,MAAA,IAAIwF,OAAO,EAAE;EACXA,QAAAA,OAAO,CAAC/C,EAAE,EAAEmV,IAAI,CAAC,CAAA;EAClB,OAAA;OACF,CAAA;MAAA,IAUD0I,CAAAA,QAAQ,GAAI1f,KAA2B,IAAI;QACzCA,KAAK,CAACC,cAAc,EAAE,CAAA;EACtB,MAAA,IAAID,KAAK,CAAC0T,MAAM,KAAK1T,KAAK,CAACsB,aAAa,EAAE;EACxC,QAAA,OAAA;EACD,OAAA;QAEDtB,KAAK,CAAC2f,OAAO,EAAE,CAAA;QACf,MAAM;UAAEnB,aAAa;UAAED,WAAW;UAAEG,UAAU;EAAEgB,QAAAA,QAAAA;SAAU,GAAG,IAAI,CAACtgB,KAAK,CAAA;QACvE,IAAI;EAAEZ,QAAAA,QAAQ,EAAEuD,WAAAA;SAAa,GAAG,IAAI,CAAC5B,KAAK,CAAA;QAC1C,MAAM;UAAEb,MAAM;EAAEE,QAAAA,WAAAA;SAAa,GAAG,IAAI,CAACW,KAAK,CAAA;QAE1C,IAAIqe,aAAa,KAAK,IAAI,EAAE;UAC1B,MAAMO,eAAe,GAAGvf,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,EAAEyC,WAAW,CAAC,CAAA;UACvE,MAAM2b,UAAU,GAAGle,WAAW,CAACwf,YAAY,CACzCD,eAAe,EACf,EAAE,EACFhd,WAAW,CACZ,CAAA;UAED,MAAMkd,UAAU,GAAG,IAAI,CAACxB,aAAa,CAACC,UAAU,EAAE3b,WAAW,CAAC,CAAA;UAE9DA,WAAW,GAAG,IAAI,CAACwb,eAAe,CAACxb,WAAW,EAAEkd,UAAU,CAAC,CAAA;EAC5D,OAAA;EAED,MAAA,IAAIP,UAAU,IAAI,IAAI,CAACkB,YAAY,EAAE,EAAE;EACrC;EACA;EACA,QAAA,MAAMhf,WAAW,GAAG2d,WAAW,IAAI,EAAE,CAAA;EACrC,QAAA,MAAM3N,MAAM,GAAG2N,WAAW,GACtB/e,WAAW,CAACggB,YAAY,EAAE,CAACC,WAAW,CAAClB,WAAW,CAAC,GACnD,EAAE,CAAA;UACN,IAAI,CAACje,QAAQ,CACX;EACE9B,UAAAA,QAAQ,EAAEuD,WAAW;YACrB6O,MAAM;YACNhQ,WAAW;EACXwe,UAAAA,sBAAsB,EAAE,EAAE;EAC1BC,UAAAA,2BAA2B,EAAE,EAAE;EAChC,SAAA,EACD,MAAK;EACH,UAAA,IAAIK,QAAQ,EAAE;EACZA,YAAAA,QAAQ,CACN;gBAAE,GAAG,IAAI,CAACvf,KAAK;EAAE3B,cAAAA,QAAQ,EAAEuD,WAAW;EAAE8d,cAAAA,MAAM,EAAE,WAAA;eAAa,EAC7D7f,KAAK,CACN,CAAA;EACF,WAAA;EACH,SAAC,CACF,CAAA;EACF,OAAA;OACF,CAAA;EA1aC,IAAA,IAAI,CAACZ,KAAK,CAAC0gB,SAAS,EAAE;EACpB,MAAA,MAAM,IAAIzM,KAAK,CAAC,wDAAwD,CAAC,CAAA;EAC1E,KAAA;EAED,IAAA,IAAI,CAAClT,KAAK,GAAG,IAAI,CAAC0e,iBAAiB,CAACzf,KAAK,EAAEA,KAAK,CAACZ,QAAQ,CAAC,CAAA;MAC1D,IACE,IAAI,CAACY,KAAK,CAACc,QAAQ,IACnB,CAAC8J,gBAAU,CAAC,IAAI,CAAC7J,KAAK,CAAC3B,QAAQ,EAAE,IAAI,CAACY,KAAK,CAACZ,QAAQ,CAAC,EACrD;QACA,IAAI,CAACY,KAAK,CAACc,QAAQ,CAAC,IAAI,CAACC,KAAK,CAAC,CAAA;EAChC,KAAA;EACD,IAAA,IAAI,CAACmd,WAAW,gBAAG1Z,yBAAK,CAACmc,SAAS,EAAE,CAAA;EACtC,GAAA;EAEA;;;;;EAKG;IACHC,gCAAgC,CAAC1d,SAA6B,EAAA;MAC5D,MAAM2d,SAAS,GAAG,IAAI,CAACpB,iBAAiB,CAACvc,SAAS,EAAEA,SAAS,CAAC9D,QAAQ,CAAC,CAAA;EACvE,IAAA,IACE,CAACwL,gBAAU,CAACiW,SAAS,CAACzhB,QAAQ,EAAE8D,SAAS,CAAC9D,QAAQ,CAAC,IACnD,CAACwL,gBAAU,CAACiW,SAAS,CAACzhB,QAAQ,EAAE,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ,CAAC,IACpD8D,SAAS,CAACpC,QAAQ,EAClB;EACAoC,MAAAA,SAAS,CAACpC,QAAQ,CAAC+f,SAAS,CAAC,CAAA;EAC9B,KAAA;EACD,IAAA,IAAI,CAAC3f,QAAQ,CAAC2f,SAAS,CAAC,CAAA;EAC1B,GAAA;EAEA;;;;;;;EAOG;EACHpB,EAAAA,iBAAiB,CACfzf,KAAyB,EACzB8gB,aAAiB,EAAA;EAEjB,IAAA,MAAM/f,KAAK,GAAuB,IAAI,CAACA,KAAK,IAAI,EAAE,CAAA;EAClD,IAAA,MAAMb,MAAM,GAAG,QAAQ,IAAIF,KAAK,GAAGA,KAAK,CAACE,MAAM,GAAG,IAAI,CAACF,KAAK,CAACE,MAAM,CAAA;EACnE,IAAA,MAAM8D,QAAQ,GACZ,CAAC,UAAU,IAAIhE,KAAK,GAAGA,KAAK,CAACgE,QAAS,GAAG,IAAI,CAAChE,KAAK,CAACgE,QAAS,KAAK,EAAE,CAAA;EACtE,IAAA,MAAM+c,IAAI,GAAG,OAAOD,aAAa,KAAK,WAAW,CAAA;EACjD,IAAA,MAAMvB,YAAY,GAChB,cAAc,IAAIvf,KAAK,GAAGA,KAAK,CAACuf,YAAY,GAAG,IAAI,CAACvf,KAAK,CAACuf,YAAY,CAAA;MACxE,MAAMG,YAAY,GAAGqB,IAAI,IAAI,CAAC/gB,KAAK,CAACsf,UAAU,IAAIC,YAAY,CAAA;MAC9D,MAAMvB,UAAU,GAAG9d,MAAM,CAAA;EACzB,IAAA,IAAIE,WAAW,GAA0BW,KAAK,CAACX,WAAW,CAAA;EAC1D,IAAA,IACE,CAACA,WAAW,IACZA,WAAW,CAAC4gB,qBAAqB,CAAChhB,KAAK,CAAC0gB,SAAS,EAAE1C,UAAU,CAAC,EAC9D;QACA5d,WAAW,GAAG6gB,uBAAiB,CAAUjhB,KAAK,CAAC0gB,SAAS,EAAE1C,UAAU,CAAC,CAAA;EACtE,KAAA;MACD,MAAM5e,QAAQ,GAAMgB,WAAW,CAACM,mBAAmB,CACjDR,MAAM,EACN4gB,aAAa,CACT,CAAA;MACN,MAAMnB,eAAe,GAAGvf,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,EAAEd,QAAQ,CAAC,CAAA;MAEpE,MAAM8hB,gBAAgB,GAAG,MAAwB;QAC/C,IAAIlhB,KAAK,CAACsf,UAAU,EAAE;UACpB,OAAO;EAAE9N,UAAAA,MAAM,EAAE,EAAE;EAAEhQ,UAAAA,WAAW,EAAE,EAAE;WAAE,CAAA;EACvC,OAAA,MAAM,IAAI,CAACxB,KAAK,CAACuf,YAAY,EAAE;UAC9B,OAAO;EACL/N,UAAAA,MAAM,EAAEzQ,KAAK,CAACif,sBAAsB,IAAI,EAAE;EAC1Cxe,UAAAA,WAAW,EAAET,KAAK,CAACkf,2BAA2B,IAAI,EAAE;WACrD,CAAA;EACF,OAAA;QACD,OAAO;EACLzO,QAAAA,MAAM,EAAEzQ,KAAK,CAACyQ,MAAM,IAAI,EAAE;EAC1BhQ,QAAAA,WAAW,EAAET,KAAK,CAACS,WAAW,IAAI,EAAE;SACrC,CAAA;OACF,CAAA;EAED,IAAA,IAAIgQ,MAA6B,CAAA;EACjC,IAAA,IAAIhQ,WAAuC,CAAA;EAC3C,IAAA,IAAIwe,sBAAsB,GACxBjf,KAAK,CAACif,sBAAsB,CAAA;EAC9B,IAAA,IAAIC,2BAA2B,GAC7Blf,KAAK,CAACkf,2BAA2B,CAAA;EACnC,IAAA,IAAIP,YAAY,EAAE;QAChB,MAAMI,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAAC3gB,QAAQ,EAAEc,MAAM,EAAEE,WAAW,CAAC,CAAA;QACrEoR,MAAM,GAAGsO,gBAAgB,CAACtO,MAAM,CAAA;QAChChQ,WAAW,GAAGse,gBAAgB,CAACte,WAAW,CAAA;EAC1Cwe,MAAAA,sBAAsB,GAAGxO,MAAM,CAAA;EAC/ByO,MAAAA,2BAA2B,GAAGze,WAAW,CAAA;EAC1C,KAAA,MAAM;QACL,MAAM2f,aAAa,GAAGD,gBAAgB,EAAE,CAAA;QACxC1P,MAAM,GAAG2P,aAAa,CAAC3P,MAAM,CAAA;QAC7BhQ,WAAW,GAAG2f,aAAa,CAAC3f,WAAW,CAAA;EACxC,KAAA;MACD,IAAIxB,KAAK,CAACmf,WAAW,EAAE;EACrB,MAAA,MAAMe,MAAM,GAAG9f,WAAW,CAAC+f,mBAAmB,CAC5C;UAAE3e,WAAW;EAAEgQ,QAAAA,MAAAA;SAAQ,EACvBxR,KAAK,CAACmf,WAAW,CAClB,CAAA;QACD3d,WAAW,GAAG0e,MAAM,CAAC1e,WAAW,CAAA;QAChCgQ,MAAM,GAAG0O,MAAM,CAAC1O,MAAM,CAAA;EACvB,KAAA;MACD,MAAM1O,QAAQ,GAAG1C,WAAW,CAACoG,UAAU,CACrCmZ,eAAe,EACf3b,QAAQ,CAAC,gBAAgB,CAAC,EAC1B5E,QAAQ,EACRY,KAAK,CAACyF,QAAQ,EACdzF,KAAK,CAAC0F,WAAW,CAClB,CAAA;EACD,IAAA,MAAMmb,SAAS,GAAuB;QACpCzgB,WAAW;QACXF,MAAM;QACN8D,QAAQ;QACRlB,QAAQ;QACR1D,QAAQ;QACR2hB,IAAI;QACJvP,MAAM;QACNhQ,WAAW;QACXwe,sBAAsB;EACtBC,MAAAA,2BAAAA;OACD,CAAA;EACD,IAAA,OAAOY,SAAS,CAAA;EAClB,GAAA;EAEA;;;;;EAKG;EACH1O,EAAAA,qBAAqB,CACnBjP,SAA6B,EAC7B2d,SAA6B,EAAA;EAE7B,IAAA,OAAOO,kBAAY,CAAC,IAAI,EAAEle,SAAS,EAAE2d,SAAS,CAAC,CAAA;EACjD,GAAA;EAEA;;;;;;EAMG;EACHd,EAAAA,QAAQ,CACN3gB,QAAW,EACXc,MAAM,EACNmhB,cAAsC,EAAA;EAAA,IAAA,IADtCnhB,MAAM,KAAA,KAAA,CAAA,EAAA;EAANA,MAAAA,MAAM,GAAG,IAAI,CAACF,KAAK,CAACE,MAAM,CAAA;EAAA,KAAA;MAG1B,MAAME,WAAW,GAAGihB,cAAc,GAC9BA,cAAc,GACd,IAAI,CAACtgB,KAAK,CAACX,WAAW,CAAA;MAC1B,MAAM;QAAEkhB,cAAc;EAAEC,MAAAA,eAAAA;OAAiB,GAAG,IAAI,CAACvhB,KAAK,CAAA;MACtD,MAAMwhB,cAAc,GAAGphB,WAAW,CAAC6F,cAAc,CAAC/F,MAAM,EAAEd,QAAQ,CAAC,CAAA;EACnE,IAAA,OAAOgB,WAAW,CACfggB,YAAY,EAAE,CACdqB,gBAAgB,CACfriB,QAAQ,EACRoiB,cAAc,EACdF,cAAc,EACdC,eAAe,CAChB,CAAA;EACL,GAAA;EAEA;IACAG,YAAY,CAACvhB,QAA2B,EAAA;MACtC,MAAM;QAAEqR,MAAM;QAAEhQ,WAAW;QAAEtB,MAAM;EAAE8D,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAACjD,KAAK,CAAA;MAC5D,MAAM;EAAE8E,MAAAA,WAAAA;OAAa,GAAG,IAAI,CAAC7F,KAAK,CAAA;EAClC,IAAA,MAAMqH,OAAO,GAAGnD,kBAAY,CAAUF,QAAQ,CAAC,CAAA;MAC/C,MAAM0S,iBAAiB,GAAGnS,iBAAW,CACnC,mBAAmB,EACnBpE,QAAQ,EACRkH,OAAO,CACR,CAAA;EAED,IAAA,IAAImK,MAAM,IAAIA,MAAM,CAAClO,MAAM,EAAE;EAC3B,MAAA,oBACEkB,yBAAC,CAAAwC,aAAA,CAAA0P,iBAAiB,EAChB;EAAAlF,QAAAA,MAAM,EAAEA,MAAM;EACdhQ,QAAAA,WAAW,EAAEA,WAAW,IAAI,EAAE;EAC9BtB,QAAAA,MAAM,EAAEA,MAAM;EACd8D,QAAAA,QAAQ,EAAEA,QAAQ;EAClB6B,QAAAA,WAAW,EAAEA,WAAAA;EACb,OAAA,CAAA,CAAA;EAEL,KAAA;EACD,IAAA,OAAO,IAAI,CAAA;EACb,GAAA;EAEA;;;;EAIG;;EAuOH;EACA8b,EAAAA,WAAW,GAAA;EAAA,IAAA,IAAA,qBAAA,CAAA;MACT,MAAM;EAAEvhB,MAAAA,WAAAA;OAAa,GAAG,IAAI,CAACW,KAAK,CAAA;MAClC,MAAM;QAAEkH,MAAM;QAAE8K,SAAS;QAAE5L,OAAO;EAAEtB,MAAAA,WAAAA;OAAa,GAAGkY,kBAAkB,EAInE,CAAA;MACH,OAAO;EACL9V,MAAAA,MAAM,EAAE;EAAE,QAAA,GAAGA,MAAM;UAAE,GAAG,IAAI,CAACjI,KAAK,CAACiI,MAAAA;SAAQ;EAC3C8K,MAAAA,SAAS,EAAE;EACT,QAAA,GAAGA,SAAS;EACZ,QAAA,GAAG,IAAI,CAAC/S,KAAK,CAAC+S,SAAS;EACvBC,QAAAA,eAAe,EAAE;YACf,GAAGD,SAAS,CAACC,eAAe;EAC5B,UAAA,IAAA,CAAA,qBAAA,GAAG,IAAI,CAAChT,KAAK,CAAC+S,SAAS,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApB,sBAAsBC,eAAe,CAAA;EACzC,SAAA;SACF;EACD7L,MAAAA,OAAO,EAAE;EAAE,QAAA,GAAGA,OAAO;UAAE,GAAG,IAAI,CAACnH,KAAK,CAACmH,OAAAA;SAAS;EAC9C6W,MAAAA,UAAU,EAAE,IAAI,CAAChe,KAAK,CAACE,MAAM;EAC7B2F,MAAAA,WAAW,EAAE,IAAI,CAAC7F,KAAK,CAAC6F,WAAW,IAAIA,WAAW;EAClDzF,MAAAA,WAAAA;OACD,CAAA;EACH,GAAA;EAEA;EACAwhB,EAAAA,MAAM,GAAA;EACJ,IAAA,IAAI,IAAI,CAAC1D,WAAW,CAAC2D,OAAO,EAAE;QAC5B,IAAI,CAAC3D,WAAW,CAAC2D,OAAO,CAACC,aAAa,CACpC,IAAIC,WAAW,CAAC,QAAQ,EAAE;EACxBC,QAAAA,UAAU,EAAE,IAAA;EACb,OAAA,CAAC,CACH,CAAA;EACD,MAAA,IAAI,CAAC9D,WAAW,CAAC2D,OAAO,CAACI,aAAa,EAAE,CAAA;EACzC,KAAA;EACH,GAAA;EAEA;;;;EAIG;EACHzB,EAAAA,YAAY,GAAA;MACV,MAAM;QAAErB,WAAW;EAAE+C,MAAAA,OAAAA;OAAS,GAAG,IAAI,CAACliB,KAAK,CAAA;MAC3C,MAAM;EAAEZ,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAC2B,KAAK,CAAA;MAC/B,MAAM;EAAEX,MAAAA,WAAAA;OAAa,GAAG,IAAI,CAACW,KAAK,CAAA;EAClC,IAAA,MAAM+e,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAAC3gB,QAAQ,CAAC,CAAA;EAChD,IAAA,IAAIoS,MAAM,GAAGsO,gBAAgB,CAACtO,MAAM,CAAA;EACpC,IAAA,IAAIhQ,WAAW,GAAGse,gBAAgB,CAACte,WAAW,CAAA;MAC9C,MAAMwe,sBAAsB,GAAGxO,MAAM,CAAA;MACrC,MAAMyO,2BAA2B,GAAGze,WAAW,CAAA;EAC/C,IAAA,IAAIgQ,MAAM,CAAClO,MAAM,GAAG,CAAC,EAAE;EACrB,MAAA,IAAI6b,WAAW,EAAE;UACf,MAAMe,MAAM,GAAG9f,WAAW,CAAC+f,mBAAmB,CAC5CL,gBAAgB,EAChBX,WAAW,CACZ,CAAA;UACD3d,WAAW,GAAG0e,MAAM,CAAC1e,WAAW,CAAA;UAChCgQ,MAAM,GAAG0O,MAAM,CAAC1O,MAAM,CAAA;EACvB,OAAA;QACD,IAAI,CAACtQ,QAAQ,CACX;UACEsQ,MAAM;UACNhQ,WAAW;UACXwe,sBAAsB;EACtBC,QAAAA,2BAAAA;EACD,OAAA,EACD,MAAK;EACH,QAAA,IAAIiC,OAAO,EAAE;YACXA,OAAO,CAAC1Q,MAAM,CAAC,CAAA;EAChB,SAAA,MAAM;EACLL,UAAAA,OAAO,CAACwE,KAAK,CAAC,wBAAwB,EAAEnE,MAAM,CAAC,CAAA;EAChD,SAAA;EACH,OAAC,CACF,CAAA;EACD,MAAA,OAAO,KAAK,CAAA;EACb,KAAA;EACD,IAAA,OAAO,IAAI,CAAA;EACb,GAAA;EAEA;;EAEG;EACHpN,EAAAA,MAAM,GAAA;MACJ,MAAM;QACJ2E,QAAQ;QACRtG,EAAE;QACFgD,QAAQ;QACRC,WAAW;EACXoB,MAAAA,SAAS,GAAG,EAAE;QACdqb,OAAO;QACPjd,IAAI;QACJkd,MAAM;QACN9N,MAAM;QACN8D,MAAM;QACNiK,YAAY;QACZC,OAAO;QACPC,aAAa;EACbC,MAAAA,eAAe,GAAG,KAAK;EACvBrd,MAAAA,QAAQ,GAAG,KAAK;EAChBC,MAAAA,QAAQ,GAAG,KAAK;QAChBS,WAAW;EACX4c,MAAAA,aAAa,GAAG,KAAK;EACrBC,MAAAA,oBAAAA;OACD,GAAG,IAAI,CAAC1iB,KAAK,CAAA;MAEd,MAAM;QAAEE,MAAM;QAAE8D,QAAQ;QAAE5E,QAAQ;QAAEoC,WAAW;EAAEsB,MAAAA,QAAAA;OAAU,GAAG,IAAI,CAAC/B,KAAK,CAAA;EACxE,IAAA,MAAMZ,QAAQ,GAAG,IAAI,CAACwhB,WAAW,EAAE,CAAA;MACnC,MAAM;EAAExZ,MAAAA,WAAW,EAAE4C,YAAAA;OAAc,GAAG5K,QAAQ,CAAC8H,MAAM,CAAA;MACrD,MAAM;EAAE8M,MAAAA,YAAAA;EAAc,KAAA,GAAG5U,QAAQ,CAAC4S,SAAS,CAACC,eAAe,CAAA;EAC3D;EACA;EACA;EACA,IAAA,MAAM2P,EAAE,GAAGD,oBAAoB,GAAGP,OAAO,GAAGpf,SAAS,CAAA;EACrD,IAAA,MAAM6f,OAAO,GAAGF,oBAAoB,IAAIP,OAAO,IAAI,MAAM,CAAA;EAEzD,IAAA,oBACE3d,yBAAA,CAAAwC,aAAA,CAAC4b,OAAO,EAAA;EACN9b,MAAAA,SAAS,EAAEA,SAAS,GAAGA,SAAS,GAAG,MAAM;EACzCrE,MAAAA,EAAE,EAAEA,EAAE;EACNyC,MAAAA,IAAI,EAAEA,IAAI;EACVkd,MAAAA,MAAM,EAAEA,MAAM;EACd9N,MAAAA,MAAM,EAAEA,MAAM;EACd8D,MAAAA,MAAM,EAAEA,MAAM;EACdiK,MAAAA,YAAY,EAAEA,YAAY;EAC1BQ,MAAAA,OAAO,EAAEP,OAAO;EAChBQ,MAAAA,aAAa,EAAEP,aAAa;EAC5BjD,MAAAA,UAAU,EAAEkD,eAAe;QAC3BlC,QAAQ,EAAE,IAAI,CAACA,QAAQ;EACvBqC,MAAAA,EAAE,EAAEA,EAAE;QACNI,GAAG,EAAE,IAAI,CAAC7E,WAAAA;EAAW,KAAA,EAEpBuE,aAAa,KAAK,KAAK,IAAI,IAAI,CAACf,YAAY,CAACvhB,QAAQ,CAAC,eACvDqE,yBAAA,CAAAwC,aAAA,CAAC+D,YAAY,EAAA;EACX7F,MAAAA,IAAI,EAAC,EAAE;EACPhF,MAAAA,MAAM,EAAEA,MAAM;EACd8D,MAAAA,QAAQ,EAAEA,QAAQ;EAClBxC,MAAAA,WAAW,EAAEA,WAAW;EACxBsB,MAAAA,QAAQ,EAAEA,QAAQ;EAClB2C,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,WAAW,EAAEA,WAAW;EACxBG,MAAAA,WAAW,EAAEA,WAAW;EACxBzG,MAAAA,QAAQ,EAAEA,QAAQ;QAClB0B,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvByE,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,OAAO,EAAE,IAAI,CAACA,OAAO;EACrBrF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBgF,MAAAA,QAAQ,EAAEA,QAAQ;EAClBC,MAAAA,QAAQ,EAAEA,QAAAA;OACV,CAAA,EACD2D,QAAQ,GAAGA,QAAQ,gBAAGvE,yBAAA,CAAAwC,aAAA,CAAC+N,YAAY,EAAA;EAAC/Q,MAAAA,QAAQ,EAAEA,QAAAA;EAAY,KAAA,CAAA,EAC1Dye,aAAa,KAAK,QAAQ,IAAI,IAAI,CAACf,YAAY,CAACvhB,QAAQ,CAAC,CAClD,CAAA;EAEd,GAAA;EACD;;ECtzBD;EACwB,SAAA6iB,SAAS,CAI/BC,UAA+B,EAAA;EAC/B,EAAA,oBAAOC,gBAAU,CACf,CAEEH,IAAAA,EAAAA,GAAgC,KAC9B;EAAA,IAAA,IAAA,qBAAA,EAAA,UAAA,CAAA;MAAA,IAFF;QAAE9a,MAAM;QAAEd,OAAO;QAAE4L,SAAS;QAAE,GAAGoQ,WAAAA;OAAiC,GAAA,IAAA,CAAA;EAGlElb,IAAAA,MAAM,GAAG;QAAE,GAAGgb,UAAU,CAAChb,MAAM;QAAE,GAAGA,MAAAA;OAAQ,CAAA;EAC5Cd,IAAAA,OAAO,GAAG;QAAE,GAAG8b,UAAU,CAAC9b,OAAO;QAAE,GAAGA,OAAAA;OAAS,CAAA;EAC/C4L,IAAAA,SAAS,GAAG;QACV,GAAGkQ,UAAU,CAAClQ,SAAS;EACvB,MAAA,GAAGA,SAAS;EACZC,MAAAA,eAAe,EAAE;UACf,IAAGiQ,UAAU,aAAVA,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAVA,UAAU,CAAElQ,SAAS,MAArB,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAuBC,eAAe,CAAA;UACzC,IAAGD,CAAAA,UAAAA,GAAAA,SAAS,MAAT,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAWC,eAAe,CAAA;EAC9B,OAAA;OACF,CAAA;EAED,IAAA,oBACExO,yBAAC,CAAAwC,aAAA,CAAAiX,IAAI,EACC;EAAA,MAAA,GAAAgF,UAAU;WACVE,WAAW;EACflb,MAAAA,MAAM,EAAEA,MAAM;EACdd,MAAAA,OAAO,EAAEA,OAAO;EAChB4L,MAAAA,SAAS,EAAEA,SAAS;EACpBgQ,MAAAA,GAAG,EAAEA,GAAAA;EACL,KAAA,CAAA,CAAA;EAEN,GAAC,CACF,CAAA;EACH;;;;;;;;;;;;"}