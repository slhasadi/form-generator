{"version":3,"file":"core.esm.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T[], S, F>, ArrayFieldState<T>> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<\n    T = any,\n    S extends StrictRJSFSchema = RJSFSchema,\n    F extends FormContextType = any\n  >(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        S,\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items)\n      ? (schema.items as S)\n      : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items)\n      ? (schema.items as S[])\n      : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>[\"onBlur\"];\n    onFocus: FieldProps<T[], S, F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], S, F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v: any) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, AnyOfFieldState> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, S, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n    // so that only the root objects themselves are created without adding undefined children properties\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData,\n        \"excludeObjectChildren\"\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport {\n  asNumber,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, ObjectFieldState> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, S, F>(\n      uiSchema\n    );\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] } as S,\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, S, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          S,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, S, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, S, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, S, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends React.Component<FieldProps<T, S, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport {\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import {\n  Field,\n  FormContextType,\n  RegistryFieldsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(\n            ({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n              <ArrayFieldItemTemplate key={key} {...itemProps} />\n            )\n          )}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, S, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nexport default function IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ className, onClick, disabled }: IconButtonProps<T, S, F>) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>[\"ButtonTemplates\"] {\n  return {\n    SubmitButton,\n    AddButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: TitleFieldProps<T, S, F>) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  UnsupportedFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: UnsupportedFieldProps<T, S, F>) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nfunction templates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  WidgetProps<T, S, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" } as S}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ time = true, ...props }: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport {\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, S, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport {\n  dataURItoBlob,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, S, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, value }: WidgetProps<T, S, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport {\n  processSelectValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    PasswordWidget,\n    RadioWidget,\n    UpDownWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    DateWidget,\n    DateTimeWidget,\n    AltDateWidget,\n    AltDateTimeWidget,\n    EmailWidget,\n    URLWidget,\n    TextareaWidget,\n    HiddenWidget,\n    ColorWidget,\n    FileWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n  };\n}\n\nexport default widgets;\n","import {\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, \"schemaUtils\"> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _pick from \"lodash/pick\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | \"top\" | \"bottom\";\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Omit<\n    FormState<T, S, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, S, F>,\n    inputFormData?: T\n  ): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, S, F>,\n    nextState: FormState<T, S, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, S, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[][]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(\n      formData,\n      fields as unknown as string[]\n    );\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T): string[][] => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[][] = [],\n      paths: string[][] = [[]]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(\n            newErrorSchema,\n            extraErrors,\n            \"preventDuplicates\"\n          ) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, S, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry<\n      T,\n      S,\n      F\n    >();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = \"top\",\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === \"top\" && this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n        {showErrorList === \"bottom\" && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  FormProps<T, S, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n> & {\n  ref?: React.Ref<Form<T, S, F>>;\n};\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(themeProps: ThemeProps<T, S, F>) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, S, F>,\n      ref: ForwardedRef<Form<T, S, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormDataRow","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","undefined","$id","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","refSchema","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","process","env","NODE_ENV","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","MultiSchemaField","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","buttonTemplates","DescriptionField","ErrorList","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","keyLabel","defaultValue","border","ErrorListTemplate","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","useReducer","action","parseDateString","toDateString","property","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","selectValue","selected","all","at","updated","sort","a","b","Number","deselectValue","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","rows","defaultProps","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","rootSchema","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","newState","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","getCurrentErrors","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","getRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","showErrorList","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","withTheme","themeProps","forwardRef","directProps"],"mappings":"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"}