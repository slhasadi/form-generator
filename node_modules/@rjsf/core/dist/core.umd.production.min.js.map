{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T[], S, F>, ArrayFieldState<T>> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<\n    T = any,\n    S extends StrictRJSFSchema = RJSFSchema,\n    F extends FormContextType = any\n  >(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData, newKeyedFormDataRow];\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: this._getNewFormDataRow(),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        S,\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items)\n      ? (schema.items as S)\n      : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(formData),\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema && idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items)\n      ? (schema.items as S[])\n      : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd: this.canAddItem(items) && !!additionalSchema,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>[\"onBlur\"];\n    onFocus: FieldProps<T[], S, F>[\"onFocus\"];\n    rawErrors?: string[];\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], S, F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v: any) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport {\n  getUiOptions,\n  getWidget,\n  guessType,\n  deepEquals,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState = {\n  /** The currently selected option */\n  selectedOption: number;\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, AnyOfFieldState> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const { formData, options } = this.props;\n\n    this.state = {\n      selectedOption: this.getMatchingOption(0, formData, options),\n    };\n  }\n\n  /** React lifecycle methos that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, S, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        options\n      );\n\n      if (!prevState || matchingOption === selectedOption) {\n        return;\n      }\n\n      this.setState({\n        selectedOption: matchingOption,\n      });\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getMatchingOption(formData, options);\n    if (option !== 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option -\n   */\n  onOptionChange = (option: any) => {\n    const selectedOption = parseInt(option, 10);\n    const { formData, onChange, options, registry } = this.props;\n    const { schemaUtils } = registry;\n    const newOption = schemaUtils.retrieveSchema(\n      options[selectedOption],\n      formData\n    );\n\n    // If the new option is of type object and the current data is an object,\n    // discard properties added using the old option.\n    let newFormData: T | undefined = undefined;\n    if (\n      guessType(formData) === \"object\" &&\n      (newOption.type === \"object\" || newOption.properties)\n    ) {\n      newFormData = Object.assign({}, formData);\n\n      const optionsToDiscard = options.slice();\n      optionsToDiscard.splice(selectedOption, 1);\n\n      // Discard any data added using other options\n      for (const option of optionsToDiscard) {\n        if (option.properties) {\n          for (const key in option.properties) {\n            if (key in newFormData) {\n              unset(newFormData, key);\n            }\n          }\n        }\n      }\n    }\n    // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n    // so that only the root objects themselves are created without adding undefined children properties\n    onChange(\n      schemaUtils.getDefaultFormState(\n        options[selectedOption],\n        newFormData,\n        \"excludeObjectChildren\"\n      ) as T,\n      undefined,\n      this.getFieldId()\n    );\n\n    this.setState({\n      selectedOption: parseInt(option, 10),\n    });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      readonly = false,\n      hideError = false,\n      errorSchema = {},\n      formData,\n      formContext,\n      idPrefix,\n      idSeparator,\n      idSchema,\n      onBlur,\n      onChange,\n      onFocus,\n      options,\n      registry,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption } = this.state;\n    const { widget = \"select\", ...uiOptions } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: \"number\" }, widget, widgets);\n\n    const option = options[selectedOption] || null;\n    let optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const enumOptions = options.map((option: RJSFSchema, index: number) => ({\n      label: option.title || `Option ${index + 1}`,\n      value: index,\n    }));\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            value={selectedOption}\n            options={{ enumOptions }}\n            registry={registry}\n            formContext={formContext}\n            {...uiOptions}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField\n            name={name}\n            schema={optionSchema}\n            uiSchema={uiSchema}\n            errorSchema={errorSchema}\n            idSchema={idSchema}\n            idPrefix={idPrefix}\n            idSeparator={idSeparator}\n            formData={formData}\n            formContext={formContext}\n            onChange={onChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            registry={registry}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport {\n  asNumber,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, ObjectFieldState> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value };\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData };\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param formData - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, S, F>(\n      uiSchema\n    );\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (newKey in formData) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData };\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      if (REF_KEY in schema.additionalProperties) {\n        const { schemaUtils } = registry;\n        const refSchema = schemaUtils.retrieveSchema(\n          { $ref: schema.additionalProperties[REF_KEY] } as S,\n          formData\n        );\n        type = refSchema.type;\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, S, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          S,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, S, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, S, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, S, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names to child components\n  const fieldUiSchema = omit(uiSchema, [\"ui:classNames\", \"classNames\"]);\n  if (\"ui:options\" in fieldUiSchema) {\n    fieldUiSchema[\"ui:options\"] = omit(fieldUiSchema[\"ui:options\"], [\n      \"classNames\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={`${id}__description`}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !uiSchema?.[\"ui:field\"] &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends React.Component<FieldProps<T, S, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema && idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport {\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  const id = `${idSchema.$id}__description`;\n  return (\n    <DescriptionFieldTemplate\n      id={id}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(\n            ({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n              <ArrayFieldItemTemplate key={key} {...itemProps} />\n            )\n          )}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, S, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  const id = `${idSchema.$id}__title`;\n  return (\n    <TitleFieldTemplate\n      id={id}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? `examples_${id}` : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={`examples_${id}`}>\n          {[\n            ...new Set(\n              schema.examples.concat(schema.default ? [schema.default] : [])\n            ),\n          ].map((example: any) => (\n            <option key={example} value={example} />\n          ))}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nexport default function IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ className, onClick, disabled }: IconButtonProps<T, S, F>) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n        />\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = `${idSchema.$id}__error`;\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = `${idSchema.$id}__help`;\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={`${idSchema.$id}__title`}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={`${idSchema.$id}__description`}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: TitleFieldProps<T, S, F>) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  UnsupportedFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: UnsupportedFieldProps<T, S, F>) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return <div className={classNames}>{children}</div>;\n  }\n\n  return (\n    <div className={classNames}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\n\nimport {\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  WidgetProps<T, S, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" } as S}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li>\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li>\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ time = true, ...props }: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={id + \"__description\"}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent } from \"react\";\nimport {\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nfunction selectValue(value: any, selected: any[], all: any[]) {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at));\n  // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n  return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n}\n\nfunction deselectValue(value: any, selected: any[]) {\n  return selected.filter((v) => v !== value);\n}\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n}: WidgetProps<T, S, F>) {\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = value.indexOf(option.value) !== -1;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            const all = enumOptions.map(({ value }) => value);\n            if (event.target.checked) {\n              onChange(selectValue(option.value, value, all));\n            } else {\n              onChange(deselectValue(option.value, value));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={`${id}-${option.value}`}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label\n              key={option.value}\n              className={`checkbox-inline ${disabledCls}`}\n            >\n              {checkbox}\n            </label>\n          ) : (\n            <div key={option.value} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport {\n  dataURItoBlob,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, S, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, value }: WidgetProps<T, S, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline } = options;\n  // checked={checked} has been moved above name={name}, As mentioned in #349;\n  // this is a temporary fix for radio button rendering bug in React, facebook/react#7630.\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.value),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = option.value === value;\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) != -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={`${id}-${option.value}`}\n                checked={checked}\n                name={name}\n                required={required}\n                value={option.value}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={option.value} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={option.value} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport {\n  processSelectValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, processSelectValue(schema, newValue, options));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, processSelectValue(schema, newValue, options));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(processSelectValue(schema, newValue, options));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={typeof value === \"undefined\" ? emptyValue : value}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n          return (\n            <option key={i} value={value} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import {\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, \"schemaUtils\"> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n  };\n}\n","import {\n  Field,\n  FormContextType,\n  RegistryFieldsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nfunction templates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>[\"ButtonTemplates\"] {\n  return {\n    SubmitButton,\n    AddButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    PasswordWidget,\n    RadioWidget,\n    UpDownWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    DateWidget,\n    DateTimeWidget,\n    AltDateWidget,\n    AltDateTimeWidget,\n    EmailWidget,\n    URLWidget,\n    TextareaWidget,\n    HiddenWidget,\n    ColorWidget,\n    FileWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n  };\n}\n\nexport default widgets;\n","import React, { Component } from \"react\";\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _pick from \"lodash/pick\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | \"top\" | \"bottom\";\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Omit<\n    FormState<T, S, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, S, F>,\n    inputFormData?: T\n  ): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, S, F>,\n    nextState: FormState<T, S, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, S, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T, fields: string[][]): T => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(\n      formData,\n      fields as unknown as string[]\n    );\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param formData - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData: T): string[][] => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[][] = [],\n      paths: string[][] = [[]]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(\n            newErrorSchema,\n            extraErrors,\n            \"preventDuplicates\"\n          ) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, S, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry<\n      T,\n      S,\n      F\n    >();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = \"top\",\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === \"top\" && this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} />}\n        {showErrorList === \"bottom\" && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  FormProps<T, S, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n> & {\n  ref?: React.Ref<Form<T, S, F>>;\n};\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(themeProps: ThemeProps<T, S, F>) {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, S, F>,\n      ref: ForwardedRef<Form<T, S, F>>\n    ) => {\n      fields = { ...themeProps.fields, ...fields };\n      widgets = { ...themeProps.widgets, ...widgets };\n      templates = {\n        ...themeProps.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","Component","constructor","props","super","this","_getNewFormDataRow","schema","registry","schemaUtils","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","preventDefault","onChange","state","newKeyedFormData","setState","updatedKeyedFormData","onAddIndexClick","index","newKeyedFormDataRow","splice","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_newKeyedFormData","slice","reOrderArray","onChangeForIndex","value","id","onSelectChange","idSchema","undefined","$id","static","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","itemTitle","get","ITEMS_KEY","isItemRequired","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","maxItems","render","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","name","disabled","readonly","autofocus","required","onBlur","onFocus","idPrefix","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","arrayProps","canAdd","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","className","Template","createElement","hideError","placeholder","widgets","widget","options","Widget","getWidget","multiple","label","enumOptions","optionsList","itemSchemas","additionalSchema","concat","additional","canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","BooleanField","oneOf","option","const","o","schemaWithEnumNames","enums","enum","enumNames","every","v","AnyOfField","onOptionChange","selectedOption","newOption","newFormData","guessType","properties","assign","optionsToDiscard","unset","getFieldId","getMatchingOption","componentDidUpdate","prevProps","deepEquals","matchingOption","baseType","_SchemaField","optionSchema","default","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_this","arguments","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","handleAddClick","REF_KEY","$ref","getDefaultValue","isRequired","indexOf","rawSchema","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","getFieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","fieldErrorSchema","omit","help","classNames","push","helpComponent","hasErrors","errorsComponent","errors","fieldProps","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","Fragment","isSelect","shouldComponentUpdate","format","defaultWidget","hasWidget","NullField","useEffect","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","_ref","itemProps","TitleFieldTemplate","BaseInputTemplate","rest","console","log","Error","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","Set","example","SubmitButton","submitText","norender","submitButtonProps","getSubmitButtonOptions","IconButton","iconType","icon","otherProps","DescriptionField","ErrorList","error","stack","Label","htmlFor","WrapIfAdditionalTemplate","elem","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","AltDateWidget","time","useReducer","action","parseDateString","toDateString","values","readyForChange","property","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","year","month","day","hour","minute","second","data","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","CheckboxWidget","schemaRequiresTrueValue","checked","handleBlur","handleFocus","CheckboxesWidget","inline","enumDisabled","itemDisabled","disabledCls","checkbox","all","selected","at","sort","a","b","Number","selectValue","deselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","from","then","filesInfoEvent","newValue","accept","String","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","processSelectValue","TextareaWidget","_ref4","rows","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","getRegistry","_this$props$templates","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","onError","tagName","method","autoComplete","enctype","acceptcharset","noHtml5Validate","showErrorList","_internalFormWrapper","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}