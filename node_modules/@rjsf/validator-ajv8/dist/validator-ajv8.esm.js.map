{"version":3,"file":"validator-ajv8.esm.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from \"ajv8\";\nimport addFormats, { FormatsPluginOptions } from \"ajv-formats\";\nimport isObject from \"lodash/isObject\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType[\"additionalMetaSchemas\"],\n  customFormats?: CustomValidatorOptionsType[\"customFormats\"],\n  ajvOptionsOverrides: CustomValidatorOptionsType[\"ajvOptionsOverrides\"] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat(\"data-url\", DATA_URL_FORMAT_REGEX);\n  ajv.addFormat(\"color\", COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject, ValidateFunction } from \"ajv8\";\nimport toPath from \"lodash/toPath\";\nimport isObject from \"lodash/isObject\";\nimport clone from \"lodash/clone\";\nimport {\n  CustomValidator,\n  ERRORS_KEY,\n  ErrorSchema,\n  ErrorTransformer,\n  FieldValidation,\n  FormValidation,\n  GenericObjectType,\n  getDefaultFormState,\n  mergeValidationData,\n  REF_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport createAjvInstance from \"./createAjvInstance\";\n\nconst ROOT_SCHEMA_PREFIX = \"__rjsf_rootSchema\";\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n> implements ValidatorType<T>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const {\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n      AjvClass,\n    } = options;\n    this.ajv = createAjvInstance(\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n      AjvClass\n    );\n    this.localizer = localizer;\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    if (!errors.length) {\n      return {} as ErrorSchema<T>;\n    }\n    return errors.reduce(\n      (errorSchema: ErrorSchema<T>, error): ErrorSchema<T> => {\n        const { property, message } = error;\n        const path = toPath(property);\n        let parent: GenericObjectType = errorSchema;\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === \"\") {\n          path.splice(0, 1);\n        }\n\n        for (const segment of path.slice(0)) {\n          if (!(segment in parent)) {\n            parent[segment] = {};\n          }\n          parent = parent[segment];\n        }\n\n        if (Array.isArray(parent.__errors)) {\n          // We store the list of errors for this node in a property named __errors\n          // to avoid name collision with a possible sub schema field named\n          // 'errors' (see `validate.createErrorHandler`).\n          parent.__errors = parent.__errors.concat(message!);\n        } else {\n          if (message) {\n            parent.__errors = [message];\n          }\n        }\n        return errorSchema;\n      },\n      {} as ErrorSchema<T>\n    );\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema.__errors!.map((message: string) => {\n          const property = `.${fieldPath.join(\".\")}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(\n          this.toErrorList((errorSchema as GenericObjectType)[key], [\n            ...fieldPath,\n            key,\n          ])\n        );\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === \"addError\") {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler(\n          (errorHandler as GenericObjectType)[key]\n        ),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @private\n   */\n  private transformRJSFValidationErrors(\n    errors: ErrorObject[] = []\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, message, params, schemaPath } = e;\n      const property = instancePath.replace(/\\//g, \".\");\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack: `${property} ${message}`.trim(),\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(\n    schema: RJSFSchema,\n    formData?: T\n  ): { errors?: Result[]; validationError?: Error } {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema[\"$id\"]) {\n      compiledValidator = this.ajv.getSchema(schema[\"$id\"]);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === \"function\") {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T>,\n    transformErrors?: ErrorTransformer\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors);\n\n    if (invalidSchemaError) {\n      errors = [...errors, { stack: invalidSchemaError!.message }];\n    }\n    if (typeof transformErrors === \"function\") {\n      errors = transformErrors(errors);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (invalidSchemaError) {\n      errorSchema = {\n        ...errorSchema,\n        $schema: {\n          __errors: [invalidSchemaError!.message],\n        },\n      };\n    }\n\n    if (typeof customValidate !== \"function\") {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T>(\n      this,\n      schema,\n      formData,\n      schema,\n      true\n    ) as T;\n\n    const errorHandler = customValidate(\n      newFormData,\n      this.createErrorHandler(newFormData)\n    );\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T>(\n      this,\n      { errors, errorSchema },\n      userErrorSchema\n    );\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: S) {\n    for (const key in node) {\n      const realObj: GenericObjectType = node;\n      const value = realObj[key];\n      if (\n        key === REF_KEY &&\n        typeof value === \"string\" &&\n        value.startsWith(\"#\")\n      ) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: S[]): S[] {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]) as S;\n    }\n    return node;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T, rootSchema: S) {\n    const rootSchemaId = rootSchema[\"$id\"] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = this.withIdRefPrefix(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix[\"$id\"]) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix[\"$id\"]);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn(\"Error encountered compiling schema:\", e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: S | S[]): S | S[] {\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    if (isObject(schemaNode)) {\n      return this.withIdRefPrefixObject(clone<S>(schemaNode));\n    }\n    return schemaNode;\n  }\n}\n","import { RJSFSchema, StrictRJSFSchema, ValidatorType } from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport AJV8Validator from \"./validator\";\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  options: CustomValidatorOptionsType = {},\n  localizer?: Localizer\n): ValidatorType<T, S> {\n  return new AJV8Validator<T, S>(options, localizer);\n}\n","import customizeValidator from \"./customizeValidator\";\n\nexport { customizeValidator };\nexport * from \"./types\";\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","ajv","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","ROOT_SCHEMA_PREFIX","AJV8Validator","constructor","options","localizer","toErrorSchema","errors","length","reduce","errorSchema","error","property","message","path","toPath","parent","splice","segment","slice","__errors","concat","toErrorList","fieldPath","errorList","ERRORS_KEY","map","join","stack","acc","key","createErrorHandler","formData","handler","addError","push","value","formObject","unwrapErrorHandler","errorHandler","transformRJSFValidationErrors","e","instancePath","keyword","params","schemaPath","replace","name","trim","rawValidation","schema","compilationError","undefined","compiledValidator","getSchema","compile","err","validationError","validateFormData","customValidate","transformErrors","rawErrors","invalidSchemaError","$schema","newFormData","getDefaultFormState","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","realObj","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","rootSchema","rootSchemaId","addSchema","schemaWithIdRefPrefix","result","console","warn","removeSchema","schemaNode","clone","customizeValidator"],"mappings":"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"}